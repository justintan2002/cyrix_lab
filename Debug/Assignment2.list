
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08008d10  08008d10  00018d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e8  080091e8  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091f0  080091f0  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  080091f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200002b4  080094ac  000202b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  080094ac  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8d1  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281f  00000000  00000000  0002ebb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000313d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00032120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029184  00000000  00000000  00032cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011478  00000000  00000000  0005be74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f54ac  00000000  00000000  0006d2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162798  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c84  00000000  00000000  001627e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0016746c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  00167490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b4 	.word	0x200002b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008cf8 	.word	0x08008cf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b8 	.word	0x200002b8
 80001cc:	08008cf8 	.word	0x08008cf8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HAL_GPIO_EXTI_Callback>:

UART_HandleTypeDef huart1;


HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin)
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f5c:	d108      	bne.n	8000f70 <HAL_GPIO_EXTI_Callback+0x24>
	{
		t1 = t2;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_GPIO_EXTI_Callback+0x30>)
 8000f64:	6013      	str	r3, [r2, #0]
		t2 = HAL_GetTick();
 8000f66:	f001 fdd1 	bl	8002b0c <HAL_GetTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a02      	ldr	r2, [pc, #8]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f6e:	6013      	str	r3, [r2, #0]
	}
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200002d4 	.word	0x200002d4
 8000f7c:	200002d0 	.word	0x200002d0

08000f80 <main>:

int main(void)
{
 8000f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f84:	b0a6      	sub	sp, #152	; 0x98
 8000f86:	af0a      	add	r7, sp, #40	; 0x28
 	initialise_monitor_handles(); // for semi-hosting support (printf)
 8000f88:	f003 ffd0 	bl	8004f2c <initialise_monitor_handles>

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f8c:	f001 fd5a 	bl	8002a44 <HAL_Init>
	MX_GPIO_Init();
 8000f90:	f000 f9c6 	bl	8001320 <MX_GPIO_Init>

	huart1.Instance = USART1;
 8000f94:	4b9c      	ldr	r3, [pc, #624]	; (8001208 <main+0x288>)
 8000f96:	4a9d      	ldr	r2, [pc, #628]	; (800120c <main+0x28c>)
 8000f98:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000f9a:	4b9b      	ldr	r3, [pc, #620]	; (8001208 <main+0x288>)
 8000f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b99      	ldr	r3, [pc, #612]	; (8001208 <main+0x288>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b97      	ldr	r3, [pc, #604]	; (8001208 <main+0x288>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b96      	ldr	r3, [pc, #600]	; (8001208 <main+0x288>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b94      	ldr	r3, [pc, #592]	; (8001208 <main+0x288>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b93      	ldr	r3, [pc, #588]	; (8001208 <main+0x288>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b91      	ldr	r3, [pc, #580]	; (8001208 <main+0x288>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc6:	4b90      	ldr	r3, [pc, #576]	; (8001208 <main+0x288>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fcc:	4b8e      	ldr	r3, [pc, #568]	; (8001208 <main+0x288>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24

	BSP_COM_Init(COM1, &huart1);
 8000fd2:	498d      	ldr	r1, [pc, #564]	; (8001208 <main+0x288>)
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f000 fc89 	bl	80018ec <BSP_COM_Init>

	/* Peripheral initializations using BSP functions */
	BSP_ACCELERO_Init(); //ODR: 52Hz
 8000fda:	f000 fe43 	bl	8001c64 <BSP_ACCELERO_Init>
	BSP_GYRO_Init(); //ODR: 52Hz
 8000fde:	f000 fe97 	bl	8001d10 <BSP_GYRO_Init>
	BSP_MAGNETO_Init(); //ODR: 40Hz
 8000fe2:	f000 ff1d 	bl	8001e20 <BSP_MAGNETO_Init>
	BSP_TSENSOR_Init(); //ODR: 1Hz
 8000fe6:	f000 ff8d 	bl	8001f04 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init(); //ODR: 1Hz
 8000fea:	f000 feeb 	bl	8001dc4 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init(); //ODR: 25Hz
 8000fee:	f000 ff5b 	bl	8001ea8 <BSP_PSENSOR_Init>

	uint32_t imu_tick = HAL_GetTick();
 8000ff2:	f001 fd8b 	bl	8002b0c <HAL_GetTick>
 8000ff6:	64b8      	str	r0, [r7, #72]	; 0x48
	uint32_t tnh_tick = HAL_GetTick();
 8000ff8:	f001 fd88 	bl	8002b0c <HAL_GetTick>
 8000ffc:	66f8      	str	r0, [r7, #108]	; 0x6c
	uint32_t pressure_tick = HAL_GetTick();
 8000ffe:	f001 fd85 	bl	8002b0c <HAL_GetTick>
 8001002:	66b8      	str	r0, [r7, #104]	; 0x68
	uint32_t fluxer_tick = HAL_GetTick();
 8001004:	f001 fd82 	bl	8002b0c <HAL_GetTick>
 8001008:	6478      	str	r0, [r7, #68]	; 0x44
	uint32_t sensor_send_tick = HAL_GetTick();
 800100a:	f001 fd7f 	bl	8002b0c <HAL_GetTick>
 800100e:	6678      	str	r0, [r7, #100]	; 0x64

	float temp_data, humidity_data, pressure_data;
	float accel_data[3], mag_data[3], gyro_data[3]; // [x, y, z]
	float mag_magnitude;

	uint8_t mode = 0; //0: exploration, 1: battle
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t warning = 0; //0: no warning, 1: warning
 8001016:	2300      	movs	r3, #0
 8001018:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	uint8_t charge_cnt = 8;
 800101c:	2308      	movs	r3, #8
 800101e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

	while (1)
	{
		switch (check_button())
 8001022:	f000 f9d1 	bl	80013c8 <check_button>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d002      	beq.n	8001032 <main+0xb2>
 800102c:	2b02      	cmp	r3, #2
 800102e:	d00e      	beq.n	800104e <main+0xce>
			uart_print("clear warning/charging \n");
			if (!warning && charge_cnt < 10) charge_cnt += 1;
			else if(warning) warning = 0;
			break;
		default:
			break;
 8001030:	e029      	b.n	8001086 <main+0x106>
			uart_print("change mode \n");
 8001032:	4877      	ldr	r0, [pc, #476]	; (8001210 <main+0x290>)
 8001034:	f000 fa4c 	bl	80014d0 <uart_print>
			if (!warning) mode ^= 1;
 8001038:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800103c:	2b00      	cmp	r3, #0
 800103e:	d11f      	bne.n	8001080 <main+0x100>
 8001040:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001044:	f083 0301 	eor.w	r3, r3, #1
 8001048:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			break;
 800104c:	e018      	b.n	8001080 <main+0x100>
			uart_print("clear warning/charging \n");
 800104e:	4871      	ldr	r0, [pc, #452]	; (8001214 <main+0x294>)
 8001050:	f000 fa3e 	bl	80014d0 <uart_print>
			if (!warning && charge_cnt < 10) charge_cnt += 1;
 8001054:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <main+0xf0>
 800105c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001060:	2b09      	cmp	r3, #9
 8001062:	d805      	bhi.n	8001070 <main+0xf0>
 8001064:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001068:	3301      	adds	r3, #1
 800106a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
			break;
 800106e:	e009      	b.n	8001084 <main+0x104>
			else if(warning) warning = 0;
 8001070:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <main+0x104>
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			break;
 800107e:	e001      	b.n	8001084 <main+0x104>
			break;
 8001080:	bf00      	nop
 8001082:	e000      	b.n	8001086 <main+0x106>
			break;
 8001084:	bf00      	nop
		}

		led_handler(mode, warning);
 8001086:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800108a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f9cd 	bl	8001430 <led_handler>

		if (HAL_GetTick() - imu_tick >= 1000/imu_freq){
 8001096:	f001 fd39 	bl	8002b0c <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b18      	cmp	r3, #24
 80010a2:	f240 80db 	bls.w	800125c <main+0x2dc>
			int16_t mag_data_i16[3] = { 0 };
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	809a      	strh	r2, [r3, #4]
			BSP_MAGNETO_GetXYZ(mag_data_i16);
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fedf 	bl	8001e78 <BSP_MAGNETO_GetXYZ>
			mag_data[0] = (float)mag_data_i16[0]/6842;
 80010ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c6:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001218 <main+0x298>
 80010ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			mag_data[1] = (float)mag_data_i16[1]/6842;
 80010d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010de:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001218 <main+0x298>
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			mag_data[2] = (float)mag_data_i16[2]/6842;
 80010ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001218 <main+0x298>
 80010fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010fe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

			mag_magnitude = (float) sqrt(pow(mag_data[0], 2) + pow(mag_data[1], 2) + pow(mag_data[2], 2));
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa1f 	bl	8000548 <__aeabi_f2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8001200 <main+0x280>
 8001112:	ec43 2b10 	vmov	d0, r2, r3
 8001116:	f006 fe9f 	bl	8007e58 <pow>
 800111a:	ec55 4b10 	vmov	r4, r5, d0
 800111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa11 	bl	8000548 <__aeabi_f2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001200 <main+0x280>
 800112e:	ec43 2b10 	vmov	d0, r2, r3
 8001132:	f006 fe91 	bl	8007e58 <pow>
 8001136:	ec53 2b10 	vmov	r2, r3, d0
 800113a:	4620      	mov	r0, r4
 800113c:	4629      	mov	r1, r5
 800113e:	f7ff f8a5 	bl	800028c <__adddf3>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4614      	mov	r4, r2
 8001148:	461d      	mov	r5, r3
 800114a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f9fb 	bl	8000548 <__aeabi_f2d>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001200 <main+0x280>
 800115a:	ec43 2b10 	vmov	d0, r2, r3
 800115e:	f006 fe7b 	bl	8007e58 <pow>
 8001162:	ec53 2b10 	vmov	r2, r3, d0
 8001166:	4620      	mov	r0, r4
 8001168:	4629      	mov	r1, r5
 800116a:	f7ff f88f 	bl	800028c <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	ec43 2b17 	vmov	d7, r2, r3
 8001176:	eeb0 0a47 	vmov.f32	s0, s14
 800117a:	eef0 0a67 	vmov.f32	s1, s15
 800117e:	f006 fedb 	bl	8007f38 <sqrt>
 8001182:	ec53 2b10 	vmov	r2, r3, d0
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fd0d 	bl	8000ba8 <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	657b      	str	r3, [r7, #84]	; 0x54

			int16_t accel_data_i16[3] = { 0 };			// array to store the x, y and z readings.
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	809a      	strh	r2, [r3, #4]
			BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fd9d 	bl	8001ce0 <BSP_ACCELERO_AccGetXYZ>
			// the function above returns 16 bit integers which are 100 * acceleration_in_m/s2. Converting to float to print the actual acceleration.
			accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 80011a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800121c <main+0x29c>
 80011b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 80011be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	eddf 6a14 	vldr	s13, [pc, #80]	; 800121c <main+0x29c>
 80011ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 80011d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800121c <main+0x29c>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

			BSP_GYRO_GetXYZ(gyro_data);
 80011ee:	f107 0320 	add.w	r3, r7, #32
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fdce 	bl	8001d94 <BSP_GYRO_GetXYZ>
			for (int i=0; i<3; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011fc:	e02b      	b.n	8001256 <main+0x2d6>
 80011fe:	bf00      	nop
 8001200:	00000000 	.word	0x00000000
 8001204:	40000000 	.word	0x40000000
 8001208:	200002dc 	.word	0x200002dc
 800120c:	40013800 	.word	0x40013800
 8001210:	08008d10 	.word	0x08008d10
 8001214:	08008d20 	.word	0x08008d20
 8001218:	45d5d000 	.word	0x45d5d000
 800121c:	42c80000 	.word	0x42c80000
 8001220:	447a0000 	.word	0x447a0000
				gyro_data[i] /= 1000; //convert from mdps to dps
 8001224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	3360      	adds	r3, #96	; 0x60
 800122a:	f107 0210 	add.w	r2, r7, #16
 800122e:	4413      	add	r3, r2
 8001230:	3b50      	subs	r3, #80	; 0x50
 8001232:	ed93 7a00 	vldr	s14, [r3]
 8001236:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8001220 <main+0x2a0>
 800123a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	3360      	adds	r3, #96	; 0x60
 8001244:	f107 0210 	add.w	r2, r7, #16
 8001248:	4413      	add	r3, r2
 800124a:	3b50      	subs	r3, #80	; 0x50
 800124c:	edc3 7a00 	vstr	s15, [r3]
			for (int i=0; i<3; i++)
 8001250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001252:	3301      	adds	r3, #1
 8001254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001258:	2b02      	cmp	r3, #2
 800125a:	dde3      	ble.n	8001224 <main+0x2a4>
		}

		if (HAL_GetTick() - tnh_tick >= 1000/tnh_freq){
 800125c:	f001 fc56 	bl	8002b0c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800126a:	d30a      	bcc.n	8001282 <main+0x302>
			temp_data = BSP_TSENSOR_ReadTemp();			// read temperature sensor
 800126c:	f000 fe66 	bl	8001f3c <BSP_TSENSOR_ReadTemp>
 8001270:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
			humidity_data = BSP_HSENSOR_ReadHumidity();
 8001274:	f000 fdc6 	bl	8001e04 <BSP_HSENSOR_ReadHumidity>
 8001278:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
			tnh_tick = HAL_GetTick();
 800127c:	f001 fc46 	bl	8002b0c <HAL_GetTick>
 8001280:	66f8      	str	r0, [r7, #108]	; 0x6c
		}

		if (HAL_GetTick() - pressure_tick >= 1000/pressure_freq){
 8001282:	f001 fc43 	bl	8002b0c <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b31      	cmp	r3, #49	; 0x31
 800128e:	d906      	bls.n	800129e <main+0x31e>
			pressure_data = BSP_PSENSOR_ReadPressure();
 8001290:	f000 fe2a 	bl	8001ee8 <BSP_PSENSOR_ReadPressure>
 8001294:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
			pressure_tick = HAL_GetTick();
 8001298:	f001 fc38 	bl	8002b0c <HAL_GetTick>
 800129c:	66b8      	str	r0, [r7, #104]	; 0x68
		}

		if (HAL_GetTick() - sensor_send_tick >= 1000/sensor_send_freq){
 800129e:	f001 fc35 	bl	8002b0c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ac:	f4ff aeb9 	bcc.w	8001022 <main+0xa2>
			uart_print("T:%.2f C, P:%.2f hPa, H:%.2f %%rH, A:%.2f m/s2, G:%.2f dps, M:%.3f gauss\r\n", temp_data, pressure_data, humidity_data, accel_data[2], gyro_data[2], mag_magnitude);
 80012b0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80012b2:	f7ff f949 	bl	8000548 <__aeabi_f2d>
 80012b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80012bc:	f7ff f944 	bl	8000548 <__aeabi_f2d>
 80012c0:	4604      	mov	r4, r0
 80012c2:	460d      	mov	r5, r1
 80012c4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_f2d>
 80012ca:	4680      	mov	r8, r0
 80012cc:	4689      	mov	r9, r1
 80012ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f939 	bl	8000548 <__aeabi_f2d>
 80012d6:	4682      	mov	sl, r0
 80012d8:	468b      	mov	fp, r1
 80012da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	e9c7 0100 	strd	r0, r1, [r7]
 80012e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80012e8:	f7ff f92e 	bl	8000548 <__aeabi_f2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80012f4:	ed97 7b00 	vldr	d7, [r7]
 80012f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80012fc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001300:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001304:	e9cd 4500 	strd	r4, r5, [sp]
 8001308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <main+0x39c>)
 800130e:	f000 f8df 	bl	80014d0 <uart_print>
			sensor_send_tick = HAL_GetTick();
 8001312:	f001 fbfb 	bl	8002b0c <HAL_GetTick>
 8001316:	6678      	str	r0, [r7, #100]	; 0x64
		switch (check_button())
 8001318:	e683      	b.n	8001022 <main+0xa2>
 800131a:	bf00      	nop
 800131c:	08008d3c 	.word	0x08008d3c

08001320 <MX_GPIO_Init>:
	}

}

static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_GPIO_Init+0x98>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <MX_GPIO_Init+0x98>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_GPIO_Init+0x98>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_GPIO_Init+0x98>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <MX_GPIO_Init+0x98>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_GPIO_Init+0x98>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800136c:	4813      	ldr	r0, [pc, #76]	; (80013bc <MX_GPIO_Init+0x9c>)
 800136e:	f001 ff89 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001372:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	4619      	mov	r1, r3
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <MX_GPIO_Init+0x9c>)
 800138c:	f001 fcdc 	bl	8002d48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <MX_GPIO_Init+0xa0>)
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <MX_GPIO_Init+0xa4>)
 80013a6:	f001 fccf 	bl	8002d48 <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013aa:	2028      	movs	r0, #40	; 0x28
 80013ac:	f001 fcb1 	bl	8002d12 <HAL_NVIC_EnableIRQ>
}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000400 	.word	0x48000400
 80013c0:	10210000 	.word	0x10210000
 80013c4:	48000800 	.word	0x48000800

080013c8 <check_button>:

int check_button(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	if (t2 == 0) return 0;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <check_button+0x60>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <check_button+0x10>
 80013d4:	2300      	movs	r3, #0
 80013d6:	e025      	b.n	8001424 <check_button+0x5c>
	else if(HAL_GetTick() - t2 > 1000){
 80013d8:	f001 fb98 	bl	8002b0c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <check_button+0x60>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013e8:	d907      	bls.n	80013fa <check_button+0x32>
		t1 = 0;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <check_button+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
		t2 = 0;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <check_button+0x60>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
		return 2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	e014      	b.n	8001424 <check_button+0x5c>
	}
	else if(t2 - t1 <= 1000 && t1 != 0){
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <check_button+0x60>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <check_button+0x64>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001408:	d80b      	bhi.n	8001422 <check_button+0x5a>
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <check_button+0x64>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <check_button+0x5a>
		t1 = 0;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <check_button+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
		t2 = 0;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <check_button+0x60>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
		return 1;
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <check_button+0x5c>
	}
	else{
		return 0;
 8001422:	2300      	movs	r3, #0
	}
}
 8001424:	4618      	mov	r0, r3
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200002d4 	.word	0x200002d4
 800142c:	200002d0 	.word	0x200002d0

08001430 <led_handler>:

void led_handler(uint8_t mode, uint8_t warning){
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	460a      	mov	r2, r1
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	4613      	mov	r3, r2
 800143e:	71bb      	strb	r3, [r7, #6]
	static int interval;
	uint32_t led_status = (GPIOB->ODR & GPIO_PIN_14);
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <led_handler+0x94>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001448:	60fb      	str	r3, [r7, #12]
	if (warning == 1){
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d104      	bne.n	800145a <led_handler+0x2a>
		interval = 333;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <led_handler+0x98>)
 8001452:	f240 124d 	movw	r2, #333	; 0x14d
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e00c      	b.n	8001474 <led_handler+0x44>
	}
	else if(mode == 1){
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d104      	bne.n	800146a <led_handler+0x3a>
		interval = 1000;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <led_handler+0x98>)
 8001462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e004      	b.n	8001474 <led_handler+0x44>
	}
	else{
		GPIOB->BSRR = (uint32_t)GPIO_PIN_14;
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <led_handler+0x94>)
 800146c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001470:	619a      	str	r2, [r3, #24]
		return;
 8001472:	e023      	b.n	80014bc <led_handler+0x8c>
	}
	//led will be on for 50ms every blink
	if (HAL_GetTick() - led_tick > 100 && led_status != 0x00u)
 8001474:	f001 fb4a 	bl	8002b0c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <led_handler+0x9c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b64      	cmp	r3, #100	; 0x64
 8001482:	d907      	bls.n	8001494 <led_handler+0x64>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <led_handler+0x64>
		GPIOB->BRR = (uint32_t)GPIO_PIN_14;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <led_handler+0x94>)
 800148c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
	else if (HAL_GetTick() - led_tick > interval){
		GPIOB->BSRR = (uint32_t)GPIO_PIN_14;
		led_tick = HAL_GetTick();
	}
	return;
 8001492:	e012      	b.n	80014ba <led_handler+0x8a>
	else if (HAL_GetTick() - led_tick > interval){
 8001494:	f001 fb3a 	bl	8002b0c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <led_handler+0x9c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <led_handler+0x98>)
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d908      	bls.n	80014ba <led_handler+0x8a>
		GPIOB->BSRR = (uint32_t)GPIO_PIN_14;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <led_handler+0x94>)
 80014aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ae:	619a      	str	r2, [r3, #24]
		led_tick = HAL_GetTick();
 80014b0:	f001 fb2c 	bl	8002b0c <HAL_GetTick>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <led_handler+0x9c>)
 80014b8:	6013      	str	r3, [r2, #0]
	return;
 80014ba:	bf00      	nop
}
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	48000400 	.word	0x48000400
 80014c8:	2000035c 	.word	0x2000035c
 80014cc:	200002d8 	.word	0x200002d8

080014d0 <uart_print>:

void uart_print(const char* format, ...){
 80014d0:	b40f      	push	{r0, r1, r2, r3}
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b0c2      	sub	sp, #264	; 0x108
 80014d6:	af00      	add	r7, sp, #0
	char msg_print[256];
	va_list args;
	va_start(args, format);
 80014d8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80014dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014e4:	601a      	str	r2, [r3, #0]
	vsprintf(msg_print, format, args);
 80014e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ee:	f107 0008 	add.w	r0, r7, #8
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80014f8:	f004 fc36 	bl	8005d68 <vsiprintf>
	va_end(args);
	HAL_UART_Transmit(&huart1, (uint8_t*)msg_print, strlen(msg_print),0xFFFF); //Sending in normal mode
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe fe65 	bl	80001d0 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	f107 0108 	add.w	r1, r7, #8
 800150e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <uart_print+0x58>)
 8001514:	f002 fd4c 	bl	8003fb0 <HAL_UART_Transmit>
}
 8001518:	bf00      	nop
 800151a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800151e:	46bd      	mov	sp, r7
 8001520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001524:	b004      	add	sp, #16
 8001526:	4770      	bx	lr
 8001528:	200002dc 	.word	0x200002dc

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6613      	str	r3, [r2, #96]	; 0x60
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x44>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x44>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6593      	str	r3, [r2, #88]	; 0x58
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x44>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_I2C_MspInit+0x7c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d128      	bne.n	80015e8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80015ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015c0:	2304      	movs	r3, #4
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480b      	ldr	r0, [pc, #44]	; (80015f8 <HAL_I2C_MspInit+0x84>)
 80015cc:	f001 fbbc 	bl	8002d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 80015d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015da:	6593      	str	r3, [r2, #88]	; 0x58
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_I2C_MspInit+0x80>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40005800 	.word	0x40005800
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48000400 	.word	0x48000400

080015fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_I2C_MspDeInit+0x30>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d10a      	bne.n	8001624 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_I2C_MspDeInit+0x34>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_I2C_MspDeInit+0x34>)
 8001614:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 800161a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <HAL_I2C_MspDeInit+0x38>)
 8001620:	f001 fd3c 	bl	800309c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40005800 	.word	0x40005800
 8001630:	40021000 	.word	0x40021000
 8001634:	48000400 	.word	0x48000400

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <HAL_UART_MspInit+0xd8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d128      	bne.n	80016ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_UART_MspInit+0xdc>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	4a2d      	ldr	r2, [pc, #180]	; (8001714 <HAL_UART_MspInit+0xdc>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6613      	str	r3, [r2, #96]	; 0x60
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_UART_MspInit+0xdc>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_UART_MspInit+0xdc>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a27      	ldr	r2, [pc, #156]	; (8001714 <HAL_UART_MspInit+0xdc>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <HAL_UART_MspInit+0xdc>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800168a:	23c0      	movs	r3, #192	; 0xc0
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800169a:	2307      	movs	r3, #7
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	481c      	ldr	r0, [pc, #112]	; (8001718 <HAL_UART_MspInit+0xe0>)
 80016a6:	f001 fb4f 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016aa:	e02d      	b.n	8001708 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <HAL_UART_MspInit+0xe4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d128      	bne.n	8001708 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_UART_MspInit+0xdc>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	4a16      	ldr	r2, [pc, #88]	; (8001714 <HAL_UART_MspInit+0xdc>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c0:	6593      	str	r3, [r2, #88]	; 0x58
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_UART_MspInit+0xdc>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_UART_MspInit+0xdc>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a10      	ldr	r2, [pc, #64]	; (8001714 <HAL_UART_MspInit+0xdc>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_UART_MspInit+0xdc>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80016e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016f8:	2307      	movs	r3, #7
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <HAL_UART_MspInit+0xe8>)
 8001704:	f001 fb20 	bl	8002d48 <HAL_GPIO_Init>
}
 8001708:	bf00      	nop
 800170a:	3730      	adds	r7, #48	; 0x30
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40013800 	.word	0x40013800
 8001714:	40021000 	.word	0x40021000
 8001718:	48000400 	.word	0x48000400
 800171c:	40004800 	.word	0x40004800
 8001720:	48000c00 	.word	0x48000c00

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f001 f9b6 	bl	8002ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001784:	2020      	movs	r0, #32
 8001786:	f001 fd95 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800178a:	2040      	movs	r0, #64	; 0x40
 800178c:	f001 fd92 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001790:	2080      	movs	r0, #128	; 0x80
 8001792:	f001 fd8f 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001796:	f44f 7080 	mov.w	r0, #256	; 0x100
 800179a:	f001 fd8b 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80017a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017aa:	f001 fd83 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80017ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017b2:	f001 fd7f 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017ba:	f001 fd7b 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80017be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017c2:	f001 fd77 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80017c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017ca:	f001 fd73 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <_sbrk+0x50>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x16>
		heap_end = &end;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <_sbrk+0x50>)
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <_sbrk+0x54>)
 80017e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <_sbrk+0x50>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <_sbrk+0x50>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	466a      	mov	r2, sp
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d907      	bls.n	800180e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017fe:	f003 fc11 	bl	8005024 <__errno>
 8001802:	4603      	mov	r3, r0
 8001804:	220c      	movs	r2, #12
 8001806:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
 800180c:	e006      	b.n	800181c <_sbrk+0x48>
	}

	heap_end += incr;
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <_sbrk+0x50>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a03      	ldr	r2, [pc, #12]	; (8001824 <_sbrk+0x50>)
 8001818:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000360 	.word	0x20000360
 8001828:	20000488 	.word	0x20000488

0800182c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <SystemInit+0x64>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <SystemInit+0x64>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <SystemInit+0x68>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a13      	ldr	r2, [pc, #76]	; (8001894 <SystemInit+0x68>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <SystemInit+0x68>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <SystemInit+0x68>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <SystemInit+0x68>)
 8001858:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800185c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001860:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <SystemInit+0x68>)
 8001864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001868:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <SystemInit+0x68>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <SystemInit+0x68>)
 8001870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001874:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <SystemInit+0x68>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SystemInit+0x64>)
 800187e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001882:	609a      	str	r2, [r3, #8]
#endif
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	40021000 	.word	0x40021000

08001898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800189c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800189e:	e003      	b.n	80018a8 <LoopCopyDataInit>

080018a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018a6:	3104      	adds	r1, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018a8:	480b      	ldr	r0, [pc, #44]	; (80018d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80018ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018b0:	d3f6      	bcc.n	80018a0 <CopyDataInit>
	ldr	r2, =_sbss
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018b4:	e002      	b.n	80018bc <LoopFillZerobss>

080018b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018b8:	f842 3b04 	str.w	r3, [r2], #4

080018bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <LoopForever+0x16>)
	cmp	r2, r3
 80018be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018c0:	d3f9      	bcc.n	80018b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018c2:	f7ff ffb3 	bl	800182c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c6:	f003 fca9 	bl	800521c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ca:	f7ff fb59 	bl	8000f80 <main>

080018ce <LoopForever>:

LoopForever:
    b LoopForever
 80018ce:	e7fe      	b.n	80018ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018d0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80018d4:	080091f8 	.word	0x080091f8
	ldr	r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018dc:	200002b4 	.word	0x200002b4
	ldr	r2, =_sbss
 80018e0:	200002b4 	.word	0x200002b4
	ldr	r3, = _ebss
 80018e4:	20000488 	.word	0x20000488

080018e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC1_2_IRQHandler>
	...

080018ec <BSP_COM_Init>:
  *            @arg  COM1 
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10b      	bne.n	8001916 <BSP_COM_Init+0x2a>
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <BSP_COM_Init+0xc8>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <BSP_COM_Init+0xc8>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <BSP_COM_Init+0xc8>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10b      	bne.n	8001934 <BSP_COM_Init+0x48>
 800191c:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <BSP_COM_Init+0xc8>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001920:	4a24      	ldr	r2, [pc, #144]	; (80019b4 <BSP_COM_Init+0xc8>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <BSP_COM_Init+0xc8>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10b      	bne.n	8001952 <BSP_COM_Init+0x66>
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <BSP_COM_Init+0xc8>)
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <BSP_COM_Init+0xc8>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6613      	str	r3, [r2, #96]	; 0x60
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <BSP_COM_Init+0xc8>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8001952:	2340      	movs	r3, #64	; 0x40
 8001954:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800195a:	2302      	movs	r3, #2
 800195c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001962:	2307      	movs	r3, #7
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <BSP_COM_Init+0xcc>)
 800196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196e:	f107 0214 	add.w	r2, r7, #20
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f001 f9e7 	bl	8002d48 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8001982:	2307      	movs	r3, #7
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <BSP_COM_Init+0xd0>)
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	f107 0214 	add.w	r2, r7, #20
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f001 f9d7 	bl	8002d48 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <BSP_COM_Init+0xd4>)
 800199e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 80019a6:	6838      	ldr	r0, [r7, #0]
 80019a8:	f002 fab4 	bl	8003f14 <HAL_UART_Init>
}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000
 80019b8:	20000008 	.word	0x20000008
 80019bc:	2000000c 	.word	0x2000000c
 80019c0:	20000004 	.word	0x20000004

080019c4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <I2Cx_MspInit+0xa8>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d0:	4a26      	ldr	r2, [pc, #152]	; (8001a6c <I2Cx_MspInit+0xa8>)
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <I2Cx_MspInit+0xa8>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80019e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019e8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80019ea:	2312      	movs	r3, #18
 80019ec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80019f6:	2304      	movs	r3, #4
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	481b      	ldr	r0, [pc, #108]	; (8001a70 <I2Cx_MspInit+0xac>)
 8001a02:	f001 f9a1 	bl	8002d48 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4818      	ldr	r0, [pc, #96]	; (8001a70 <I2Cx_MspInit+0xac>)
 8001a0e:	f001 f99b 	bl	8002d48 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <I2Cx_MspInit+0xa8>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <I2Cx_MspInit+0xa8>)
 8001a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <I2Cx_MspInit+0xa8>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <I2Cx_MspInit+0xa8>)
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <I2Cx_MspInit+0xa8>)
 8001a30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a34:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <I2Cx_MspInit+0xa8>)
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <I2Cx_MspInit+0xa8>)
 8001a3c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a40:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	210f      	movs	r1, #15
 8001a46:	2021      	movs	r0, #33	; 0x21
 8001a48:	f001 f947 	bl	8002cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001a4c:	2021      	movs	r0, #33	; 0x21
 8001a4e:	f001 f960 	bl	8002d12 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	210f      	movs	r1, #15
 8001a56:	2022      	movs	r0, #34	; 0x22
 8001a58:	f001 f93f 	bl	8002cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001a5c:	2022      	movs	r0, #34	; 0x22
 8001a5e:	f001 f958 	bl	8002d12 <HAL_NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48000400 	.word	0x48000400

08001a74 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <I2Cx_Init+0x54>)
 8001a80:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a11      	ldr	r2, [pc, #68]	; (8001acc <I2Cx_Init+0x58>)
 8001a86:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff89 	bl	80019c4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f001 fc16 	bl	80032e4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001ab8:	2100      	movs	r1, #0
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f002 f91a 	bl	8003cf4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40005800 	.word	0x40005800
 8001acc:	00702681 	.word	0x00702681

08001ad0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af04      	add	r7, sp, #16
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	4608      	mov	r0, r1
 8001ada:	4611      	mov	r1, r2
 8001adc:	461a      	mov	r2, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	72fb      	strb	r3, [r7, #11]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	813b      	strh	r3, [r7, #8]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001aee:	7afb      	ldrb	r3, [r7, #11]
 8001af0:	b299      	uxth	r1, r3
 8001af2:	88f8      	ldrh	r0, [r7, #6]
 8001af4:	893a      	ldrh	r2, [r7, #8]
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4603      	mov	r3, r0
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f001 fdbe 	bl	8003688 <HAL_I2C_Mem_Read>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f832 	bl	8001b84 <I2Cx_Error>
  }
  return status;
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b08a      	sub	sp, #40	; 0x28
 8001b2e:	af04      	add	r7, sp, #16
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	4608      	mov	r0, r1
 8001b34:	4611      	mov	r1, r2
 8001b36:	461a      	mov	r2, r3
 8001b38:	4603      	mov	r3, r0
 8001b3a:	72fb      	strb	r3, [r7, #11]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	813b      	strh	r3, [r7, #8]
 8001b40:	4613      	mov	r3, r2
 8001b42:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	b299      	uxth	r1, r3
 8001b4c:	88f8      	ldrh	r0, [r7, #6]
 8001b4e:	893a      	ldrh	r2, [r7, #8]
 8001b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f001 fc7d 	bl	8003460 <HAL_I2C_Mem_Write>
 8001b66:	4603      	mov	r3, r0
 8001b68:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001b70:	7afb      	ldrb	r3, [r7, #11]
 8001b72:	4619      	mov	r1, r3
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 f805 	bl	8001b84 <I2Cx_Error>
  }
  return status;
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f001 fc36 	bl	8003402 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff6c 	bl	8001a74 <I2Cx_Init>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <SENSOR_IO_Init+0x10>)
 8001baa:	f7ff ff63 	bl	8001a74 <I2Cx_Init>
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000364 	.word	0x20000364

08001bb8 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	71bb      	strb	r3, [r7, #6]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	79f9      	ldrb	r1, [r7, #7]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	1d7b      	adds	r3, r7, #5
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	4803      	ldr	r0, [pc, #12]	; (8001be8 <SENSOR_IO_Write+0x30>)
 8001bdc:	f7ff ffa5 	bl	8001b2a <I2Cx_WriteMultiple>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000364 	.word	0x20000364

08001bec <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	71fb      	strb	r3, [r7, #7]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001c00:	79bb      	ldrb	r3, [r7, #6]
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	79f9      	ldrb	r1, [r7, #7]
 8001c06:	2301      	movs	r3, #1
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	f107 030f 	add.w	r3, r7, #15
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2301      	movs	r3, #1
 8001c12:	4804      	ldr	r0, [pc, #16]	; (8001c24 <SENSOR_IO_Read+0x38>)
 8001c14:	f7ff ff5c 	bl	8001ad0 <I2Cx_ReadMultiple>

  return read_value;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000364 	.word	0x20000364

08001c28 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	603a      	str	r2, [r7, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	460b      	mov	r3, r1
 8001c38:	71bb      	strb	r3, [r7, #6]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001c3e:	79bb      	ldrb	r3, [r7, #6]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	79f9      	ldrb	r1, [r7, #7]
 8001c44:	88bb      	ldrh	r3, [r7, #4]
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	4804      	ldr	r0, [pc, #16]	; (8001c60 <SENSOR_IO_ReadMultiple+0x38>)
 8001c50:	f7ff ff3e 	bl	8001ad0 <I2Cx_ReadMultiple>
 8001c54:	4603      	mov	r3, r0
 8001c56:	b29b      	uxth	r3, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000364 	.word	0x20000364

08001c64 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <BSP_ACCELERO_Init+0x74>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4798      	blx	r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b6a      	cmp	r3, #106	; 0x6a
 8001c7c:	d002      	beq.n	8001c84 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e024      	b.n	8001cce <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <BSP_ACCELERO_Init+0x78>)
 8001c86:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <BSP_ACCELERO_Init+0x74>)
 8001c88:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001c8a:	2330      	movs	r3, #48	; 0x30
 8001c8c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001c92:	2300      	movs	r3, #0
 8001c94:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001c96:	2340      	movs	r3, #64	; 0x40
 8001c98:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001ca2:	797a      	ldrb	r2, [r7, #5]
 8001ca4:	7abb      	ldrb	r3, [r7, #10]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001cac:	7a3b      	ldrb	r3, [r7, #8]
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <BSP_ACCELERO_Init+0x78>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	89ba      	ldrh	r2, [r7, #12]
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4798      	blx	r3
  }  

  return ret;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	2000006c 	.word	0x2000006c
 8001cdc:	200003b0 	.word	0x200003b0

08001ce0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	4798      	blx	r3
    }
  }
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200003b0 	.word	0x200003b0

08001d10 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <BSP_GYRO_Init+0x7c>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	4798      	blx	r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b6a      	cmp	r3, #106	; 0x6a
 8001d28:	d002      	beq.n	8001d30 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e028      	b.n	8001d82 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <BSP_GYRO_Init+0x80>)
 8001d32:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <BSP_GYRO_Init+0x7c>)
 8001d34:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8001d3a:	2330      	movs	r3, #48	; 0x30
 8001d3c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8001d4e:	230c      	movs	r3, #12
 8001d50:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8001d52:	7aba      	ldrb	r2, [r7, #10]
 8001d54:	797b      	ldrb	r3, [r7, #5]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001d5c:	7a3b      	ldrb	r3, [r7, #8]
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <BSP_GYRO_Init+0x80>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	89ba      	ldrh	r2, [r7, #12]
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200000a0 	.word	0x200000a0
 8001d90:	200003b4 	.word	0x200003b4

08001d94 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <BSP_GYRO_GetXYZ+0x2c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d009      	beq.n	8001db8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <BSP_GYRO_GetXYZ+0x2c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <BSP_GYRO_GetXYZ+0x2c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
    }
  }
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200003b4 	.word	0x200003b4

08001dc4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <BSP_HSENSOR_Init+0x38>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	20be      	movs	r0, #190	; 0xbe
 8001dd0:	4798      	blx	r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2bbc      	cmp	r3, #188	; 0xbc
 8001dd6:	d002      	beq.n	8001dde <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	e009      	b.n	8001df2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <BSP_HSENSOR_Init+0x3c>)
 8001de0:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <BSP_HSENSOR_Init+0x38>)
 8001de2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <BSP_HSENSOR_Init+0x3c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	20be      	movs	r0, #190	; 0xbe
 8001dec:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001df2:	687b      	ldr	r3, [r7, #4]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000010 	.word	0x20000010
 8001e00:	200003b8 	.word	0x200003b8

08001e04 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <BSP_HSENSOR_ReadHumidity+0x18>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	20be      	movs	r0, #190	; 0xbe
 8001e10:	4798      	blx	r3
 8001e12:	eef0 7a40 	vmov.f32	s15, s0
}
 8001e16:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200003b8 	.word	0x200003b8

08001e20 <BSP_MAGNETO_Init>:

/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	71fb      	strb	r3, [r7, #7]
	MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

	if (Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL) {
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <BSP_MAGNETO_Init+0x50>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4798      	blx	r3
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b3d      	cmp	r3, #61	; 0x3d
 8001e34:	d002      	beq.n	8001e3c <BSP_MAGNETO_Init+0x1c>
		ret = MAGNETO_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	71fb      	strb	r3, [r7, #7]
 8001e3a:	e013      	b.n	8001e64 <BSP_MAGNETO_Init+0x44>
	} else {
		/* Initialize the MAGNETO magnetometer driver structure */
		MagnetoDrv = &Lis3mdlMagDrv;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <BSP_MAGNETO_Init+0x54>)
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <BSP_MAGNETO_Init+0x50>)
 8001e40:	601a      	str	r2, [r3, #0]

		/* MEMS configuration ------------------------------------------------------*/
		/* Fill the MAGNETO magnetometer structure */
		LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE
 8001e42:	2358      	movs	r3, #88	; 0x58
 8001e44:	703b      	strb	r3, [r7, #0]
				| LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
		LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA
 8001e46:	2300      	movs	r3, #0
 8001e48:	707b      	strb	r3, [r7, #1]
				| LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
		LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	70bb      	strb	r3, [r7, #2]
				| LIS3MDL_MAG_CONTINUOUS_MODE;
		LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH
 8001e4e:	2308      	movs	r3, #8
 8001e50:	70fb      	strb	r3, [r7, #3]
				| LIS3MDL_MAG_BLE_LSB;
		LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001e52:	2340      	movs	r3, #64	; 0x40
 8001e54:	713b      	strb	r3, [r7, #4]
		/* Configure the MAGNETO magnetometer main parameters */
		MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <BSP_MAGNETO_Init+0x54>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	463a      	mov	r2, r7
 8001e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e62:	4798      	blx	r3
	}

	return ret;
 8001e64:	79fb      	ldrb	r3, [r7, #7]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000002c 	.word	0x2000002c
 8001e74:	200003bc 	.word	0x200003bc

08001e78 <BSP_MAGNETO_GetXYZ>:
/**
 * @brief  Get XYZ magnetometer values.
 * @param  pDataXYZ Pointer on 3 magnetometer values table with
 *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
 */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if (MagnetoDrv != NULL) {
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d009      	beq.n	8001e9c <BSP_MAGNETO_GetXYZ+0x24>
		if (MagnetoDrv->GetXYZ != NULL) {
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <BSP_MAGNETO_GetXYZ+0x24>
			MagnetoDrv->GetXYZ(pDataXYZ);
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
		}
	}
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200003bc 	.word	0x200003bc

08001ea8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <BSP_PSENSOR_Init+0x38>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	20ba      	movs	r0, #186	; 0xba
 8001eb4:	4798      	blx	r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2bb1      	cmp	r3, #177	; 0xb1
 8001eba:	d002      	beq.n	8001ec2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	e009      	b.n	8001ed6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <BSP_PSENSOR_Init+0x3c>)
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <BSP_PSENSOR_Init+0x38>)
 8001ec6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <BSP_PSENSOR_Init+0x3c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	20ba      	movs	r0, #186	; 0xba
 8001ed0:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001ed6:	687b      	ldr	r3, [r7, #4]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000060 	.word	0x20000060
 8001ee4:	200003c0 	.word	0x200003c0

08001ee8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <BSP_PSENSOR_ReadPressure+0x18>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	20ba      	movs	r0, #186	; 0xba
 8001ef4:	4798      	blx	r3
 8001ef6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001efa:	eeb0 0a67 	vmov.f32	s0, s15
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200003c0 	.word	0x200003c0

08001f04 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <BSP_TSENSOR_Init+0x30>)
 8001f10:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <BSP_TSENSOR_Init+0x34>)
 8001f12:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001f14:	f7ff fe46 	bl	8001ba4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <BSP_TSENSOR_Init+0x30>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2100      	movs	r1, #0
 8001f20:	20be      	movs	r0, #190	; 0xbe
 8001f22:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001f28:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200003c4 	.word	0x200003c4
 8001f38:	2000001c 	.word	0x2000001c

08001f3c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <BSP_TSENSOR_ReadTemp+0x18>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	20be      	movs	r0, #190	; 0xbe
 8001f48:	4798      	blx	r3
 8001f4a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200003c4 	.word	0x200003c4

08001f58 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2120      	movs	r1, #32
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fe3f 	bl	8001bec <SENSOR_IO_Read>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	f023 0303 	bic.w	r3, r3, #3
 8001f88:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f98:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fe08 	bl	8001bb8 <SENSOR_IO_Write>
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001fbe:	f7ff fdf1 	bl	8001ba4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fe0f 	bl	8001bec <SENSOR_IO_Read>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	b2d8      	uxtb	r0, r3
 8001fea:	f107 020c 	add.w	r2, r7, #12
 8001fee:	2302      	movs	r3, #2
 8001ff0:	21b0      	movs	r1, #176	; 0xb0
 8001ff2:	f7ff fe19 	bl	8001c28 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001ff6:	7b3b      	ldrb	r3, [r7, #12]
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001ffe:	7b7b      	ldrb	r3, [r7, #13]
 8002000:	085b      	lsrs	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	b2d8      	uxtb	r0, r3
 800200a:	f107 020c 	add.w	r2, r7, #12
 800200e:	2302      	movs	r3, #2
 8002010:	21b6      	movs	r1, #182	; 0xb6
 8002012:	f7ff fe09 	bl	8001c28 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002016:	7b7b      	ldrb	r3, [r7, #13]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	b21a      	sxth	r2, r3
 800201c:	7b3b      	ldrb	r3, [r7, #12]
 800201e:	b21b      	sxth	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	b2d8      	uxtb	r0, r3
 8002028:	f107 020c 	add.w	r2, r7, #12
 800202c:	2302      	movs	r3, #2
 800202e:	21ba      	movs	r1, #186	; 0xba
 8002030:	f7ff fdfa 	bl	8001c28 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002034:	7b7b      	ldrb	r3, [r7, #13]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	b21a      	sxth	r2, r3
 800203a:	7b3b      	ldrb	r3, [r7, #12]
 800203c:	b21b      	sxth	r3, r3
 800203e:	4313      	orrs	r3, r2
 8002040:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	b2d8      	uxtb	r0, r3
 8002046:	f107 020c 	add.w	r2, r7, #12
 800204a:	2302      	movs	r3, #2
 800204c:	21a8      	movs	r1, #168	; 0xa8
 800204e:	f7ff fdeb 	bl	8001c28 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002052:	7b7b      	ldrb	r3, [r7, #13]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b21a      	sxth	r2, r3
 8002058:	7b3b      	ldrb	r3, [r7, #12]
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002060:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002064:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002072:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002076:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002084:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002088:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800208c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800209e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ae:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80020b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020be:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80020c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020c6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800210c <HTS221_H_ReadHumidity+0x130>
 80020ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	dd01      	ble.n	80020d8 <HTS221_H_ReadHumidity+0xfc>
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HTS221_H_ReadHumidity+0x134>)
 80020d6:	e00a      	b.n	80020ee <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80020d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80020dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	d502      	bpl.n	80020ec <HTS221_H_ReadHumidity+0x110>
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	e000      	b.n	80020ee <HTS221_H_ReadHumidity+0x112>
 80020ec:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80020ee:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80020f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80020f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020fc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002100:	eeb0 0a67 	vmov.f32	s0, s15
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	447a0000 	.word	0x447a0000
 8002110:	447a0000 	.word	0x447a0000

08002114 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2120      	movs	r1, #32
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fd60 	bl	8001bec <SENSOR_IO_Read>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	f023 0304 	bic.w	r3, r3, #4
 8002136:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002156:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	2120      	movs	r1, #32
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fd29 	bl	8001bb8 <SENSOR_IO_Write>
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b088      	sub	sp, #32
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	b2d8      	uxtb	r0, r3
 800217c:	f107 0208 	add.w	r2, r7, #8
 8002180:	2302      	movs	r3, #2
 8002182:	21b2      	movs	r1, #178	; 0xb2
 8002184:	f7ff fd50 	bl	8001c28 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2135      	movs	r1, #53	; 0x35
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fd2c 	bl	8001bec <SENSOR_IO_Read>
 8002194:	4603      	mov	r3, r0
 8002196:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002198:	7ffb      	ldrb	r3, [r7, #31]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21b      	sxth	r3, r3
 800219e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	7a3b      	ldrb	r3, [r7, #8]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80021ac:	7ffb      	ldrb	r3, [r7, #31]
 80021ae:	019b      	lsls	r3, r3, #6
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	7a7b      	ldrb	r3, [r7, #9]
 80021ba:	b21b      	sxth	r3, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80021c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c4:	10db      	asrs	r3, r3, #3
 80021c6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80021c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80021cc:	10db      	asrs	r3, r3, #3
 80021ce:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	b2d8      	uxtb	r0, r3
 80021d4:	f107 0208 	add.w	r2, r7, #8
 80021d8:	2304      	movs	r3, #4
 80021da:	21bc      	movs	r1, #188	; 0xbc
 80021dc:	f7ff fd24 	bl	8001c28 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80021e0:	7a7b      	ldrb	r3, [r7, #9]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	b21a      	sxth	r2, r3
 80021e6:	7a3b      	ldrb	r3, [r7, #8]
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80021ee:	7afb      	ldrb	r3, [r7, #11]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	7abb      	ldrb	r3, [r7, #10]
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	4313      	orrs	r3, r2
 80021fa:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	b2d8      	uxtb	r0, r3
 8002200:	f107 0208 	add.w	r2, r7, #8
 8002204:	2302      	movs	r3, #2
 8002206:	21aa      	movs	r1, #170	; 0xaa
 8002208:	f7ff fd0e 	bl	8001c28 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800220c:	7a7b      	ldrb	r3, [r7, #9]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	b21a      	sxth	r2, r3
 8002212:	7a3b      	ldrb	r3, [r7, #8]
 8002214:	b21b      	sxth	r3, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800221a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800221e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002230:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002242:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002246:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	ee07 3a90 	vmov	s15, r3
 8002250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002258:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800225c:	ee07 3a90 	vmov	s15, r3
 8002260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002268:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	ee07 3a90 	vmov	s15, r3
}
 8002272:	eeb0 0a67 	vmov.f32	s0, s15
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	463b      	mov	r3, r7
 8002284:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002288:	783b      	ldrb	r3, [r7, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	2120      	movs	r1, #32
 800228e:	203c      	movs	r0, #60	; 0x3c
 8002290:	f7ff fc92 	bl	8001bb8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002294:	787b      	ldrb	r3, [r7, #1]
 8002296:	461a      	mov	r2, r3
 8002298:	2121      	movs	r1, #33	; 0x21
 800229a:	203c      	movs	r0, #60	; 0x3c
 800229c:	f7ff fc8c 	bl	8001bb8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80022a0:	78bb      	ldrb	r3, [r7, #2]
 80022a2:	461a      	mov	r2, r3
 80022a4:	2122      	movs	r1, #34	; 0x22
 80022a6:	203c      	movs	r0, #60	; 0x3c
 80022a8:	f7ff fc86 	bl	8001bb8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	461a      	mov	r2, r3
 80022b0:	2123      	movs	r1, #35	; 0x23
 80022b2:	203c      	movs	r0, #60	; 0x3c
 80022b4:	f7ff fc80 	bl	8001bb8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80022b8:	793b      	ldrb	r3, [r7, #4]
 80022ba:	461a      	mov	r2, r3
 80022bc:	2124      	movs	r1, #36	; 0x24
 80022be:	203c      	movs	r0, #60	; 0x3c
 80022c0:	f7ff fc7a 	bl	8001bb8 <SENSOR_IO_Write>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80022d2:	2300      	movs	r3, #0
 80022d4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80022d6:	2122      	movs	r1, #34	; 0x22
 80022d8:	203c      	movs	r0, #60	; 0x3c
 80022da:	f7ff fc87 	bl	8001bec <SENSOR_IO_Read>
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f023 0303 	bic.w	r3, r3, #3
 80022e8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f043 0303 	orr.w	r3, r3, #3
 80022f0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	461a      	mov	r2, r3
 80022f6:	2122      	movs	r1, #34	; 0x22
 80022f8:	203c      	movs	r0, #60	; 0x3c
 80022fa:	f7ff fc5d 	bl	8001bb8 <SENSOR_IO_Write>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800230a:	f7ff fc4b 	bl	8001ba4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800230e:	210f      	movs	r1, #15
 8002310:	203c      	movs	r0, #60	; 0x3c
 8002312:	f7ff fc6b 	bl	8001bec <SENSOR_IO_Read>
 8002316:	4603      	mov	r3, r0
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}

0800231c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800232a:	2122      	movs	r1, #34	; 0x22
 800232c:	203c      	movs	r0, #60	; 0x3c
 800232e:	f7ff fc5d 	bl	8001bec <SENSOR_IO_Read>
 8002332:	4603      	mov	r3, r0
 8002334:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	f023 0320 	bic.w	r3, r3, #32
 800233c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	461a      	mov	r2, r3
 8002350:	2122      	movs	r1, #34	; 0x22
 8002352:	203c      	movs	r0, #60	; 0x3c
 8002354:	f7ff fc30 	bl	8001bb8 <SENSOR_IO_Write>
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002376:	2121      	movs	r1, #33	; 0x21
 8002378:	203c      	movs	r0, #60	; 0x3c
 800237a:	f7ff fc37 	bl	8001bec <SENSOR_IO_Read>
 800237e:	4603      	mov	r3, r0
 8002380:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002382:	f107 0208 	add.w	r2, r7, #8
 8002386:	2306      	movs	r3, #6
 8002388:	21a8      	movs	r1, #168	; 0xa8
 800238a:	203c      	movs	r0, #60	; 0x3c
 800238c:	f7ff fc4c 	bl	8001c28 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002390:	2300      	movs	r3, #0
 8002392:	77fb      	strb	r3, [r7, #31]
 8002394:	e01c      	b.n	80023d0 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002396:	7ffb      	ldrb	r3, [r7, #31]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	3301      	adds	r3, #1
 800239c:	3320      	adds	r3, #32
 800239e:	443b      	add	r3, r7
 80023a0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	7ffb      	ldrb	r3, [r7, #31]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	3320      	adds	r3, #32
 80023b0:	443b      	add	r3, r7
 80023b2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	7ffb      	ldrb	r3, [r7, #31]
 80023be:	b212      	sxth	r2, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	3320      	adds	r3, #32
 80023c4:	443b      	add	r3, r7
 80023c6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80023ca:	7ffb      	ldrb	r3, [r7, #31]
 80023cc:	3301      	adds	r3, #1
 80023ce:	77fb      	strb	r3, [r7, #31]
 80023d0:	7ffb      	ldrb	r3, [r7, #31]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d9df      	bls.n	8002396 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80023dc:	2b60      	cmp	r3, #96	; 0x60
 80023de:	d013      	beq.n	8002408 <LIS3MDL_MagReadXYZ+0xa8>
 80023e0:	2b60      	cmp	r3, #96	; 0x60
 80023e2:	dc14      	bgt.n	800240e <LIS3MDL_MagReadXYZ+0xae>
 80023e4:	2b40      	cmp	r3, #64	; 0x40
 80023e6:	d00c      	beq.n	8002402 <LIS3MDL_MagReadXYZ+0xa2>
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	dc10      	bgt.n	800240e <LIS3MDL_MagReadXYZ+0xae>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <LIS3MDL_MagReadXYZ+0x96>
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d003      	beq.n	80023fc <LIS3MDL_MagReadXYZ+0x9c>
 80023f4:	e00b      	b.n	800240e <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <LIS3MDL_MagReadXYZ+0xfc>)
 80023f8:	61bb      	str	r3, [r7, #24]
    break;
 80023fa:	e008      	b.n	800240e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <LIS3MDL_MagReadXYZ+0x100>)
 80023fe:	61bb      	str	r3, [r7, #24]
    break;
 8002400:	e005      	b.n	800240e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <LIS3MDL_MagReadXYZ+0x104>)
 8002404:	61bb      	str	r3, [r7, #24]
    break;
 8002406:	e002      	b.n	800240e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002408:	4b17      	ldr	r3, [pc, #92]	; (8002468 <LIS3MDL_MagReadXYZ+0x108>)
 800240a:	61bb      	str	r3, [r7, #24]
    break;    
 800240c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800240e:	2300      	movs	r3, #0
 8002410:	77fb      	strb	r3, [r7, #31]
 8002412:	e01a      	b.n	800244a <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002414:	7ffb      	ldrb	r3, [r7, #31]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	3320      	adds	r3, #32
 800241a:	443b      	add	r3, r7
 800241c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002428:	edd7 7a06 	vldr	s15, [r7, #24]
 800242c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002430:	7ffb      	ldrb	r3, [r7, #31]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800243c:	ee17 2a90 	vmov	r2, s15
 8002440:	b212      	sxth	r2, r2
 8002442:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002444:	7ffb      	ldrb	r3, [r7, #31]
 8002446:	3301      	adds	r3, #1
 8002448:	77fb      	strb	r3, [r7, #31]
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d9e1      	bls.n	8002414 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	3e0f5c29 	.word	0x3e0f5c29
 8002460:	3e947ae1 	.word	0x3e947ae1
 8002464:	3edc28f6 	.word	0x3edc28f6
 8002468:	3f147ae1 	.word	0x3f147ae1

0800246c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f879 	bl	8002570 <LPS22HB_Init>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002494:	f7ff fb86 	bl	8001ba4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	210f      	movs	r1, #15
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fba4 	bl	8001bec <SENSOR_IO_Read>
 80024a4:	4603      	mov	r3, r0
 80024a6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	74fb      	strb	r3, [r7, #19]
 80024c6:	e013      	b.n	80024f0 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	3328      	adds	r3, #40	; 0x28
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	7cfc      	ldrb	r4, [r7, #19]
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f7ff fb88 	bl	8001bec <SENSOR_IO_Read>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	f104 0318 	add.w	r3, r4, #24
 80024e4:	443b      	add	r3, r7
 80024e6:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	3301      	adds	r3, #1
 80024ee:	74fb      	strb	r3, [r7, #19]
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d9e8      	bls.n	80024c8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	74fb      	strb	r3, [r7, #19]
 80024fa:	e00f      	b.n	800251c <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	3318      	adds	r3, #24
 8002500:	443b      	add	r3, r7
 8002502:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002506:	461a      	mov	r2, r3
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	3301      	adds	r3, #1
 800251a:	74fb      	strb	r3, [r7, #19]
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d9ec      	bls.n	80024fc <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002532:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2264      	movs	r2, #100	; 0x64
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	da01      	bge.n	8002548 <LPS22HB_P_ReadPressure+0x94>
 8002544:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002548:	131b      	asrs	r3, r3, #12
 800254a:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002556:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800256c <LPS22HB_P_ReadPressure+0xb8>
 800255a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800255e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002562:	eeb0 0a67 	vmov.f32	s0, s15
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	bd90      	pop	{r4, r7, pc}
 800256c:	42c80000 	.word	0x42c80000

08002570 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	211a      	movs	r1, #26
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fb33 	bl	8001bec <SENSOR_IO_Read>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	211a      	movs	r1, #26
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb08 	bl	8001bb8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2110      	movs	r1, #16
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fb1c 	bl	8001bec <SENSOR_IO_Read>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80025c6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	f023 0302 	bic.w	r3, r3, #2
 80025ce:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	2110      	movs	r1, #16
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fae9 	bl	8001bb8 <SENSOR_IO_Write>
}  
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80025fc:	2110      	movs	r1, #16
 80025fe:	20d4      	movs	r0, #212	; 0xd4
 8002600:	f7ff faf4 	bl	8001bec <SENSOR_IO_Read>
 8002604:	4603      	mov	r3, r0
 8002606:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002614:	7bba      	ldrb	r2, [r7, #14]
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	4313      	orrs	r3, r2
 800261a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800261c:	7bbb      	ldrb	r3, [r7, #14]
 800261e:	461a      	mov	r2, r3
 8002620:	2110      	movs	r1, #16
 8002622:	20d4      	movs	r0, #212	; 0xd4
 8002624:	f7ff fac8 	bl	8001bb8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002628:	2112      	movs	r1, #18
 800262a:	20d4      	movs	r0, #212	; 0xd4
 800262c:	f7ff fade 	bl	8001bec <SENSOR_IO_Read>
 8002630:	4603      	mov	r3, r0
 8002632:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	b29b      	uxth	r3, r3
 800263a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002642:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002644:	7bba      	ldrb	r2, [r7, #14]
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	4313      	orrs	r3, r2
 800264a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	461a      	mov	r2, r3
 8002650:	2112      	movs	r1, #18
 8002652:	20d4      	movs	r0, #212	; 0xd4
 8002654:	f7ff fab0 	bl	8001bb8 <SENSOR_IO_Write>
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002666:	2300      	movs	r3, #0
 8002668:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800266a:	2110      	movs	r1, #16
 800266c:	20d4      	movs	r0, #212	; 0xd4
 800266e:	f7ff fabd 	bl	8001bec <SENSOR_IO_Read>
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	461a      	mov	r2, r3
 8002682:	2110      	movs	r1, #16
 8002684:	20d4      	movs	r0, #212	; 0xd4
 8002686:	f7ff fa97 	bl	8001bb8 <SENSOR_IO_Write>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002692:	b580      	push	{r7, lr}
 8002694:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002696:	f7ff fa85 	bl	8001ba4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800269a:	210f      	movs	r1, #15
 800269c:	20d4      	movs	r0, #212	; 0xd4
 800269e:	f7ff faa5 	bl	8001bec <SENSOR_IO_Read>
 80026a2:	4603      	mov	r3, r0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80026b6:	2115      	movs	r1, #21
 80026b8:	20d4      	movs	r0, #212	; 0xd4
 80026ba:	f7ff fa97 	bl	8001bec <SENSOR_IO_Read>
 80026be:	4603      	mov	r3, r0
 80026c0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	f023 0310 	bic.w	r3, r3, #16
 80026c8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	f043 0310 	orr.w	r3, r3, #16
 80026d6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	461a      	mov	r2, r3
 80026dc:	2115      	movs	r1, #21
 80026de:	20d4      	movs	r0, #212	; 0xd4
 80026e0:	f7ff fa6a 	bl	8001bb8 <SENSOR_IO_Write>
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002702:	2110      	movs	r1, #16
 8002704:	20d4      	movs	r0, #212	; 0xd4
 8002706:	f7ff fa71 	bl	8001bec <SENSOR_IO_Read>
 800270a:	4603      	mov	r3, r0
 800270c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800270e:	f107 0208 	add.w	r2, r7, #8
 8002712:	2306      	movs	r3, #6
 8002714:	2128      	movs	r1, #40	; 0x28
 8002716:	20d4      	movs	r0, #212	; 0xd4
 8002718:	f7ff fa86 	bl	8001c28 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
 8002720:	e01c      	b.n	800275c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002722:	7ffb      	ldrb	r3, [r7, #31]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	3301      	adds	r3, #1
 8002728:	3320      	adds	r3, #32
 800272a:	443b      	add	r3, r7
 800272c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002730:	b29b      	uxth	r3, r3
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	b29a      	uxth	r2, r3
 8002736:	7ffb      	ldrb	r3, [r7, #31]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	3320      	adds	r3, #32
 800273c:	443b      	add	r3, r7
 800273e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002742:	b29b      	uxth	r3, r3
 8002744:	4413      	add	r3, r2
 8002746:	b29a      	uxth	r2, r3
 8002748:	7ffb      	ldrb	r3, [r7, #31]
 800274a:	b212      	sxth	r2, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	3320      	adds	r3, #32
 8002750:	443b      	add	r3, r7
 8002752:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002756:	7ffb      	ldrb	r3, [r7, #31]
 8002758:	3301      	adds	r3, #1
 800275a:	77fb      	strb	r3, [r7, #31]
 800275c:	7ffb      	ldrb	r3, [r7, #31]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d9df      	bls.n	8002722 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002762:	7dfb      	ldrb	r3, [r7, #23]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d829      	bhi.n	80027c0 <LSM6DSL_AccReadXYZ+0xd4>
 800276c:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <LSM6DSL_AccReadXYZ+0x88>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	080027a9 	.word	0x080027a9
 8002778:	080027c1 	.word	0x080027c1
 800277c:	080027c1 	.word	0x080027c1
 8002780:	080027c1 	.word	0x080027c1
 8002784:	080027bb 	.word	0x080027bb
 8002788:	080027c1 	.word	0x080027c1
 800278c:	080027c1 	.word	0x080027c1
 8002790:	080027c1 	.word	0x080027c1
 8002794:	080027af 	.word	0x080027af
 8002798:	080027c1 	.word	0x080027c1
 800279c:	080027c1 	.word	0x080027c1
 80027a0:	080027c1 	.word	0x080027c1
 80027a4:	080027b5 	.word	0x080027b5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <LSM6DSL_AccReadXYZ+0x120>)
 80027aa:	61bb      	str	r3, [r7, #24]
    break;
 80027ac:	e008      	b.n	80027c0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <LSM6DSL_AccReadXYZ+0x124>)
 80027b0:	61bb      	str	r3, [r7, #24]
    break;
 80027b2:	e005      	b.n	80027c0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <LSM6DSL_AccReadXYZ+0x128>)
 80027b6:	61bb      	str	r3, [r7, #24]
    break;
 80027b8:	e002      	b.n	80027c0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <LSM6DSL_AccReadXYZ+0x12c>)
 80027bc:	61bb      	str	r3, [r7, #24]
    break;    
 80027be:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
 80027c4:	e01a      	b.n	80027fc <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80027c6:	7ffb      	ldrb	r3, [r7, #31]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	3320      	adds	r3, #32
 80027cc:	443b      	add	r3, r7
 80027ce:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027da:	edd7 7a06 	vldr	s15, [r7, #24]
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ee:	ee17 2a90 	vmov	r2, s15
 80027f2:	b212      	sxth	r2, r2
 80027f4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80027f6:	7ffb      	ldrb	r3, [r7, #31]
 80027f8:	3301      	adds	r3, #1
 80027fa:	77fb      	strb	r3, [r7, #31]
 80027fc:	7ffb      	ldrb	r3, [r7, #31]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d9e1      	bls.n	80027c6 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	3d79db23 	.word	0x3d79db23
 8002810:	3df9db23 	.word	0x3df9db23
 8002814:	3e79db23 	.word	0x3e79db23
 8002818:	3ef9db23 	.word	0x3ef9db23

0800281c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800282a:	2111      	movs	r1, #17
 800282c:	20d4      	movs	r0, #212	; 0xd4
 800282e:	f7ff f9dd 	bl	8001bec <SENSOR_IO_Read>
 8002832:	4603      	mov	r3, r0
 8002834:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800283a:	7bbb      	ldrb	r3, [r7, #14]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002842:	7bba      	ldrb	r2, [r7, #14]
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	4313      	orrs	r3, r2
 8002848:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800284a:	7bbb      	ldrb	r3, [r7, #14]
 800284c:	461a      	mov	r2, r3
 800284e:	2111      	movs	r1, #17
 8002850:	20d4      	movs	r0, #212	; 0xd4
 8002852:	f7ff f9b1 	bl	8001bb8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002856:	2112      	movs	r1, #18
 8002858:	20d4      	movs	r0, #212	; 0xd4
 800285a:	f7ff f9c7 	bl	8001bec <SENSOR_IO_Read>
 800285e:	4603      	mov	r3, r0
 8002860:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	b29b      	uxth	r3, r3
 8002868:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800286a:	7bbb      	ldrb	r3, [r7, #14]
 800286c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002870:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002872:	7bba      	ldrb	r2, [r7, #14]
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	4313      	orrs	r3, r2
 8002878:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800287a:	7bbb      	ldrb	r3, [r7, #14]
 800287c:	461a      	mov	r2, r3
 800287e:	2112      	movs	r1, #18
 8002880:	20d4      	movs	r0, #212	; 0xd4
 8002882:	f7ff f999 	bl	8001bb8 <SENSOR_IO_Write>
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002894:	2300      	movs	r3, #0
 8002896:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002898:	2111      	movs	r1, #17
 800289a:	20d4      	movs	r0, #212	; 0xd4
 800289c:	f7ff f9a6 	bl	8001bec <SENSOR_IO_Read>
 80028a0:	4603      	mov	r3, r0
 80028a2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	461a      	mov	r2, r3
 80028b0:	2111      	movs	r1, #17
 80028b2:	20d4      	movs	r0, #212	; 0xd4
 80028b4:	f7ff f980 	bl	8001bb8 <SENSOR_IO_Write>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80028c4:	f7ff f96e 	bl	8001ba4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80028c8:	210f      	movs	r1, #15
 80028ca:	20d4      	movs	r0, #212	; 0xd4
 80028cc:	f7ff f98e 	bl	8001bec <SENSOR_IO_Read>
 80028d0:	4603      	mov	r3, r0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80028e4:	2116      	movs	r1, #22
 80028e6:	20d4      	movs	r0, #212	; 0xd4
 80028e8:	f7ff f980 	bl	8001bec <SENSOR_IO_Read>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028f6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002904:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	461a      	mov	r2, r3
 800290a:	2116      	movs	r1, #22
 800290c:	20d4      	movs	r0, #212	; 0xd4
 800290e:	f7ff f953 	bl	8001bb8 <SENSOR_IO_Write>
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002924:	2300      	movs	r3, #0
 8002926:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002932:	2111      	movs	r1, #17
 8002934:	20d4      	movs	r0, #212	; 0xd4
 8002936:	f7ff f959 	bl	8001bec <SENSOR_IO_Read>
 800293a:	4603      	mov	r3, r0
 800293c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800293e:	f107 0208 	add.w	r2, r7, #8
 8002942:	2306      	movs	r3, #6
 8002944:	2122      	movs	r1, #34	; 0x22
 8002946:	20d4      	movs	r0, #212	; 0xd4
 8002948:	f7ff f96e 	bl	8001c28 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800294c:	2300      	movs	r3, #0
 800294e:	77fb      	strb	r3, [r7, #31]
 8002950:	e01c      	b.n	800298c <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002952:	7ffb      	ldrb	r3, [r7, #31]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	3301      	adds	r3, #1
 8002958:	3320      	adds	r3, #32
 800295a:	443b      	add	r3, r7
 800295c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002960:	b29b      	uxth	r3, r3
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	b29a      	uxth	r2, r3
 8002966:	7ffb      	ldrb	r3, [r7, #31]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	3320      	adds	r3, #32
 800296c:	443b      	add	r3, r7
 800296e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002972:	b29b      	uxth	r3, r3
 8002974:	4413      	add	r3, r2
 8002976:	b29a      	uxth	r2, r3
 8002978:	7ffb      	ldrb	r3, [r7, #31]
 800297a:	b212      	sxth	r2, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	3320      	adds	r3, #32
 8002980:	443b      	add	r3, r7
 8002982:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002986:	7ffb      	ldrb	r3, [r7, #31]
 8002988:	3301      	adds	r3, #1
 800298a:	77fb      	strb	r3, [r7, #31]
 800298c:	7ffb      	ldrb	r3, [r7, #31]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d9df      	bls.n	8002952 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d829      	bhi.n	80029f0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029d9 	.word	0x080029d9
 80029a8:	080029f1 	.word	0x080029f1
 80029ac:	080029f1 	.word	0x080029f1
 80029b0:	080029f1 	.word	0x080029f1
 80029b4:	080029df 	.word	0x080029df
 80029b8:	080029f1 	.word	0x080029f1
 80029bc:	080029f1 	.word	0x080029f1
 80029c0:	080029f1 	.word	0x080029f1
 80029c4:	080029e5 	.word	0x080029e5
 80029c8:	080029f1 	.word	0x080029f1
 80029cc:	080029f1 	.word	0x080029f1
 80029d0:	080029f1 	.word	0x080029f1
 80029d4:	080029eb 	.word	0x080029eb
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80029da:	61bb      	str	r3, [r7, #24]
    break;
 80029dc:	e008      	b.n	80029f0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80029e0:	61bb      	str	r3, [r7, #24]
    break;
 80029e2:	e005      	b.n	80029f0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80029e6:	61bb      	str	r3, [r7, #24]
    break;
 80029e8:	e002      	b.n	80029f0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80029ec:	61bb      	str	r3, [r7, #24]
    break;    
 80029ee:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	77fb      	strb	r3, [r7, #31]
 80029f4:	e016      	b.n	8002a24 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80029f6:	7ffb      	ldrb	r3, [r7, #31]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	3320      	adds	r3, #32
 80029fc:	443b      	add	r3, r7
 80029fe:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a0a:	7ffb      	ldrb	r3, [r7, #31]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
 8002a20:	3301      	adds	r3, #1
 8002a22:	77fb      	strb	r3, [r7, #31]
 8002a24:	7ffb      	ldrb	r3, [r7, #31]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d9e5      	bls.n	80029f6 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	3720      	adds	r7, #32
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	410c0000 	.word	0x410c0000
 8002a38:	418c0000 	.word	0x418c0000
 8002a3c:	420c0000 	.word	0x420c0000
 8002a40:	428c0000 	.word	0x428c0000

08002a44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a4e:	2003      	movs	r0, #3
 8002a50:	f000 f938 	bl	8002cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a54:	2000      	movs	r0, #0
 8002a56:	f000 f80d 	bl	8002a74 <HAL_InitTick>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	71fb      	strb	r3, [r7, #7]
 8002a64:	e001      	b.n	8002a6a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a66:	f7fe fd61 	bl	800152c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <HAL_InitTick+0x68>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d022      	beq.n	8002ace <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_InitTick+0x6c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_InitTick+0x68>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f946 	bl	8002d2e <HAL_SYSTICK_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b0f      	cmp	r3, #15
 8002aac:	d809      	bhi.n	8002ac2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab6:	f000 f910 	bl	8002cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_InitTick+0x70>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	e007      	b.n	8002ad2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e004      	b.n	8002ad2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e001      	b.n	8002ad2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200000d8 	.word	0x200000d8
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	200000d4 	.word	0x200000d4

08002ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_IncTick+0x1c>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_IncTick+0x20>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4413      	add	r3, r2
 8002af6:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <HAL_IncTick+0x1c>)
 8002af8:	6013      	str	r3, [r2, #0]
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	200003c8 	.word	0x200003c8
 8002b08:	200000d8 	.word	0x200000d8

08002b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_GetTick+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	200003c8 	.word	0x200003c8

08002b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	db0a      	blt.n	8002bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	490c      	ldr	r1, [pc, #48]	; (8002c10 <__NVIC_SetPriority+0x4c>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bec:	e00a      	b.n	8002c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <__NVIC_SetPriority+0x50>)
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	0112      	lsls	r2, r2, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	761a      	strb	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf28      	it	cs
 8002c36:	2304      	movcs	r3, #4
 8002c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <NVIC_EncodePriority+0x30>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3b03      	subs	r3, #3
 8002c46:	e000      	b.n	8002c4a <NVIC_EncodePriority+0x32>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43d9      	mvns	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	4313      	orrs	r3, r2
         );
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c90:	d301      	bcc.n	8002c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00f      	b.n	8002cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <SysTick_Config+0x40>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9e:	210f      	movs	r1, #15
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f7ff ff8e 	bl	8002bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <SysTick_Config+0x40>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <SysTick_Config+0x40>)
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	e000e010 	.word	0xe000e010

08002cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff29 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cec:	f7ff ff3e 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	6978      	ldr	r0, [r7, #20]
 8002cf8:	f7ff ff8e 	bl	8002c18 <NVIC_EncodePriority>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff5d 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff31 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ffa2 	bl	8002c80 <SysTick_Config>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d56:	e17f      	b.n	8003058 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8171 	beq.w	8003052 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d00b      	beq.n	8002d90 <HAL_GPIO_Init+0x48>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d007      	beq.n	8002d90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d84:	2b11      	cmp	r3, #17
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b12      	cmp	r3, #18
 8002d8e:	d130      	bne.n	8002df2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 0201 	and.w	r2, r3, #1
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d118      	bne.n	8002e30 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e04:	2201      	movs	r2, #1
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	f003 0201 	and.w	r2, r3, #1
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x128>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b12      	cmp	r3, #18
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	6939      	ldr	r1, [r7, #16]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80ac 	beq.w	8003052 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efe:	4a5e      	ldr	r2, [pc, #376]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6613      	str	r3, [r2, #96]	; 0x60
 8002f06:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f12:	4a5a      	ldr	r2, [pc, #360]	; (800307c <HAL_GPIO_Init+0x334>)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f3c:	d025      	beq.n	8002f8a <HAL_GPIO_Init+0x242>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4f      	ldr	r2, [pc, #316]	; (8003080 <HAL_GPIO_Init+0x338>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <HAL_GPIO_Init+0x23e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <HAL_GPIO_Init+0x33c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d019      	beq.n	8002f82 <HAL_GPIO_Init+0x23a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4d      	ldr	r2, [pc, #308]	; (8003088 <HAL_GPIO_Init+0x340>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_GPIO_Init+0x236>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4c      	ldr	r2, [pc, #304]	; (800308c <HAL_GPIO_Init+0x344>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00d      	beq.n	8002f7a <HAL_GPIO_Init+0x232>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4b      	ldr	r2, [pc, #300]	; (8003090 <HAL_GPIO_Init+0x348>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <HAL_GPIO_Init+0x22e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <HAL_GPIO_Init+0x34c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_GPIO_Init+0x22a>
 8002f6e:	2306      	movs	r3, #6
 8002f70:	e00c      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f72:	2307      	movs	r3, #7
 8002f74:	e00a      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f76:	2305      	movs	r3, #5
 8002f78:	e008      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e004      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	f002 0203 	and.w	r2, r2, #3
 8002f92:	0092      	lsls	r2, r2, #2
 8002f94:	4093      	lsls	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f9c:	4937      	ldr	r1, [pc, #220]	; (800307c <HAL_GPIO_Init+0x334>)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fce:	4a32      	ldr	r2, [pc, #200]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ff8:	4a27      	ldr	r2, [pc, #156]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <HAL_GPIO_Init+0x350>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003022:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <HAL_GPIO_Init+0x350>)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_GPIO_Init+0x350>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <HAL_GPIO_Init+0x350>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3301      	adds	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	f47f ae78 	bne.w	8002d58 <HAL_GPIO_Init+0x10>
  }
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	40010000 	.word	0x40010000
 8003080:	48000400 	.word	0x48000400
 8003084:	48000800 	.word	0x48000800
 8003088:	48000c00 	.word	0x48000c00
 800308c:	48001000 	.word	0x48001000
 8003090:	48001400 	.word	0x48001400
 8003094:	48001800 	.word	0x48001800
 8003098:	40010400 	.word	0x40010400

0800309c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80030aa:	e0cd      	b.n	8003248 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80030ac:	2201      	movs	r2, #1
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80c0 	beq.w	8003242 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80030c2:	4a68      	ldr	r2, [pc, #416]	; (8003264 <HAL_GPIO_DeInit+0x1c8>)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	220f      	movs	r2, #15
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030ea:	d025      	beq.n	8003138 <HAL_GPIO_DeInit+0x9c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a5e      	ldr	r2, [pc, #376]	; (8003268 <HAL_GPIO_DeInit+0x1cc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d01f      	beq.n	8003134 <HAL_GPIO_DeInit+0x98>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a5d      	ldr	r2, [pc, #372]	; (800326c <HAL_GPIO_DeInit+0x1d0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d019      	beq.n	8003130 <HAL_GPIO_DeInit+0x94>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a5c      	ldr	r2, [pc, #368]	; (8003270 <HAL_GPIO_DeInit+0x1d4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d013      	beq.n	800312c <HAL_GPIO_DeInit+0x90>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a5b      	ldr	r2, [pc, #364]	; (8003274 <HAL_GPIO_DeInit+0x1d8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00d      	beq.n	8003128 <HAL_GPIO_DeInit+0x8c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a5a      	ldr	r2, [pc, #360]	; (8003278 <HAL_GPIO_DeInit+0x1dc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <HAL_GPIO_DeInit+0x88>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a59      	ldr	r2, [pc, #356]	; (800327c <HAL_GPIO_DeInit+0x1e0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_GPIO_DeInit+0x84>
 800311c:	2306      	movs	r3, #6
 800311e:	e00c      	b.n	800313a <HAL_GPIO_DeInit+0x9e>
 8003120:	2307      	movs	r3, #7
 8003122:	e00a      	b.n	800313a <HAL_GPIO_DeInit+0x9e>
 8003124:	2305      	movs	r3, #5
 8003126:	e008      	b.n	800313a <HAL_GPIO_DeInit+0x9e>
 8003128:	2304      	movs	r3, #4
 800312a:	e006      	b.n	800313a <HAL_GPIO_DeInit+0x9e>
 800312c:	2303      	movs	r3, #3
 800312e:	e004      	b.n	800313a <HAL_GPIO_DeInit+0x9e>
 8003130:	2302      	movs	r3, #2
 8003132:	e002      	b.n	800313a <HAL_GPIO_DeInit+0x9e>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <HAL_GPIO_DeInit+0x9e>
 8003138:	2300      	movs	r3, #0
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	f002 0203 	and.w	r2, r2, #3
 8003140:	0092      	lsls	r2, r2, #2
 8003142:	4093      	lsls	r3, r2
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	429a      	cmp	r2, r3
 8003148:	d132      	bne.n	80031b0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800314a:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_GPIO_DeInit+0x1e4>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	494b      	ldr	r1, [pc, #300]	; (8003280 <HAL_GPIO_DeInit+0x1e4>)
 8003154:	4013      	ands	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003158:	4b49      	ldr	r3, [pc, #292]	; (8003280 <HAL_GPIO_DeInit+0x1e4>)
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	43db      	mvns	r3, r3
 8003160:	4947      	ldr	r1, [pc, #284]	; (8003280 <HAL_GPIO_DeInit+0x1e4>)
 8003162:	4013      	ands	r3, r2
 8003164:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003166:	4b46      	ldr	r3, [pc, #280]	; (8003280 <HAL_GPIO_DeInit+0x1e4>)
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	4944      	ldr	r1, [pc, #272]	; (8003280 <HAL_GPIO_DeInit+0x1e4>)
 8003170:	4013      	ands	r3, r2
 8003172:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003174:	4b42      	ldr	r3, [pc, #264]	; (8003280 <HAL_GPIO_DeInit+0x1e4>)
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	4940      	ldr	r1, [pc, #256]	; (8003280 <HAL_GPIO_DeInit+0x1e4>)
 800317e:	4013      	ands	r3, r2
 8003180:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	220f      	movs	r2, #15
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003192:	4a34      	ldr	r2, [pc, #208]	; (8003264 <HAL_GPIO_DeInit+0x1c8>)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	43da      	mvns	r2, r3
 80031a2:	4830      	ldr	r0, [pc, #192]	; (8003264 <HAL_GPIO_DeInit+0x1c8>)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	400a      	ands	r2, r1
 80031aa:	3302      	adds	r3, #2
 80031ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	2103      	movs	r1, #3
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	08da      	lsrs	r2, r3, #3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3208      	adds	r2, #8
 80031cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	08d2      	lsrs	r2, r2, #3
 80031e4:	4019      	ands	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3208      	adds	r2, #8
 80031ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2103      	movs	r1, #3
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	401a      	ands	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	2101      	movs	r1, #1
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	401a      	ands	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2103      	movs	r1, #3
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	401a      	ands	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003232:	2101      	movs	r1, #1
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	401a      	ands	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3301      	adds	r3, #1
 8003246:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	f47f af2b 	bne.w	80030ac <HAL_GPIO_DeInit+0x10>
  }
}
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40010000 	.word	0x40010000
 8003268:	48000400 	.word	0x48000400
 800326c:	48000800 	.word	0x48000800
 8003270:	48000c00 	.word	0x48000c00
 8003274:	48001000 	.word	0x48001000
 8003278:	48001400 	.word	0x48001400
 800327c:	48001800 	.word	0x48001800
 8003280:	40010400 	.word	0x40010400

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
 8003290:	4613      	mov	r3, r2
 8003292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003294:	787b      	ldrb	r3, [r7, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032a0:	e002      	b.n	80032a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ca:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fe3a 	bl	8000f4c <HAL_GPIO_EXTI_Callback>
  }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40010400 	.word	0x40010400

080032e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e081      	b.n	80033fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fe f932 	bl	8001574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2224      	movs	r2, #36	; 0x24
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	e006      	b.n	800336c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800336a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d104      	bne.n	800337e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800337c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800338c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003390:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	ea42 0103 	orr.w	r1, r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	021a      	lsls	r2, r3, #8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e021      	b.n	8003458 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fe f8e5 	bl	80015fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b20      	cmp	r3, #32
 8003484:	f040 80f9 	bne.w	800367a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_I2C_Mem_Write+0x34>
 800348e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0ed      	b.n	800367c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_I2C_Mem_Write+0x4e>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0e6      	b.n	800367c <HAL_I2C_Mem_Write+0x21c>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034b6:	f7ff fb29 	bl	8002b0c <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2319      	movs	r3, #25
 80034c2:	2201      	movs	r2, #1
 80034c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fac3 	bl	8003a54 <I2C_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0d1      	b.n	800367c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2221      	movs	r2, #33	; 0x21
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a3a      	ldr	r2, [r7, #32]
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003500:	88f8      	ldrh	r0, [r7, #6]
 8003502:	893a      	ldrh	r2, [r7, #8]
 8003504:	8979      	ldrh	r1, [r7, #10]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4603      	mov	r3, r0
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f9d3 	bl	80038bc <I2C_RequestMemoryWrite>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0a9      	b.n	800367c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2bff      	cmp	r3, #255	; 0xff
 8003530:	d90e      	bls.n	8003550 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	22ff      	movs	r2, #255	; 0xff
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	b2da      	uxtb	r2, r3
 800353e:	8979      	ldrh	r1, [r7, #10]
 8003540:	2300      	movs	r3, #0
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fba5 	bl	8003c98 <I2C_TransferConfig>
 800354e:	e00f      	b.n	8003570 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	b2da      	uxtb	r2, r3
 8003560:	8979      	ldrh	r1, [r7, #10]
 8003562:	2300      	movs	r3, #0
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fb94 	bl	8003c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 faad 	bl	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e07b      	b.n	800367c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d034      	beq.n	8003628 <HAL_I2C_Mem_Write+0x1c8>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d130      	bne.n	8003628 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	2200      	movs	r2, #0
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fa3f 	bl	8003a54 <I2C_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e04d      	b.n	800367c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2bff      	cmp	r3, #255	; 0xff
 80035e8:	d90e      	bls.n	8003608 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	22ff      	movs	r2, #255	; 0xff
 80035ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	8979      	ldrh	r1, [r7, #10]
 80035f8:	2300      	movs	r3, #0
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fb49 	bl	8003c98 <I2C_TransferConfig>
 8003606:	e00f      	b.n	8003628 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003616:	b2da      	uxtb	r2, r3
 8003618:	8979      	ldrh	r1, [r7, #10]
 800361a:	2300      	movs	r3, #0
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fb38 	bl	8003c98 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d19e      	bne.n	8003570 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fa8c 	bl	8003b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e01a      	b.n	800367c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2220      	movs	r2, #32
 800364c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_I2C_Mem_Write+0x224>)
 800365a:	400b      	ands	r3, r1
 800365c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	fe00e800 	.word	0xfe00e800

08003688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	4608      	mov	r0, r1
 8003692:	4611      	mov	r1, r2
 8003694:	461a      	mov	r2, r3
 8003696:	4603      	mov	r3, r0
 8003698:	817b      	strh	r3, [r7, #10]
 800369a:	460b      	mov	r3, r1
 800369c:	813b      	strh	r3, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	f040 80fd 	bne.w	80038aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_I2C_Mem_Read+0x34>
 80036b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0f1      	b.n	80038ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x4e>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e0ea      	b.n	80038ac <HAL_I2C_Mem_Read+0x224>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036de:	f7ff fa15 	bl	8002b0c <HAL_GetTick>
 80036e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2319      	movs	r3, #25
 80036ea:	2201      	movs	r2, #1
 80036ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f9af 	bl	8003a54 <I2C_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0d5      	b.n	80038ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2222      	movs	r2, #34	; 0x22
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003728:	88f8      	ldrh	r0, [r7, #6]
 800372a:	893a      	ldrh	r2, [r7, #8]
 800372c:	8979      	ldrh	r1, [r7, #10]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	4603      	mov	r3, r0
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f913 	bl	8003964 <I2C_RequestMemoryRead>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0ad      	b.n	80038ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	2bff      	cmp	r3, #255	; 0xff
 8003758:	d90e      	bls.n	8003778 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	22ff      	movs	r2, #255	; 0xff
 800375e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	b2da      	uxtb	r2, r3
 8003766:	8979      	ldrh	r1, [r7, #10]
 8003768:	4b52      	ldr	r3, [pc, #328]	; (80038b4 <HAL_I2C_Mem_Read+0x22c>)
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fa91 	bl	8003c98 <I2C_TransferConfig>
 8003776:	e00f      	b.n	8003798 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	b2da      	uxtb	r2, r3
 8003788:	8979      	ldrh	r1, [r7, #10]
 800378a:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_I2C_Mem_Read+0x22c>)
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fa80 	bl	8003c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2200      	movs	r2, #0
 80037a0:	2104      	movs	r1, #4
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f956 	bl	8003a54 <I2C_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07c      	b.n	80038ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d034      	beq.n	8003858 <HAL_I2C_Mem_Read+0x1d0>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d130      	bne.n	8003858 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	2200      	movs	r2, #0
 80037fe:	2180      	movs	r1, #128	; 0x80
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f927 	bl	8003a54 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e04d      	b.n	80038ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2bff      	cmp	r3, #255	; 0xff
 8003818:	d90e      	bls.n	8003838 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	22ff      	movs	r2, #255	; 0xff
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	b2da      	uxtb	r2, r3
 8003826:	8979      	ldrh	r1, [r7, #10]
 8003828:	2300      	movs	r3, #0
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fa31 	bl	8003c98 <I2C_TransferConfig>
 8003836:	e00f      	b.n	8003858 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	b2da      	uxtb	r2, r3
 8003848:	8979      	ldrh	r1, [r7, #10]
 800384a:	2300      	movs	r3, #0
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fa20 	bl	8003c98 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d19a      	bne.n	8003798 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f974 	bl	8003b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e01a      	b.n	80038ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2220      	movs	r2, #32
 800387c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_I2C_Mem_Read+0x230>)
 800388a:	400b      	ands	r3, r1
 800388c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038aa:	2302      	movs	r3, #2
  }
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	80002400 	.word	0x80002400
 80038b8:	fe00e800 	.word	0xfe00e800

080038bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	817b      	strh	r3, [r7, #10]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	8979      	ldrh	r1, [r7, #10]
 80038dc:	4b20      	ldr	r3, [pc, #128]	; (8003960 <I2C_RequestMemoryWrite+0xa4>)
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f9d7 	bl	8003c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	69b9      	ldr	r1, [r7, #24]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f8f0 	bl	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e02c      	b.n	8003958 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003904:	893b      	ldrh	r3, [r7, #8]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	629a      	str	r2, [r3, #40]	; 0x28
 800390e:	e015      	b.n	800393c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003910:	893b      	ldrh	r3, [r7, #8]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	b29b      	uxth	r3, r3
 8003916:	b2da      	uxtb	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	69b9      	ldr	r1, [r7, #24]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f8d6 	bl	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e012      	b.n	8003958 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003932:	893b      	ldrh	r3, [r7, #8]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2200      	movs	r2, #0
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f884 	bl	8003a54 <I2C_WaitOnFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	80002000 	.word	0x80002000

08003964 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	461a      	mov	r2, r3
 8003972:	4603      	mov	r3, r0
 8003974:	817b      	strh	r3, [r7, #10]
 8003976:	460b      	mov	r3, r1
 8003978:	813b      	strh	r3, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	b2da      	uxtb	r2, r3
 8003982:	8979      	ldrh	r1, [r7, #10]
 8003984:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <I2C_RequestMemoryRead+0xa4>)
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2300      	movs	r3, #0
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f984 	bl	8003c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	69b9      	ldr	r1, [r7, #24]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f89d 	bl	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e02c      	b.n	80039fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039aa:	893b      	ldrh	r3, [r7, #8]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
 80039b4:	e015      	b.n	80039e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039b6:	893b      	ldrh	r3, [r7, #8]
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f883 	bl	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e012      	b.n	80039fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039d8:	893b      	ldrh	r3, [r7, #8]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2140      	movs	r1, #64	; 0x40
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f831 	bl	8003a54 <I2C_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	80002000 	.word	0x80002000

08003a0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d103      	bne.n	8003a2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2200      	movs	r2, #0
 8003a28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d007      	beq.n	8003a48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	619a      	str	r2, [r3, #24]
  }
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a64:	e022      	b.n	8003aac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d01e      	beq.n	8003aac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7ff f84d 	bl	8002b0c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d113      	bne.n	8003aac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e00f      	b.n	8003acc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d0cd      	beq.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ae0:	e02c      	b.n	8003b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f870 	bl	8003bcc <I2C_IsAcknowledgeFailed>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e02a      	b.n	8003b4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d01e      	beq.n	8003b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7ff f805 	bl	8002b0c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d113      	bne.n	8003b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e007      	b.n	8003b4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d1cb      	bne.n	8003ae2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b60:	e028      	b.n	8003bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f830 	bl	8003bcc <I2C_IsAcknowledgeFailed>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e026      	b.n	8003bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe ffc9 	bl	8002b0c <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d113      	bne.n	8003bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e007      	b.n	8003bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d1cf      	bne.n	8003b62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d151      	bne.n	8003c8a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be6:	e022      	b.n	8003c2e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d01e      	beq.n	8003c2e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf0:	f7fe ff8c 	bl	8002b0c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d302      	bcc.n	8003c06 <I2C_IsAcknowledgeFailed+0x3a>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d113      	bne.n	8003c2e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e02e      	b.n	8003c8c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d1d5      	bne.n	8003be8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2210      	movs	r2, #16
 8003c42:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff fedd 	bl	8003a0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <I2C_IsAcknowledgeFailed+0xc8>)
 8003c5e:	400b      	ands	r3, r1
 8003c60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f043 0204 	orr.w	r2, r3, #4
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	fe00e800 	.word	0xfe00e800

08003c98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	817b      	strh	r3, [r7, #10]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	0d5b      	lsrs	r3, r3, #21
 8003cb4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <I2C_TransferConfig+0x58>)
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	ea02 0103 	and.w	r1, r2, r3
 8003cc2:	897b      	ldrh	r3, [r7, #10]
 8003cc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cc8:	7a7b      	ldrb	r3, [r7, #9]
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	03ff63ff 	.word	0x03ff63ff

08003cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d138      	bne.n	8003d7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e032      	b.n	8003d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2224      	movs	r2, #36	; 0x24
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e000      	b.n	8003d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da4:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d121      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d11e      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dc0:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dcc:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	e005      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003de8:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d102      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e04:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e004      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e10:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d134      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0xac>
 8003e30:	e005      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e32:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e34:	617b      	str	r3, [r7, #20]
      break;
 8003e36:	e005      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e3a:	617b      	str	r3, [r7, #20]
      break;
 8003e3c:	e002      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	617b      	str	r3, [r7, #20]
      break;
 8003e42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e44:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	3301      	adds	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	fb03 f202 	mul.w	r2, r3, r2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	0e5b      	lsrs	r3, r3, #25
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	3301      	adds	r3, #1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e84:	69bb      	ldr	r3, [r7, #24]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3724      	adds	r7, #36	; 0x24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08008d90 	.word	0x08008d90
 8003e9c:	00f42400 	.word	0x00f42400
 8003ea0:	007a1200 	.word	0x007a1200

08003ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000000 	.word	0x20000000

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ec0:	f7ff fff0 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4904      	ldr	r1, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	08008d88 	.word	0x08008d88

08003ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eec:	f7ff ffda 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0adb      	lsrs	r3, r3, #11
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4904      	ldr	r1, [pc, #16]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	08008d88 	.word	0x08008d88

08003f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e040      	b.n	8003fa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fb7e 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	; 0x24
 8003f40:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8c0 	bl	80040d8 <UART_SetConfig>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e022      	b.n	8003fa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fc54 	bl	8004818 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fcdb 	bl	800495c <UART_CheckIdleState>
 8003fa6:	4603      	mov	r3, r0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	f040 8081 	bne.w	80040cc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_UART_Transmit+0x26>
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e079      	b.n	80040ce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_UART_Transmit+0x38>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e072      	b.n	80040ce <HAL_UART_Transmit+0x11e>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2221      	movs	r2, #33	; 0x21
 8003ffa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ffc:	f7fe fd86 	bl	8002b0c <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	88fa      	ldrh	r2, [r7, #6]
 8004006:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401a:	d108      	bne.n	800402e <HAL_UART_Transmit+0x7e>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d104      	bne.n	800402e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e003      	b.n	8004036 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800403e:	e02d      	b.n	800409c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2200      	movs	r2, #0
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fccb 	bl	80049e6 <UART_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e039      	b.n	80040ce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	881a      	ldrh	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406c:	b292      	uxth	r2, r2
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3302      	adds	r3, #2
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	e008      	b.n	800408a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	781a      	ldrb	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	b292      	uxth	r2, r2
 8004082:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3301      	adds	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1cb      	bne.n	8004040 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2200      	movs	r2, #0
 80040b0:	2140      	movs	r1, #64	; 0x40
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fc97 	bl	80049e6 <UART_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e005      	b.n	80040ce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e000      	b.n	80040ce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040dc:	b0a0      	sub	sp, #128	; 0x80
 80040de:	af00      	add	r7, sp, #0
 80040e0:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	431a      	orrs	r2, r3
 8004100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	4313      	orrs	r3, r2
 8004106:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	49a4      	ldr	r1, [pc, #656]	; (80043a0 <UART_SetConfig+0x2c8>)
 8004110:	4019      	ands	r1, r3
 8004112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004118:	430b      	orrs	r3, r1
 800411a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800411c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004128:	68d9      	ldr	r1, [r3, #12]
 800412a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	ea40 0301 	orr.w	r3, r0, r1
 8004132:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800413a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b99      	ldr	r3, [pc, #612]	; (80043a4 <UART_SetConfig+0x2cc>)
 8004140:	429a      	cmp	r2, r3
 8004142:	d004      	beq.n	800414e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004146:	6a1a      	ldr	r2, [r3, #32]
 8004148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800414a:	4313      	orrs	r3, r2
 800414c:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800414e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800415e:	430b      	orrs	r3, r1
 8004160:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b90      	ldr	r3, [pc, #576]	; (80043a8 <UART_SetConfig+0x2d0>)
 8004168:	429a      	cmp	r2, r3
 800416a:	d125      	bne.n	80041b8 <UART_SetConfig+0xe0>
 800416c:	4b8f      	ldr	r3, [pc, #572]	; (80043ac <UART_SetConfig+0x2d4>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b03      	cmp	r3, #3
 8004178:	d81a      	bhi.n	80041b0 <UART_SetConfig+0xd8>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <UART_SetConfig+0xa8>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	08004191 	.word	0x08004191
 8004184:	080041a1 	.word	0x080041a1
 8004188:	08004199 	.word	0x08004199
 800418c:	080041a9 	.word	0x080041a9
 8004190:	2301      	movs	r3, #1
 8004192:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004196:	e116      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004198:	2302      	movs	r3, #2
 800419a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800419e:	e112      	b.n	80043c6 <UART_SetConfig+0x2ee>
 80041a0:	2304      	movs	r3, #4
 80041a2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80041a6:	e10e      	b.n	80043c6 <UART_SetConfig+0x2ee>
 80041a8:	2308      	movs	r3, #8
 80041aa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80041ae:	e10a      	b.n	80043c6 <UART_SetConfig+0x2ee>
 80041b0:	2310      	movs	r3, #16
 80041b2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80041b6:	e106      	b.n	80043c6 <UART_SetConfig+0x2ee>
 80041b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b7c      	ldr	r3, [pc, #496]	; (80043b0 <UART_SetConfig+0x2d8>)
 80041be:	429a      	cmp	r2, r3
 80041c0:	d138      	bne.n	8004234 <UART_SetConfig+0x15c>
 80041c2:	4b7a      	ldr	r3, [pc, #488]	; (80043ac <UART_SetConfig+0x2d4>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	2b0c      	cmp	r3, #12
 80041ce:	d82d      	bhi.n	800422c <UART_SetConfig+0x154>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <UART_SetConfig+0x100>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	0800420d 	.word	0x0800420d
 80041dc:	0800422d 	.word	0x0800422d
 80041e0:	0800422d 	.word	0x0800422d
 80041e4:	0800422d 	.word	0x0800422d
 80041e8:	0800421d 	.word	0x0800421d
 80041ec:	0800422d 	.word	0x0800422d
 80041f0:	0800422d 	.word	0x0800422d
 80041f4:	0800422d 	.word	0x0800422d
 80041f8:	08004215 	.word	0x08004215
 80041fc:	0800422d 	.word	0x0800422d
 8004200:	0800422d 	.word	0x0800422d
 8004204:	0800422d 	.word	0x0800422d
 8004208:	08004225 	.word	0x08004225
 800420c:	2300      	movs	r3, #0
 800420e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004212:	e0d8      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004214:	2302      	movs	r3, #2
 8004216:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800421a:	e0d4      	b.n	80043c6 <UART_SetConfig+0x2ee>
 800421c:	2304      	movs	r3, #4
 800421e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004222:	e0d0      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004224:	2308      	movs	r3, #8
 8004226:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800422a:	e0cc      	b.n	80043c6 <UART_SetConfig+0x2ee>
 800422c:	2310      	movs	r3, #16
 800422e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004232:	e0c8      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b5e      	ldr	r3, [pc, #376]	; (80043b4 <UART_SetConfig+0x2dc>)
 800423a:	429a      	cmp	r2, r3
 800423c:	d125      	bne.n	800428a <UART_SetConfig+0x1b2>
 800423e:	4b5b      	ldr	r3, [pc, #364]	; (80043ac <UART_SetConfig+0x2d4>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d016      	beq.n	800427a <UART_SetConfig+0x1a2>
 800424c:	2b30      	cmp	r3, #48	; 0x30
 800424e:	d818      	bhi.n	8004282 <UART_SetConfig+0x1aa>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d00a      	beq.n	800426a <UART_SetConfig+0x192>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d814      	bhi.n	8004282 <UART_SetConfig+0x1aa>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <UART_SetConfig+0x18a>
 800425c:	2b10      	cmp	r3, #16
 800425e:	d008      	beq.n	8004272 <UART_SetConfig+0x19a>
 8004260:	e00f      	b.n	8004282 <UART_SetConfig+0x1aa>
 8004262:	2300      	movs	r3, #0
 8004264:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004268:	e0ad      	b.n	80043c6 <UART_SetConfig+0x2ee>
 800426a:	2302      	movs	r3, #2
 800426c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004270:	e0a9      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004272:	2304      	movs	r3, #4
 8004274:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004278:	e0a5      	b.n	80043c6 <UART_SetConfig+0x2ee>
 800427a:	2308      	movs	r3, #8
 800427c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004280:	e0a1      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004282:	2310      	movs	r3, #16
 8004284:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004288:	e09d      	b.n	80043c6 <UART_SetConfig+0x2ee>
 800428a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b4a      	ldr	r3, [pc, #296]	; (80043b8 <UART_SetConfig+0x2e0>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d125      	bne.n	80042e0 <UART_SetConfig+0x208>
 8004294:	4b45      	ldr	r3, [pc, #276]	; (80043ac <UART_SetConfig+0x2d4>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800429e:	2bc0      	cmp	r3, #192	; 0xc0
 80042a0:	d016      	beq.n	80042d0 <UART_SetConfig+0x1f8>
 80042a2:	2bc0      	cmp	r3, #192	; 0xc0
 80042a4:	d818      	bhi.n	80042d8 <UART_SetConfig+0x200>
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d00a      	beq.n	80042c0 <UART_SetConfig+0x1e8>
 80042aa:	2b80      	cmp	r3, #128	; 0x80
 80042ac:	d814      	bhi.n	80042d8 <UART_SetConfig+0x200>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <UART_SetConfig+0x1e0>
 80042b2:	2b40      	cmp	r3, #64	; 0x40
 80042b4:	d008      	beq.n	80042c8 <UART_SetConfig+0x1f0>
 80042b6:	e00f      	b.n	80042d8 <UART_SetConfig+0x200>
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80042be:	e082      	b.n	80043c6 <UART_SetConfig+0x2ee>
 80042c0:	2302      	movs	r3, #2
 80042c2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80042c6:	e07e      	b.n	80043c6 <UART_SetConfig+0x2ee>
 80042c8:	2304      	movs	r3, #4
 80042ca:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80042ce:	e07a      	b.n	80043c6 <UART_SetConfig+0x2ee>
 80042d0:	2308      	movs	r3, #8
 80042d2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80042d6:	e076      	b.n	80043c6 <UART_SetConfig+0x2ee>
 80042d8:	2310      	movs	r3, #16
 80042da:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80042de:	e072      	b.n	80043c6 <UART_SetConfig+0x2ee>
 80042e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b35      	ldr	r3, [pc, #212]	; (80043bc <UART_SetConfig+0x2e4>)
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d12a      	bne.n	8004340 <UART_SetConfig+0x268>
 80042ea:	4b30      	ldr	r3, [pc, #192]	; (80043ac <UART_SetConfig+0x2d4>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f8:	d01a      	beq.n	8004330 <UART_SetConfig+0x258>
 80042fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fe:	d81b      	bhi.n	8004338 <UART_SetConfig+0x260>
 8004300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004304:	d00c      	beq.n	8004320 <UART_SetConfig+0x248>
 8004306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430a:	d815      	bhi.n	8004338 <UART_SetConfig+0x260>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <UART_SetConfig+0x240>
 8004310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004314:	d008      	beq.n	8004328 <UART_SetConfig+0x250>
 8004316:	e00f      	b.n	8004338 <UART_SetConfig+0x260>
 8004318:	2300      	movs	r3, #0
 800431a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800431e:	e052      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004320:	2302      	movs	r3, #2
 8004322:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004326:	e04e      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004328:	2304      	movs	r3, #4
 800432a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800432e:	e04a      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004330:	2308      	movs	r3, #8
 8004332:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004336:	e046      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004338:	2310      	movs	r3, #16
 800433a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800433e:	e042      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <UART_SetConfig+0x2cc>)
 8004346:	429a      	cmp	r2, r3
 8004348:	d13a      	bne.n	80043c0 <UART_SetConfig+0x2e8>
 800434a:	4b18      	ldr	r3, [pc, #96]	; (80043ac <UART_SetConfig+0x2d4>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004358:	d01a      	beq.n	8004390 <UART_SetConfig+0x2b8>
 800435a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800435e:	d81b      	bhi.n	8004398 <UART_SetConfig+0x2c0>
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004364:	d00c      	beq.n	8004380 <UART_SetConfig+0x2a8>
 8004366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436a:	d815      	bhi.n	8004398 <UART_SetConfig+0x2c0>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <UART_SetConfig+0x2a0>
 8004370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004374:	d008      	beq.n	8004388 <UART_SetConfig+0x2b0>
 8004376:	e00f      	b.n	8004398 <UART_SetConfig+0x2c0>
 8004378:	2300      	movs	r3, #0
 800437a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800437e:	e022      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004380:	2302      	movs	r3, #2
 8004382:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004386:	e01e      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004388:	2304      	movs	r3, #4
 800438a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800438e:	e01a      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004390:	2308      	movs	r3, #8
 8004392:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004396:	e016      	b.n	80043c6 <UART_SetConfig+0x2ee>
 8004398:	2310      	movs	r3, #16
 800439a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800439e:	e012      	b.n	80043c6 <UART_SetConfig+0x2ee>
 80043a0:	efff69f3 	.word	0xefff69f3
 80043a4:	40008000 	.word	0x40008000
 80043a8:	40013800 	.word	0x40013800
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40004400 	.word	0x40004400
 80043b4:	40004800 	.word	0x40004800
 80043b8:	40004c00 	.word	0x40004c00
 80043bc:	40005000 	.word	0x40005000
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4bb6      	ldr	r3, [pc, #728]	; (80046a4 <UART_SetConfig+0x5cc>)
 80043cc:	429a      	cmp	r2, r3
 80043ce:	f040 810c 	bne.w	80045ea <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043d2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d823      	bhi.n	8004422 <UART_SetConfig+0x34a>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x308>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	08004405 	.word	0x08004405
 80043e4:	08004423 	.word	0x08004423
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004413 	.word	0x08004413
 80043f4:	08004423 	.word	0x08004423
 80043f8:	08004423 	.word	0x08004423
 80043fc:	08004423 	.word	0x08004423
 8004400:	0800441b 	.word	0x0800441b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004404:	f7ff fd5a 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8004408:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800440a:	e00e      	b.n	800442a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800440c:	4ba6      	ldr	r3, [pc, #664]	; (80046a8 <UART_SetConfig+0x5d0>)
 800440e:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004410:	e00b      	b.n	800442a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004412:	f7ff fcbb 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8004416:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004418:	e007      	b.n	800442a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004420:	e003      	b.n	800442a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004428:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800442a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 81e5 	beq.w	80047fc <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	441a      	add	r2, r3
 800443c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443e:	4293      	cmp	r3, r2
 8004440:	d305      	bcc.n	800444e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444a:	4293      	cmp	r3, r2
 800444c:	d903      	bls.n	8004456 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004454:	e1d2      	b.n	80047fc <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8004456:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800445a:	2b08      	cmp	r3, #8
 800445c:	f200 80b0 	bhi.w	80045c0 <UART_SetConfig+0x4e8>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x390>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	0800448d 	.word	0x0800448d
 800446c:	080045c1 	.word	0x080045c1
 8004470:	080044ed 	.word	0x080044ed
 8004474:	080045c1 	.word	0x080045c1
 8004478:	0800452d 	.word	0x0800452d
 800447c:	080045c1 	.word	0x080045c1
 8004480:	080045c1 	.word	0x080045c1
 8004484:	080045c1 	.word	0x080045c1
 8004488:	08004589 	.word	0x08004589
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800448c:	f7ff fd16 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8004490:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004494:	2200      	movs	r2, #0
 8004496:	4698      	mov	r8, r3
 8004498:	4691      	mov	r9, r2
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80044a6:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80044aa:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80044ae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80044b0:	6849      	ldr	r1, [r1, #4]
 80044b2:	0849      	lsrs	r1, r1, #1
 80044b4:	2000      	movs	r0, #0
 80044b6:	6539      	str	r1, [r7, #80]	; 0x50
 80044b8:	6578      	str	r0, [r7, #84]	; 0x54
 80044ba:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80044be:	4621      	mov	r1, r4
 80044c0:	1851      	adds	r1, r2, r1
 80044c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80044c4:	4629      	mov	r1, r5
 80044c6:	eb43 0101 	adc.w	r1, r3, r1
 80044ca:	64f9      	str	r1, [r7, #76]	; 0x4c
 80044cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	643b      	str	r3, [r7, #64]	; 0x40
 80044d4:	647a      	str	r2, [r7, #68]	; 0x44
 80044d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80044de:	f7fc fbb3 	bl	8000c48 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4613      	mov	r3, r2
 80044e8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80044ea:	e06d      	b.n	80045c8 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80044ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	085b      	lsrs	r3, r3, #1
 80044f2:	2200      	movs	r2, #0
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044f8:	4b6c      	ldr	r3, [pc, #432]	; (80046ac <UART_SetConfig+0x5d4>)
 80044fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80044fe:	4602      	mov	r2, r0
 8004500:	18d3      	adds	r3, r2, r3
 8004502:	633b      	str	r3, [r7, #48]	; 0x30
 8004504:	460b      	mov	r3, r1
 8004506:	f143 0300 	adc.w	r3, r3, #0
 800450a:	637b      	str	r3, [r7, #52]	; 0x34
 800450c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
 8004514:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004516:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800451a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800451e:	f7fc fb93 	bl	8000c48 <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4613      	mov	r3, r2
 8004528:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800452a:	e04d      	b.n	80045c8 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800452c:	f7ff fc2e 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8004530:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004534:	2200      	movs	r2, #0
 8004536:	461c      	mov	r4, r3
 8004538:	4615      	mov	r5, r2
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	022b      	lsls	r3, r5, #8
 8004544:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004548:	0222      	lsls	r2, r4, #8
 800454a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800454c:	6849      	ldr	r1, [r1, #4]
 800454e:	0849      	lsrs	r1, r1, #1
 8004550:	2000      	movs	r0, #0
 8004552:	6239      	str	r1, [r7, #32]
 8004554:	6278      	str	r0, [r7, #36]	; 0x24
 8004556:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800455a:	4621      	mov	r1, r4
 800455c:	1851      	adds	r1, r2, r1
 800455e:	61b9      	str	r1, [r7, #24]
 8004560:	4629      	mov	r1, r5
 8004562:	eb43 0101 	adc.w	r1, r3, r1
 8004566:	61f9      	str	r1, [r7, #28]
 8004568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	617a      	str	r2, [r7, #20]
 8004572:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004576:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800457a:	f7fc fb65 	bl	8000c48 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4613      	mov	r3, r2
 8004584:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004586:	e01f      	b.n	80045c8 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	2200      	movs	r2, #0
 8004590:	469a      	mov	sl, r3
 8004592:	4693      	mov	fp, r2
 8004594:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	f14b 0300 	adc.w	r3, fp, #0
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045b2:	f7fc fb49 	bl	8000c48 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4613      	mov	r3, r2
 80045bc:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80045be:	e003      	b.n	80045c8 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 80045c6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ce:	d308      	bcc.n	80045e2 <UART_SetConfig+0x50a>
 80045d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d6:	d204      	bcs.n	80045e2 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 80045d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045de:	60da      	str	r2, [r3, #12]
 80045e0:	e10c      	b.n	80047fc <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80045e8:	e108      	b.n	80047fc <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f2:	f040 808f 	bne.w	8004714 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 80045f6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d864      	bhi.n	80046c8 <UART_SetConfig+0x5f0>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <UART_SetConfig+0x52c>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004629 	.word	0x08004629
 8004608:	08004649 	.word	0x08004649
 800460c:	08004669 	.word	0x08004669
 8004610:	080046c9 	.word	0x080046c9
 8004614:	08004685 	.word	0x08004685
 8004618:	080046c9 	.word	0x080046c9
 800461c:	080046c9 	.word	0x080046c9
 8004620:	080046c9 	.word	0x080046c9
 8004624:	080046b1 	.word	0x080046b1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004628:	f7ff fc48 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 800462c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800462e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004630:	005a      	lsls	r2, r3, #1
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	441a      	add	r2, r3
 800463a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004642:	b29b      	uxth	r3, r3
 8004644:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004646:	e043      	b.n	80046d0 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7ff fc4e 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 800464c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800464e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004650:	005a      	lsls	r2, r3, #1
 8004652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	441a      	add	r2, r3
 800465a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	b29b      	uxth	r3, r3
 8004664:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004666:	e033      	b.n	80046d0 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004672:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004676:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004678:	6852      	ldr	r2, [r2, #4]
 800467a:	fbb3 f3f2 	udiv	r3, r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004682:	e025      	b.n	80046d0 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004684:	f7ff fb82 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8004688:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800468a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800468c:	005a      	lsls	r2, r3, #1
 800468e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	441a      	add	r2, r3
 8004696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80046a2:	e015      	b.n	80046d0 <UART_SetConfig+0x5f8>
 80046a4:	40008000 	.word	0x40008000
 80046a8:	00f42400 	.word	0x00f42400
 80046ac:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80046b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80046ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80046c6:	e003      	b.n	80046d0 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80046ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d2:	2b0f      	cmp	r3, #15
 80046d4:	d91a      	bls.n	800470c <UART_SetConfig+0x634>
 80046d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046dc:	d216      	bcs.n	800470c <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f023 030f 	bic.w	r3, r3, #15
 80046e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8004700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e077      	b.n	80047fc <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004712:	e073      	b.n	80047fc <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8004714:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004718:	2b08      	cmp	r3, #8
 800471a:	d85c      	bhi.n	80047d6 <UART_SetConfig+0x6fe>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0x64c>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004749 	.word	0x08004749
 8004728:	08004767 	.word	0x08004767
 800472c:	08004785 	.word	0x08004785
 8004730:	080047d7 	.word	0x080047d7
 8004734:	080047a1 	.word	0x080047a1
 8004738:	080047d7 	.word	0x080047d7
 800473c:	080047d7 	.word	0x080047d7
 8004740:	080047d7 	.word	0x080047d7
 8004744:	080047bf 	.word	0x080047bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004748:	f7ff fbb8 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 800474c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800474e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	085a      	lsrs	r2, r3, #1
 8004754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004756:	441a      	add	r2, r3
 8004758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	b29b      	uxth	r3, r3
 8004762:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004764:	e03b      	b.n	80047de <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004766:	f7ff fbbf 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 800476a:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800476c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	085a      	lsrs	r2, r3, #1
 8004772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004774:	441a      	add	r2, r3
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	b29b      	uxth	r3, r3
 8004780:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004782:	e02c      	b.n	80047de <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800478e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004792:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004794:	6852      	ldr	r2, [r2, #4]
 8004796:	fbb3 f3f2 	udiv	r3, r3, r2
 800479a:	b29b      	uxth	r3, r3
 800479c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800479e:	e01e      	b.n	80047de <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047a0:	f7ff faf4 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 80047a4:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	085a      	lsrs	r2, r3, #1
 80047ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ae:	441a      	add	r2, r3
 80047b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80047bc:	e00f      	b.n	80047de <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80047be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80047c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80047d4:	e003      	b.n	80047de <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80047dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e0:	2b0f      	cmp	r3, #15
 80047e2:	d908      	bls.n	80047f6 <UART_SetConfig+0x71e>
 80047e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ea:	d204      	bcs.n	80047f6 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 80047ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80047f2:	60da      	str	r2, [r3, #12]
 80047f4:	e002      	b.n	80047fc <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fe:	2200      	movs	r2, #0
 8004800:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004804:	2200      	movs	r2, #0
 8004806:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004808:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800480c:	4618      	mov	r0, r3
 800480e:	3780      	adds	r7, #128	; 0x80
 8004810:	46bd      	mov	sp, r7
 8004812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004816:	bf00      	nop

08004818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01a      	beq.n	800492e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004916:	d10a      	bne.n	800492e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	605a      	str	r2, [r3, #4]
  }
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af02      	add	r7, sp, #8
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800496a:	f7fe f8cf 	bl	8002b0c <HAL_GetTick>
 800496e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b08      	cmp	r3, #8
 800497c:	d10e      	bne.n	800499c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800497e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f82a 	bl	80049e6 <UART_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e020      	b.n	80049de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d10e      	bne.n	80049c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f814 	bl	80049e6 <UART_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e00a      	b.n	80049de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	4613      	mov	r3, r2
 80049f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f6:	e05d      	b.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d059      	beq.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a00:	f7fe f884 	bl	8002b0c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d11b      	bne.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a24:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0201 	bic.w	r2, r2, #1
 8004a34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e042      	b.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d02b      	beq.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6a:	d123      	bne.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a74:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a84:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e00f      	b.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4013      	ands	r3, r2
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2301      	moveq	r3, #1
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d092      	beq.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <findslot>:
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <findslot+0x2c>)
 8004ade:	b510      	push	{r4, lr}
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	b118      	cbz	r0, 8004aee <findslot+0x12>
 8004ae6:	6983      	ldr	r3, [r0, #24]
 8004ae8:	b90b      	cbnz	r3, 8004aee <findslot+0x12>
 8004aea:	f000 faf9 	bl	80050e0 <__sinit>
 8004aee:	2c13      	cmp	r4, #19
 8004af0:	d807      	bhi.n	8004b02 <findslot+0x26>
 8004af2:	4806      	ldr	r0, [pc, #24]	; (8004b0c <findslot+0x30>)
 8004af4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004af8:	3201      	adds	r2, #1
 8004afa:	d002      	beq.n	8004b02 <findslot+0x26>
 8004afc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004b00:	bd10      	pop	{r4, pc}
 8004b02:	2000      	movs	r0, #0
 8004b04:	e7fc      	b.n	8004b00 <findslot+0x24>
 8004b06:	bf00      	nop
 8004b08:	200000e4 	.word	0x200000e4
 8004b0c:	200003d8 	.word	0x200003d8

08004b10 <error>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	4604      	mov	r4, r0
 8004b14:	f000 fa86 	bl	8005024 <__errno>
 8004b18:	2613      	movs	r6, #19
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	2700      	movs	r7, #0
 8004b1e:	4630      	mov	r0, r6
 8004b20:	4639      	mov	r1, r7
 8004b22:	beab      	bkpt	0x00ab
 8004b24:	4606      	mov	r6, r0
 8004b26:	602e      	str	r6, [r5, #0]
 8004b28:	4620      	mov	r0, r4
 8004b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b2c <checkerror>:
 8004b2c:	1c43      	adds	r3, r0, #1
 8004b2e:	d101      	bne.n	8004b34 <checkerror+0x8>
 8004b30:	f7ff bfee 	b.w	8004b10 <error>
 8004b34:	4770      	bx	lr

08004b36 <_swiread>:
 8004b36:	b530      	push	{r4, r5, lr}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004b3e:	9203      	str	r2, [sp, #12]
 8004b40:	2406      	movs	r4, #6
 8004b42:	ad01      	add	r5, sp, #4
 8004b44:	4620      	mov	r0, r4
 8004b46:	4629      	mov	r1, r5
 8004b48:	beab      	bkpt	0x00ab
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7ff ffed 	bl	8004b2c <checkerror>
 8004b52:	b005      	add	sp, #20
 8004b54:	bd30      	pop	{r4, r5, pc}

08004b56 <_read>:
 8004b56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b58:	4615      	mov	r5, r2
 8004b5a:	9101      	str	r1, [sp, #4]
 8004b5c:	f7ff ffbe 	bl	8004adc <findslot>
 8004b60:	9901      	ldr	r1, [sp, #4]
 8004b62:	4604      	mov	r4, r0
 8004b64:	b938      	cbnz	r0, 8004b76 <_read+0x20>
 8004b66:	f000 fa5d 	bl	8005024 <__errno>
 8004b6a:	2309      	movs	r3, #9
 8004b6c:	6003      	str	r3, [r0, #0]
 8004b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b72:	b003      	add	sp, #12
 8004b74:	bd30      	pop	{r4, r5, pc}
 8004b76:	6800      	ldr	r0, [r0, #0]
 8004b78:	462a      	mov	r2, r5
 8004b7a:	f7ff ffdc 	bl	8004b36 <_swiread>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	d0f7      	beq.n	8004b72 <_read+0x1c>
 8004b82:	6863      	ldr	r3, [r4, #4]
 8004b84:	1a2a      	subs	r2, r5, r0
 8004b86:	4413      	add	r3, r2
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	e7f1      	b.n	8004b72 <_read+0x1c>

08004b8e <_swilseek>:
 8004b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b90:	460c      	mov	r4, r1
 8004b92:	4616      	mov	r6, r2
 8004b94:	f7ff ffa2 	bl	8004adc <findslot>
 8004b98:	4605      	mov	r5, r0
 8004b9a:	b940      	cbnz	r0, 8004bae <_swilseek+0x20>
 8004b9c:	f000 fa42 	bl	8005024 <__errno>
 8004ba0:	2309      	movs	r3, #9
 8004ba2:	6003      	str	r3, [r0, #0]
 8004ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ba8:	4620      	mov	r0, r4
 8004baa:	b003      	add	sp, #12
 8004bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bae:	2e02      	cmp	r6, #2
 8004bb0:	d903      	bls.n	8004bba <_swilseek+0x2c>
 8004bb2:	f000 fa37 	bl	8005024 <__errno>
 8004bb6:	2316      	movs	r3, #22
 8004bb8:	e7f3      	b.n	8004ba2 <_swilseek+0x14>
 8004bba:	2e01      	cmp	r6, #1
 8004bbc:	d112      	bne.n	8004be4 <_swilseek+0x56>
 8004bbe:	6843      	ldr	r3, [r0, #4]
 8004bc0:	18e4      	adds	r4, r4, r3
 8004bc2:	d4f6      	bmi.n	8004bb2 <_swilseek+0x24>
 8004bc4:	682b      	ldr	r3, [r5, #0]
 8004bc6:	260a      	movs	r6, #10
 8004bc8:	e9cd 3400 	strd	r3, r4, [sp]
 8004bcc:	466f      	mov	r7, sp
 8004bce:	4630      	mov	r0, r6
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	beab      	bkpt	0x00ab
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	f7ff ffa8 	bl	8004b2c <checkerror>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	dbe1      	blt.n	8004ba4 <_swilseek+0x16>
 8004be0:	606c      	str	r4, [r5, #4]
 8004be2:	e7e1      	b.n	8004ba8 <_swilseek+0x1a>
 8004be4:	2e02      	cmp	r6, #2
 8004be6:	d1ed      	bne.n	8004bc4 <_swilseek+0x36>
 8004be8:	6803      	ldr	r3, [r0, #0]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	260c      	movs	r6, #12
 8004bee:	466f      	mov	r7, sp
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	4639      	mov	r1, r7
 8004bf4:	beab      	bkpt	0x00ab
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f7ff ff97 	bl	8004b2c <checkerror>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	d0d0      	beq.n	8004ba4 <_swilseek+0x16>
 8004c02:	4404      	add	r4, r0
 8004c04:	e7de      	b.n	8004bc4 <_swilseek+0x36>

08004c06 <_lseek>:
 8004c06:	f7ff bfc2 	b.w	8004b8e <_swilseek>

08004c0a <_swiwrite>:
 8004c0a:	b530      	push	{r4, r5, lr}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004c12:	9203      	str	r2, [sp, #12]
 8004c14:	2405      	movs	r4, #5
 8004c16:	ad01      	add	r5, sp, #4
 8004c18:	4620      	mov	r0, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	beab      	bkpt	0x00ab
 8004c1e:	4604      	mov	r4, r0
 8004c20:	4620      	mov	r0, r4
 8004c22:	f7ff ff83 	bl	8004b2c <checkerror>
 8004c26:	b005      	add	sp, #20
 8004c28:	bd30      	pop	{r4, r5, pc}

08004c2a <_write>:
 8004c2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c2c:	4615      	mov	r5, r2
 8004c2e:	9101      	str	r1, [sp, #4]
 8004c30:	f7ff ff54 	bl	8004adc <findslot>
 8004c34:	9901      	ldr	r1, [sp, #4]
 8004c36:	4604      	mov	r4, r0
 8004c38:	b930      	cbnz	r0, 8004c48 <_write+0x1e>
 8004c3a:	f000 f9f3 	bl	8005024 <__errno>
 8004c3e:	2309      	movs	r3, #9
 8004c40:	6003      	str	r3, [r0, #0]
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295
 8004c46:	e012      	b.n	8004c6e <_write+0x44>
 8004c48:	6800      	ldr	r0, [r0, #0]
 8004c4a:	462a      	mov	r2, r5
 8004c4c:	f7ff ffdd 	bl	8004c0a <_swiwrite>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	dbf6      	blt.n	8004c42 <_write+0x18>
 8004c54:	6862      	ldr	r2, [r4, #4]
 8004c56:	1a2b      	subs	r3, r5, r0
 8004c58:	441a      	add	r2, r3
 8004c5a:	42a8      	cmp	r0, r5
 8004c5c:	6062      	str	r2, [r4, #4]
 8004c5e:	d105      	bne.n	8004c6c <_write+0x42>
 8004c60:	2000      	movs	r0, #0
 8004c62:	b003      	add	sp, #12
 8004c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c68:	f7ff bf52 	b.w	8004b10 <error>
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	b003      	add	sp, #12
 8004c70:	bd30      	pop	{r4, r5, pc}

08004c72 <_swiclose>:
 8004c72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c74:	2402      	movs	r4, #2
 8004c76:	9001      	str	r0, [sp, #4]
 8004c78:	ad01      	add	r5, sp, #4
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	beab      	bkpt	0x00ab
 8004c80:	4604      	mov	r4, r0
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7ff ff52 	bl	8004b2c <checkerror>
 8004c88:	b003      	add	sp, #12
 8004c8a:	bd30      	pop	{r4, r5, pc}

08004c8c <_close>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4605      	mov	r5, r0
 8004c90:	f7ff ff24 	bl	8004adc <findslot>
 8004c94:	4604      	mov	r4, r0
 8004c96:	b930      	cbnz	r0, 8004ca6 <_close+0x1a>
 8004c98:	f000 f9c4 	bl	8005024 <__errno>
 8004c9c:	2309      	movs	r3, #9
 8004c9e:	6003      	str	r3, [r0, #0]
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	bd38      	pop	{r3, r4, r5, pc}
 8004ca6:	3d01      	subs	r5, #1
 8004ca8:	2d01      	cmp	r5, #1
 8004caa:	d809      	bhi.n	8004cc0 <_close+0x34>
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <_close+0x48>)
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d104      	bne.n	8004cc0 <_close+0x34>
 8004cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cba:	6003      	str	r3, [r0, #0]
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e7f1      	b.n	8004ca4 <_close+0x18>
 8004cc0:	6820      	ldr	r0, [r4, #0]
 8004cc2:	f7ff ffd6 	bl	8004c72 <_swiclose>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d1ec      	bne.n	8004ca4 <_close+0x18>
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	e7e8      	b.n	8004ca4 <_close+0x18>
 8004cd2:	bf00      	nop
 8004cd4:	200003d8 	.word	0x200003d8

08004cd8 <_getpid>:
 8004cd8:	2001      	movs	r0, #1
 8004cda:	4770      	bx	lr

08004cdc <_swistat>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	460c      	mov	r4, r1
 8004ce0:	f7ff fefc 	bl	8004adc <findslot>
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	b930      	cbnz	r0, 8004cf6 <_swistat+0x1a>
 8004ce8:	f000 f99c 	bl	8005024 <__errno>
 8004cec:	2309      	movs	r3, #9
 8004cee:	6003      	str	r3, [r0, #0]
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	bd70      	pop	{r4, r5, r6, pc}
 8004cf6:	6863      	ldr	r3, [r4, #4]
 8004cf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cfc:	6063      	str	r3, [r4, #4]
 8004cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d02:	64a3      	str	r3, [r4, #72]	; 0x48
 8004d04:	260c      	movs	r6, #12
 8004d06:	4630      	mov	r0, r6
 8004d08:	4629      	mov	r1, r5
 8004d0a:	beab      	bkpt	0x00ab
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f7ff ff0c 	bl	8004b2c <checkerror>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	bf1c      	itt	ne
 8004d18:	6120      	strne	r0, [r4, #16]
 8004d1a:	2000      	movne	r0, #0
 8004d1c:	e7ea      	b.n	8004cf4 <_swistat+0x18>

08004d1e <_fstat>:
 8004d1e:	460b      	mov	r3, r1
 8004d20:	b510      	push	{r4, lr}
 8004d22:	2100      	movs	r1, #0
 8004d24:	4604      	mov	r4, r0
 8004d26:	2258      	movs	r2, #88	; 0x58
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 faac 	bl	8005286 <memset>
 8004d2e:	4601      	mov	r1, r0
 8004d30:	4620      	mov	r0, r4
 8004d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d36:	f7ff bfd1 	b.w	8004cdc <_swistat>

08004d3a <_stat>:
 8004d3a:	b538      	push	{r3, r4, r5, lr}
 8004d3c:	460d      	mov	r5, r1
 8004d3e:	4604      	mov	r4, r0
 8004d40:	2258      	movs	r2, #88	; 0x58
 8004d42:	2100      	movs	r1, #0
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 fa9e 	bl	8005286 <memset>
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	f000 f811 	bl	8004d74 <_swiopen>
 8004d52:	1c43      	adds	r3, r0, #1
 8004d54:	4604      	mov	r4, r0
 8004d56:	d00b      	beq.n	8004d70 <_stat+0x36>
 8004d58:	686b      	ldr	r3, [r5, #4]
 8004d5a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d5e:	606b      	str	r3, [r5, #4]
 8004d60:	4629      	mov	r1, r5
 8004d62:	f7ff ffbb 	bl	8004cdc <_swistat>
 8004d66:	4605      	mov	r5, r0
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f7ff ff8f 	bl	8004c8c <_close>
 8004d6e:	462c      	mov	r4, r5
 8004d70:	4620      	mov	r0, r4
 8004d72:	bd38      	pop	{r3, r4, r5, pc}

08004d74 <_swiopen>:
 8004d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d78:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004e24 <_swiopen+0xb0>
 8004d7c:	b097      	sub	sp, #92	; 0x5c
 8004d7e:	4607      	mov	r7, r0
 8004d80:	460e      	mov	r6, r1
 8004d82:	2500      	movs	r5, #0
 8004d84:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8004d88:	1c61      	adds	r1, r4, #1
 8004d8a:	d037      	beq.n	8004dfc <_swiopen+0x88>
 8004d8c:	3501      	adds	r5, #1
 8004d8e:	2d14      	cmp	r5, #20
 8004d90:	d1f8      	bne.n	8004d84 <_swiopen+0x10>
 8004d92:	f000 f947 	bl	8005024 <__errno>
 8004d96:	2318      	movs	r3, #24
 8004d98:	6003      	str	r3, [r0, #0]
 8004d9a:	f04f 34ff 	mov.w	r4, #4294967295
 8004d9e:	e03d      	b.n	8004e1c <_swiopen+0xa8>
 8004da0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8004da4:	f240 6301 	movw	r3, #1537	; 0x601
 8004da8:	07b2      	lsls	r2, r6, #30
 8004daa:	bf48      	it	mi
 8004dac:	f044 0402 	orrmi.w	r4, r4, #2
 8004db0:	421e      	tst	r6, r3
 8004db2:	bf18      	it	ne
 8004db4:	f044 0404 	orrne.w	r4, r4, #4
 8004db8:	0733      	lsls	r3, r6, #28
 8004dba:	bf48      	it	mi
 8004dbc:	f024 0404 	bicmi.w	r4, r4, #4
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	bf48      	it	mi
 8004dc4:	f044 0408 	orrmi.w	r4, r4, #8
 8004dc8:	9700      	str	r7, [sp, #0]
 8004dca:	f7fb fa01 	bl	80001d0 <strlen>
 8004dce:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8004dd2:	2401      	movs	r4, #1
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	beab      	bkpt	0x00ab
 8004dda:	4604      	mov	r4, r0
 8004ddc:	2c00      	cmp	r4, #0
 8004dde:	db08      	blt.n	8004df2 <_swiopen+0x7e>
 8004de0:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8004de4:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c8 3004 	str.w	r3, [r8, #4]
 8004dee:	462c      	mov	r4, r5
 8004df0:	e014      	b.n	8004e1c <_swiopen+0xa8>
 8004df2:	4620      	mov	r0, r4
 8004df4:	f7ff fe8c 	bl	8004b10 <error>
 8004df8:	4604      	mov	r4, r0
 8004dfa:	e00f      	b.n	8004e1c <_swiopen+0xa8>
 8004dfc:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8004e00:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004e04:	46e9      	mov	r9, sp
 8004e06:	d1cb      	bne.n	8004da0 <_swiopen+0x2c>
 8004e08:	4649      	mov	r1, r9
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f7ff ff95 	bl	8004d3a <_stat>
 8004e10:	3001      	adds	r0, #1
 8004e12:	d0c5      	beq.n	8004da0 <_swiopen+0x2c>
 8004e14:	f000 f906 	bl	8005024 <__errno>
 8004e18:	2311      	movs	r3, #17
 8004e1a:	6003      	str	r3, [r0, #0]
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	b017      	add	sp, #92	; 0x5c
 8004e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e24:	200003d8 	.word	0x200003d8

08004e28 <_get_semihosting_exts>:
 8004e28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	460f      	mov	r7, r1
 8004e30:	482a      	ldr	r0, [pc, #168]	; (8004edc <_get_semihosting_exts+0xb4>)
 8004e32:	2100      	movs	r1, #0
 8004e34:	4615      	mov	r5, r2
 8004e36:	f7ff ff9d 	bl	8004d74 <_swiopen>
 8004e3a:	462a      	mov	r2, r5
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4630      	mov	r0, r6
 8004e42:	f000 fa20 	bl	8005286 <memset>
 8004e46:	1c63      	adds	r3, r4, #1
 8004e48:	d016      	beq.n	8004e78 <_get_semihosting_exts+0x50>
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f7ff fe46 	bl	8004adc <findslot>
 8004e50:	f04f 090c 	mov.w	r9, #12
 8004e54:	4680      	mov	r8, r0
 8004e56:	4648      	mov	r0, r9
 8004e58:	4641      	mov	r1, r8
 8004e5a:	beab      	bkpt	0x00ab
 8004e5c:	4680      	mov	r8, r0
 8004e5e:	4640      	mov	r0, r8
 8004e60:	f7ff fe64 	bl	8004b2c <checkerror>
 8004e64:	2803      	cmp	r0, #3
 8004e66:	dd02      	ble.n	8004e6e <_get_semihosting_exts+0x46>
 8004e68:	1ec3      	subs	r3, r0, #3
 8004e6a:	42ab      	cmp	r3, r5
 8004e6c:	dc08      	bgt.n	8004e80 <_get_semihosting_exts+0x58>
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7ff ff0c 	bl	8004c8c <_close>
 8004e74:	f04f 34ff 	mov.w	r4, #4294967295
 8004e78:	4620      	mov	r0, r4
 8004e7a:	b003      	add	sp, #12
 8004e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e80:	2204      	movs	r2, #4
 8004e82:	eb0d 0102 	add.w	r1, sp, r2
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7ff fe65 	bl	8004b56 <_read>
 8004e8c:	2803      	cmp	r0, #3
 8004e8e:	ddee      	ble.n	8004e6e <_get_semihosting_exts+0x46>
 8004e90:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004e94:	2b53      	cmp	r3, #83	; 0x53
 8004e96:	d1ea      	bne.n	8004e6e <_get_semihosting_exts+0x46>
 8004e98:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004e9c:	2b48      	cmp	r3, #72	; 0x48
 8004e9e:	d1e6      	bne.n	8004e6e <_get_semihosting_exts+0x46>
 8004ea0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004ea4:	2b46      	cmp	r3, #70	; 0x46
 8004ea6:	d1e2      	bne.n	8004e6e <_get_semihosting_exts+0x46>
 8004ea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004eac:	2b42      	cmp	r3, #66	; 0x42
 8004eae:	d1de      	bne.n	8004e6e <_get_semihosting_exts+0x46>
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7ff fe6a 	bl	8004b8e <_swilseek>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	dbd7      	blt.n	8004e6e <_get_semihosting_exts+0x46>
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f7ff fe47 	bl	8004b56 <_read>
 8004ec8:	4605      	mov	r5, r0
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7ff fede 	bl	8004c8c <_close>
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f7ff fe2b 	bl	8004b2c <checkerror>
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	e7ce      	b.n	8004e78 <_get_semihosting_exts+0x50>
 8004eda:	bf00      	nop
 8004edc:	08008dc0 	.word	0x08008dc0

08004ee0 <initialise_semihosting_exts>:
 8004ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ee2:	4d0a      	ldr	r5, [pc, #40]	; (8004f0c <initialise_semihosting_exts+0x2c>)
 8004ee4:	4c0a      	ldr	r4, [pc, #40]	; (8004f10 <initialise_semihosting_exts+0x30>)
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	2201      	movs	r2, #1
 8004eea:	a801      	add	r0, sp, #4
 8004eec:	6029      	str	r1, [r5, #0]
 8004eee:	6022      	str	r2, [r4, #0]
 8004ef0:	f7ff ff9a 	bl	8004e28 <_get_semihosting_exts>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	dd07      	ble.n	8004f08 <initialise_semihosting_exts+0x28>
 8004ef8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004efc:	f003 0201 	and.w	r2, r3, #1
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	b003      	add	sp, #12
 8004f0a:	bd30      	pop	{r4, r5, pc}
 8004f0c:	200000dc 	.word	0x200000dc
 8004f10:	200000e0 	.word	0x200000e0

08004f14 <_has_ext_stdout_stderr>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	4c04      	ldr	r4, [pc, #16]	; (8004f28 <_has_ext_stdout_stderr+0x14>)
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da01      	bge.n	8004f22 <_has_ext_stdout_stderr+0xe>
 8004f1e:	f7ff ffdf 	bl	8004ee0 <initialise_semihosting_exts>
 8004f22:	6820      	ldr	r0, [r4, #0]
 8004f24:	bd10      	pop	{r4, pc}
 8004f26:	bf00      	nop
 8004f28:	200000e0 	.word	0x200000e0

08004f2c <initialise_monitor_handles>:
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	b085      	sub	sp, #20
 8004f32:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004fe4 <initialise_monitor_handles+0xb8>
 8004f36:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	2400      	movs	r4, #0
 8004f3e:	9303      	str	r3, [sp, #12]
 8004f40:	af01      	add	r7, sp, #4
 8004f42:	9402      	str	r4, [sp, #8]
 8004f44:	2501      	movs	r5, #1
 8004f46:	4628      	mov	r0, r5
 8004f48:	4639      	mov	r1, r7
 8004f4a:	beab      	bkpt	0x00ab
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004fe8 <initialise_monitor_handles+0xbc>
 8004f52:	4623      	mov	r3, r4
 8004f54:	4c20      	ldr	r4, [pc, #128]	; (8004fd8 <initialise_monitor_handles+0xac>)
 8004f56:	f8c8 5000 	str.w	r5, [r8]
 8004f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004f62:	3301      	adds	r3, #1
 8004f64:	2b14      	cmp	r3, #20
 8004f66:	d1fa      	bne.n	8004f5e <initialise_monitor_handles+0x32>
 8004f68:	f7ff ffd4 	bl	8004f14 <_has_ext_stdout_stderr>
 8004f6c:	4d1b      	ldr	r5, [pc, #108]	; (8004fdc <initialise_monitor_handles+0xb0>)
 8004f6e:	b1d0      	cbz	r0, 8004fa6 <initialise_monitor_handles+0x7a>
 8004f70:	f04f 0a03 	mov.w	sl, #3
 8004f74:	2304      	movs	r3, #4
 8004f76:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f7a:	2601      	movs	r6, #1
 8004f7c:	f8cd a00c 	str.w	sl, [sp, #12]
 8004f80:	9302      	str	r3, [sp, #8]
 8004f82:	4630      	mov	r0, r6
 8004f84:	4639      	mov	r1, r7
 8004f86:	beab      	bkpt	0x00ab
 8004f88:	4683      	mov	fp, r0
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <initialise_monitor_handles+0xb4>)
 8004f8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f90:	f8c3 b000 	str.w	fp, [r3]
 8004f94:	2308      	movs	r3, #8
 8004f96:	f8cd a00c 	str.w	sl, [sp, #12]
 8004f9a:	9302      	str	r3, [sp, #8]
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	beab      	bkpt	0x00ab
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	602e      	str	r6, [r5, #0]
 8004fa6:	682b      	ldr	r3, [r5, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	bf02      	ittt	eq
 8004fac:	4b0c      	ldreq	r3, [pc, #48]	; (8004fe0 <initialise_monitor_handles+0xb4>)
 8004fae:	681b      	ldreq	r3, [r3, #0]
 8004fb0:	602b      	streq	r3, [r5, #0]
 8004fb2:	2600      	movs	r6, #0
 8004fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	6066      	str	r6, [r4, #4]
 8004fbc:	f7ff ffaa 	bl	8004f14 <_has_ext_stdout_stderr>
 8004fc0:	b130      	cbz	r0, 8004fd0 <initialise_monitor_handles+0xa4>
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <initialise_monitor_handles+0xb4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004fca:	682b      	ldr	r3, [r5, #0]
 8004fcc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004fd0:	b005      	add	sp, #20
 8004fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200003d8 	.word	0x200003d8
 8004fdc:	200003cc 	.word	0x200003cc
 8004fe0:	200003d4 	.word	0x200003d4
 8004fe4:	08008dd6 	.word	0x08008dd6
 8004fe8:	200003d0 	.word	0x200003d0

08004fec <_isatty>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	f7ff fd75 	bl	8004adc <findslot>
 8004ff2:	2509      	movs	r5, #9
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	b920      	cbnz	r0, 8005002 <_isatty+0x16>
 8004ff8:	f000 f814 	bl	8005024 <__errno>
 8004ffc:	6005      	str	r5, [r0, #0]
 8004ffe:	4620      	mov	r0, r4
 8005000:	bd70      	pop	{r4, r5, r6, pc}
 8005002:	4628      	mov	r0, r5
 8005004:	4621      	mov	r1, r4
 8005006:	beab      	bkpt	0x00ab
 8005008:	4604      	mov	r4, r0
 800500a:	2c01      	cmp	r4, #1
 800500c:	d0f7      	beq.n	8004ffe <_isatty+0x12>
 800500e:	f000 f809 	bl	8005024 <__errno>
 8005012:	2400      	movs	r4, #0
 8005014:	4605      	mov	r5, r0
 8005016:	2613      	movs	r6, #19
 8005018:	4630      	mov	r0, r6
 800501a:	4621      	mov	r1, r4
 800501c:	beab      	bkpt	0x00ab
 800501e:	4606      	mov	r6, r0
 8005020:	602e      	str	r6, [r5, #0]
 8005022:	e7ec      	b.n	8004ffe <_isatty+0x12>

08005024 <__errno>:
 8005024:	4b01      	ldr	r3, [pc, #4]	; (800502c <__errno+0x8>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	200000e4 	.word	0x200000e4

08005030 <std>:
 8005030:	2300      	movs	r3, #0
 8005032:	b510      	push	{r4, lr}
 8005034:	4604      	mov	r4, r0
 8005036:	e9c0 3300 	strd	r3, r3, [r0]
 800503a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800503e:	6083      	str	r3, [r0, #8]
 8005040:	8181      	strh	r1, [r0, #12]
 8005042:	6643      	str	r3, [r0, #100]	; 0x64
 8005044:	81c2      	strh	r2, [r0, #14]
 8005046:	6183      	str	r3, [r0, #24]
 8005048:	4619      	mov	r1, r3
 800504a:	2208      	movs	r2, #8
 800504c:	305c      	adds	r0, #92	; 0x5c
 800504e:	f000 f91a 	bl	8005286 <memset>
 8005052:	4b05      	ldr	r3, [pc, #20]	; (8005068 <std+0x38>)
 8005054:	6263      	str	r3, [r4, #36]	; 0x24
 8005056:	4b05      	ldr	r3, [pc, #20]	; (800506c <std+0x3c>)
 8005058:	62a3      	str	r3, [r4, #40]	; 0x28
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <std+0x40>)
 800505c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <std+0x44>)
 8005060:	6224      	str	r4, [r4, #32]
 8005062:	6323      	str	r3, [r4, #48]	; 0x30
 8005064:	bd10      	pop	{r4, pc}
 8005066:	bf00      	nop
 8005068:	08005cb5 	.word	0x08005cb5
 800506c:	08005cd7 	.word	0x08005cd7
 8005070:	08005d0f 	.word	0x08005d0f
 8005074:	08005d33 	.word	0x08005d33

08005078 <_cleanup_r>:
 8005078:	4901      	ldr	r1, [pc, #4]	; (8005080 <_cleanup_r+0x8>)
 800507a:	f000 b8af 	b.w	80051dc <_fwalk_reent>
 800507e:	bf00      	nop
 8005080:	08006d81 	.word	0x08006d81

08005084 <__sfmoreglue>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	2268      	movs	r2, #104	; 0x68
 8005088:	1e4d      	subs	r5, r1, #1
 800508a:	4355      	muls	r5, r2
 800508c:	460e      	mov	r6, r1
 800508e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005092:	f000 f921 	bl	80052d8 <_malloc_r>
 8005096:	4604      	mov	r4, r0
 8005098:	b140      	cbz	r0, 80050ac <__sfmoreglue+0x28>
 800509a:	2100      	movs	r1, #0
 800509c:	e9c0 1600 	strd	r1, r6, [r0]
 80050a0:	300c      	adds	r0, #12
 80050a2:	60a0      	str	r0, [r4, #8]
 80050a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050a8:	f000 f8ed 	bl	8005286 <memset>
 80050ac:	4620      	mov	r0, r4
 80050ae:	bd70      	pop	{r4, r5, r6, pc}

080050b0 <__sfp_lock_acquire>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__sfp_lock_acquire+0x8>)
 80050b2:	f000 b8d8 	b.w	8005266 <__retarget_lock_acquire_recursive>
 80050b6:	bf00      	nop
 80050b8:	20000479 	.word	0x20000479

080050bc <__sfp_lock_release>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__sfp_lock_release+0x8>)
 80050be:	f000 b8d3 	b.w	8005268 <__retarget_lock_release_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000479 	.word	0x20000479

080050c8 <__sinit_lock_acquire>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__sinit_lock_acquire+0x8>)
 80050ca:	f000 b8cc 	b.w	8005266 <__retarget_lock_acquire_recursive>
 80050ce:	bf00      	nop
 80050d0:	2000047a 	.word	0x2000047a

080050d4 <__sinit_lock_release>:
 80050d4:	4801      	ldr	r0, [pc, #4]	; (80050dc <__sinit_lock_release+0x8>)
 80050d6:	f000 b8c7 	b.w	8005268 <__retarget_lock_release_recursive>
 80050da:	bf00      	nop
 80050dc:	2000047a 	.word	0x2000047a

080050e0 <__sinit>:
 80050e0:	b510      	push	{r4, lr}
 80050e2:	4604      	mov	r4, r0
 80050e4:	f7ff fff0 	bl	80050c8 <__sinit_lock_acquire>
 80050e8:	69a3      	ldr	r3, [r4, #24]
 80050ea:	b11b      	cbz	r3, 80050f4 <__sinit+0x14>
 80050ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f0:	f7ff bff0 	b.w	80050d4 <__sinit_lock_release>
 80050f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050f8:	6523      	str	r3, [r4, #80]	; 0x50
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <__sinit+0x68>)
 80050fc:	4a13      	ldr	r2, [pc, #76]	; (800514c <__sinit+0x6c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	62a2      	str	r2, [r4, #40]	; 0x28
 8005102:	42a3      	cmp	r3, r4
 8005104:	bf04      	itt	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	61a3      	streq	r3, [r4, #24]
 800510a:	4620      	mov	r0, r4
 800510c:	f000 f820 	bl	8005150 <__sfp>
 8005110:	6060      	str	r0, [r4, #4]
 8005112:	4620      	mov	r0, r4
 8005114:	f000 f81c 	bl	8005150 <__sfp>
 8005118:	60a0      	str	r0, [r4, #8]
 800511a:	4620      	mov	r0, r4
 800511c:	f000 f818 	bl	8005150 <__sfp>
 8005120:	2200      	movs	r2, #0
 8005122:	60e0      	str	r0, [r4, #12]
 8005124:	2104      	movs	r1, #4
 8005126:	6860      	ldr	r0, [r4, #4]
 8005128:	f7ff ff82 	bl	8005030 <std>
 800512c:	68a0      	ldr	r0, [r4, #8]
 800512e:	2201      	movs	r2, #1
 8005130:	2109      	movs	r1, #9
 8005132:	f7ff ff7d 	bl	8005030 <std>
 8005136:	68e0      	ldr	r0, [r4, #12]
 8005138:	2202      	movs	r2, #2
 800513a:	2112      	movs	r1, #18
 800513c:	f7ff ff78 	bl	8005030 <std>
 8005140:	2301      	movs	r3, #1
 8005142:	61a3      	str	r3, [r4, #24]
 8005144:	e7d2      	b.n	80050ec <__sinit+0xc>
 8005146:	bf00      	nop
 8005148:	08008e3c 	.word	0x08008e3c
 800514c:	08005079 	.word	0x08005079

08005150 <__sfp>:
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005152:	4607      	mov	r7, r0
 8005154:	f7ff ffac 	bl	80050b0 <__sfp_lock_acquire>
 8005158:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <__sfp+0x84>)
 800515a:	681e      	ldr	r6, [r3, #0]
 800515c:	69b3      	ldr	r3, [r6, #24]
 800515e:	b913      	cbnz	r3, 8005166 <__sfp+0x16>
 8005160:	4630      	mov	r0, r6
 8005162:	f7ff ffbd 	bl	80050e0 <__sinit>
 8005166:	3648      	adds	r6, #72	; 0x48
 8005168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800516c:	3b01      	subs	r3, #1
 800516e:	d503      	bpl.n	8005178 <__sfp+0x28>
 8005170:	6833      	ldr	r3, [r6, #0]
 8005172:	b30b      	cbz	r3, 80051b8 <__sfp+0x68>
 8005174:	6836      	ldr	r6, [r6, #0]
 8005176:	e7f7      	b.n	8005168 <__sfp+0x18>
 8005178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800517c:	b9d5      	cbnz	r5, 80051b4 <__sfp+0x64>
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <__sfp+0x88>)
 8005180:	60e3      	str	r3, [r4, #12]
 8005182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005186:	6665      	str	r5, [r4, #100]	; 0x64
 8005188:	f000 f86c 	bl	8005264 <__retarget_lock_init_recursive>
 800518c:	f7ff ff96 	bl	80050bc <__sfp_lock_release>
 8005190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005198:	6025      	str	r5, [r4, #0]
 800519a:	61a5      	str	r5, [r4, #24]
 800519c:	2208      	movs	r2, #8
 800519e:	4629      	mov	r1, r5
 80051a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051a4:	f000 f86f 	bl	8005286 <memset>
 80051a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051b0:	4620      	mov	r0, r4
 80051b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b4:	3468      	adds	r4, #104	; 0x68
 80051b6:	e7d9      	b.n	800516c <__sfp+0x1c>
 80051b8:	2104      	movs	r1, #4
 80051ba:	4638      	mov	r0, r7
 80051bc:	f7ff ff62 	bl	8005084 <__sfmoreglue>
 80051c0:	4604      	mov	r4, r0
 80051c2:	6030      	str	r0, [r6, #0]
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d1d5      	bne.n	8005174 <__sfp+0x24>
 80051c8:	f7ff ff78 	bl	80050bc <__sfp_lock_release>
 80051cc:	230c      	movs	r3, #12
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	e7ee      	b.n	80051b0 <__sfp+0x60>
 80051d2:	bf00      	nop
 80051d4:	08008e3c 	.word	0x08008e3c
 80051d8:	ffff0001 	.word	0xffff0001

080051dc <_fwalk_reent>:
 80051dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e0:	4606      	mov	r6, r0
 80051e2:	4688      	mov	r8, r1
 80051e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051e8:	2700      	movs	r7, #0
 80051ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051ee:	f1b9 0901 	subs.w	r9, r9, #1
 80051f2:	d505      	bpl.n	8005200 <_fwalk_reent+0x24>
 80051f4:	6824      	ldr	r4, [r4, #0]
 80051f6:	2c00      	cmp	r4, #0
 80051f8:	d1f7      	bne.n	80051ea <_fwalk_reent+0xe>
 80051fa:	4638      	mov	r0, r7
 80051fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005200:	89ab      	ldrh	r3, [r5, #12]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d907      	bls.n	8005216 <_fwalk_reent+0x3a>
 8005206:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800520a:	3301      	adds	r3, #1
 800520c:	d003      	beq.n	8005216 <_fwalk_reent+0x3a>
 800520e:	4629      	mov	r1, r5
 8005210:	4630      	mov	r0, r6
 8005212:	47c0      	blx	r8
 8005214:	4307      	orrs	r7, r0
 8005216:	3568      	adds	r5, #104	; 0x68
 8005218:	e7e9      	b.n	80051ee <_fwalk_reent+0x12>
	...

0800521c <__libc_init_array>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	4d0d      	ldr	r5, [pc, #52]	; (8005254 <__libc_init_array+0x38>)
 8005220:	4c0d      	ldr	r4, [pc, #52]	; (8005258 <__libc_init_array+0x3c>)
 8005222:	1b64      	subs	r4, r4, r5
 8005224:	10a4      	asrs	r4, r4, #2
 8005226:	2600      	movs	r6, #0
 8005228:	42a6      	cmp	r6, r4
 800522a:	d109      	bne.n	8005240 <__libc_init_array+0x24>
 800522c:	4d0b      	ldr	r5, [pc, #44]	; (800525c <__libc_init_array+0x40>)
 800522e:	4c0c      	ldr	r4, [pc, #48]	; (8005260 <__libc_init_array+0x44>)
 8005230:	f003 fd62 	bl	8008cf8 <_init>
 8005234:	1b64      	subs	r4, r4, r5
 8005236:	10a4      	asrs	r4, r4, #2
 8005238:	2600      	movs	r6, #0
 800523a:	42a6      	cmp	r6, r4
 800523c:	d105      	bne.n	800524a <__libc_init_array+0x2e>
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	f855 3b04 	ldr.w	r3, [r5], #4
 8005244:	4798      	blx	r3
 8005246:	3601      	adds	r6, #1
 8005248:	e7ee      	b.n	8005228 <__libc_init_array+0xc>
 800524a:	f855 3b04 	ldr.w	r3, [r5], #4
 800524e:	4798      	blx	r3
 8005250:	3601      	adds	r6, #1
 8005252:	e7f2      	b.n	800523a <__libc_init_array+0x1e>
 8005254:	080091f0 	.word	0x080091f0
 8005258:	080091f0 	.word	0x080091f0
 800525c:	080091f0 	.word	0x080091f0
 8005260:	080091f4 	.word	0x080091f4

08005264 <__retarget_lock_init_recursive>:
 8005264:	4770      	bx	lr

08005266 <__retarget_lock_acquire_recursive>:
 8005266:	4770      	bx	lr

08005268 <__retarget_lock_release_recursive>:
 8005268:	4770      	bx	lr

0800526a <memcpy>:
 800526a:	440a      	add	r2, r1
 800526c:	4291      	cmp	r1, r2
 800526e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005272:	d100      	bne.n	8005276 <memcpy+0xc>
 8005274:	4770      	bx	lr
 8005276:	b510      	push	{r4, lr}
 8005278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800527c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005280:	4291      	cmp	r1, r2
 8005282:	d1f9      	bne.n	8005278 <memcpy+0xe>
 8005284:	bd10      	pop	{r4, pc}

08005286 <memset>:
 8005286:	4402      	add	r2, r0
 8005288:	4603      	mov	r3, r0
 800528a:	4293      	cmp	r3, r2
 800528c:	d100      	bne.n	8005290 <memset+0xa>
 800528e:	4770      	bx	lr
 8005290:	f803 1b01 	strb.w	r1, [r3], #1
 8005294:	e7f9      	b.n	800528a <memset+0x4>
	...

08005298 <sbrk_aligned>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4e0e      	ldr	r6, [pc, #56]	; (80052d4 <sbrk_aligned+0x3c>)
 800529c:	460c      	mov	r4, r1
 800529e:	6831      	ldr	r1, [r6, #0]
 80052a0:	4605      	mov	r5, r0
 80052a2:	b911      	cbnz	r1, 80052aa <sbrk_aligned+0x12>
 80052a4:	f000 fcf6 	bl	8005c94 <_sbrk_r>
 80052a8:	6030      	str	r0, [r6, #0]
 80052aa:	4621      	mov	r1, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 fcf1 	bl	8005c94 <_sbrk_r>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	d00a      	beq.n	80052cc <sbrk_aligned+0x34>
 80052b6:	1cc4      	adds	r4, r0, #3
 80052b8:	f024 0403 	bic.w	r4, r4, #3
 80052bc:	42a0      	cmp	r0, r4
 80052be:	d007      	beq.n	80052d0 <sbrk_aligned+0x38>
 80052c0:	1a21      	subs	r1, r4, r0
 80052c2:	4628      	mov	r0, r5
 80052c4:	f000 fce6 	bl	8005c94 <_sbrk_r>
 80052c8:	3001      	adds	r0, #1
 80052ca:	d101      	bne.n	80052d0 <sbrk_aligned+0x38>
 80052cc:	f04f 34ff 	mov.w	r4, #4294967295
 80052d0:	4620      	mov	r0, r4
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	20000480 	.word	0x20000480

080052d8 <_malloc_r>:
 80052d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052dc:	1ccd      	adds	r5, r1, #3
 80052de:	f025 0503 	bic.w	r5, r5, #3
 80052e2:	3508      	adds	r5, #8
 80052e4:	2d0c      	cmp	r5, #12
 80052e6:	bf38      	it	cc
 80052e8:	250c      	movcc	r5, #12
 80052ea:	2d00      	cmp	r5, #0
 80052ec:	4607      	mov	r7, r0
 80052ee:	db01      	blt.n	80052f4 <_malloc_r+0x1c>
 80052f0:	42a9      	cmp	r1, r5
 80052f2:	d905      	bls.n	8005300 <_malloc_r+0x28>
 80052f4:	230c      	movs	r3, #12
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	2600      	movs	r6, #0
 80052fa:	4630      	mov	r0, r6
 80052fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005300:	4e2e      	ldr	r6, [pc, #184]	; (80053bc <_malloc_r+0xe4>)
 8005302:	f001 fe0f 	bl	8006f24 <__malloc_lock>
 8005306:	6833      	ldr	r3, [r6, #0]
 8005308:	461c      	mov	r4, r3
 800530a:	bb34      	cbnz	r4, 800535a <_malloc_r+0x82>
 800530c:	4629      	mov	r1, r5
 800530e:	4638      	mov	r0, r7
 8005310:	f7ff ffc2 	bl	8005298 <sbrk_aligned>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	4604      	mov	r4, r0
 8005318:	d14d      	bne.n	80053b6 <_malloc_r+0xde>
 800531a:	6834      	ldr	r4, [r6, #0]
 800531c:	4626      	mov	r6, r4
 800531e:	2e00      	cmp	r6, #0
 8005320:	d140      	bne.n	80053a4 <_malloc_r+0xcc>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	4631      	mov	r1, r6
 8005326:	4638      	mov	r0, r7
 8005328:	eb04 0803 	add.w	r8, r4, r3
 800532c:	f000 fcb2 	bl	8005c94 <_sbrk_r>
 8005330:	4580      	cmp	r8, r0
 8005332:	d13a      	bne.n	80053aa <_malloc_r+0xd2>
 8005334:	6821      	ldr	r1, [r4, #0]
 8005336:	3503      	adds	r5, #3
 8005338:	1a6d      	subs	r5, r5, r1
 800533a:	f025 0503 	bic.w	r5, r5, #3
 800533e:	3508      	adds	r5, #8
 8005340:	2d0c      	cmp	r5, #12
 8005342:	bf38      	it	cc
 8005344:	250c      	movcc	r5, #12
 8005346:	4629      	mov	r1, r5
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ffa5 	bl	8005298 <sbrk_aligned>
 800534e:	3001      	adds	r0, #1
 8005350:	d02b      	beq.n	80053aa <_malloc_r+0xd2>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	442b      	add	r3, r5
 8005356:	6023      	str	r3, [r4, #0]
 8005358:	e00e      	b.n	8005378 <_malloc_r+0xa0>
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	1b52      	subs	r2, r2, r5
 800535e:	d41e      	bmi.n	800539e <_malloc_r+0xc6>
 8005360:	2a0b      	cmp	r2, #11
 8005362:	d916      	bls.n	8005392 <_malloc_r+0xba>
 8005364:	1961      	adds	r1, r4, r5
 8005366:	42a3      	cmp	r3, r4
 8005368:	6025      	str	r5, [r4, #0]
 800536a:	bf18      	it	ne
 800536c:	6059      	strne	r1, [r3, #4]
 800536e:	6863      	ldr	r3, [r4, #4]
 8005370:	bf08      	it	eq
 8005372:	6031      	streq	r1, [r6, #0]
 8005374:	5162      	str	r2, [r4, r5]
 8005376:	604b      	str	r3, [r1, #4]
 8005378:	4638      	mov	r0, r7
 800537a:	f104 060b 	add.w	r6, r4, #11
 800537e:	f001 fdd7 	bl	8006f30 <__malloc_unlock>
 8005382:	f026 0607 	bic.w	r6, r6, #7
 8005386:	1d23      	adds	r3, r4, #4
 8005388:	1af2      	subs	r2, r6, r3
 800538a:	d0b6      	beq.n	80052fa <_malloc_r+0x22>
 800538c:	1b9b      	subs	r3, r3, r6
 800538e:	50a3      	str	r3, [r4, r2]
 8005390:	e7b3      	b.n	80052fa <_malloc_r+0x22>
 8005392:	6862      	ldr	r2, [r4, #4]
 8005394:	42a3      	cmp	r3, r4
 8005396:	bf0c      	ite	eq
 8005398:	6032      	streq	r2, [r6, #0]
 800539a:	605a      	strne	r2, [r3, #4]
 800539c:	e7ec      	b.n	8005378 <_malloc_r+0xa0>
 800539e:	4623      	mov	r3, r4
 80053a0:	6864      	ldr	r4, [r4, #4]
 80053a2:	e7b2      	b.n	800530a <_malloc_r+0x32>
 80053a4:	4634      	mov	r4, r6
 80053a6:	6876      	ldr	r6, [r6, #4]
 80053a8:	e7b9      	b.n	800531e <_malloc_r+0x46>
 80053aa:	230c      	movs	r3, #12
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4638      	mov	r0, r7
 80053b0:	f001 fdbe 	bl	8006f30 <__malloc_unlock>
 80053b4:	e7a1      	b.n	80052fa <_malloc_r+0x22>
 80053b6:	6025      	str	r5, [r4, #0]
 80053b8:	e7de      	b.n	8005378 <_malloc_r+0xa0>
 80053ba:	bf00      	nop
 80053bc:	2000047c 	.word	0x2000047c

080053c0 <__cvt>:
 80053c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053c4:	ec55 4b10 	vmov	r4, r5, d0
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	460e      	mov	r6, r1
 80053cc:	4619      	mov	r1, r3
 80053ce:	462b      	mov	r3, r5
 80053d0:	bfbb      	ittet	lt
 80053d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053d6:	461d      	movlt	r5, r3
 80053d8:	2300      	movge	r3, #0
 80053da:	232d      	movlt	r3, #45	; 0x2d
 80053dc:	700b      	strb	r3, [r1, #0]
 80053de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053e4:	4691      	mov	r9, r2
 80053e6:	f023 0820 	bic.w	r8, r3, #32
 80053ea:	bfbc      	itt	lt
 80053ec:	4622      	movlt	r2, r4
 80053ee:	4614      	movlt	r4, r2
 80053f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053f4:	d005      	beq.n	8005402 <__cvt+0x42>
 80053f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053fa:	d100      	bne.n	80053fe <__cvt+0x3e>
 80053fc:	3601      	adds	r6, #1
 80053fe:	2102      	movs	r1, #2
 8005400:	e000      	b.n	8005404 <__cvt+0x44>
 8005402:	2103      	movs	r1, #3
 8005404:	ab03      	add	r3, sp, #12
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	ab02      	add	r3, sp, #8
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	ec45 4b10 	vmov	d0, r4, r5
 8005410:	4653      	mov	r3, sl
 8005412:	4632      	mov	r2, r6
 8005414:	f000 fe40 	bl	8006098 <_dtoa_r>
 8005418:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800541c:	4607      	mov	r7, r0
 800541e:	d102      	bne.n	8005426 <__cvt+0x66>
 8005420:	f019 0f01 	tst.w	r9, #1
 8005424:	d022      	beq.n	800546c <__cvt+0xac>
 8005426:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800542a:	eb07 0906 	add.w	r9, r7, r6
 800542e:	d110      	bne.n	8005452 <__cvt+0x92>
 8005430:	783b      	ldrb	r3, [r7, #0]
 8005432:	2b30      	cmp	r3, #48	; 0x30
 8005434:	d10a      	bne.n	800544c <__cvt+0x8c>
 8005436:	2200      	movs	r2, #0
 8005438:	2300      	movs	r3, #0
 800543a:	4620      	mov	r0, r4
 800543c:	4629      	mov	r1, r5
 800543e:	f7fb fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 8005442:	b918      	cbnz	r0, 800544c <__cvt+0x8c>
 8005444:	f1c6 0601 	rsb	r6, r6, #1
 8005448:	f8ca 6000 	str.w	r6, [sl]
 800544c:	f8da 3000 	ldr.w	r3, [sl]
 8005450:	4499      	add	r9, r3
 8005452:	2200      	movs	r2, #0
 8005454:	2300      	movs	r3, #0
 8005456:	4620      	mov	r0, r4
 8005458:	4629      	mov	r1, r5
 800545a:	f7fb fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800545e:	b108      	cbz	r0, 8005464 <__cvt+0xa4>
 8005460:	f8cd 900c 	str.w	r9, [sp, #12]
 8005464:	2230      	movs	r2, #48	; 0x30
 8005466:	9b03      	ldr	r3, [sp, #12]
 8005468:	454b      	cmp	r3, r9
 800546a:	d307      	bcc.n	800547c <__cvt+0xbc>
 800546c:	9b03      	ldr	r3, [sp, #12]
 800546e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005470:	1bdb      	subs	r3, r3, r7
 8005472:	4638      	mov	r0, r7
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	b004      	add	sp, #16
 8005478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800547c:	1c59      	adds	r1, r3, #1
 800547e:	9103      	str	r1, [sp, #12]
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	e7f0      	b.n	8005466 <__cvt+0xa6>

08005484 <__exponent>:
 8005484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005486:	4603      	mov	r3, r0
 8005488:	2900      	cmp	r1, #0
 800548a:	bfb8      	it	lt
 800548c:	4249      	neglt	r1, r1
 800548e:	f803 2b02 	strb.w	r2, [r3], #2
 8005492:	bfb4      	ite	lt
 8005494:	222d      	movlt	r2, #45	; 0x2d
 8005496:	222b      	movge	r2, #43	; 0x2b
 8005498:	2909      	cmp	r1, #9
 800549a:	7042      	strb	r2, [r0, #1]
 800549c:	dd2a      	ble.n	80054f4 <__exponent+0x70>
 800549e:	f10d 0407 	add.w	r4, sp, #7
 80054a2:	46a4      	mov	ip, r4
 80054a4:	270a      	movs	r7, #10
 80054a6:	46a6      	mov	lr, r4
 80054a8:	460a      	mov	r2, r1
 80054aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80054ae:	fb07 1516 	mls	r5, r7, r6, r1
 80054b2:	3530      	adds	r5, #48	; 0x30
 80054b4:	2a63      	cmp	r2, #99	; 0x63
 80054b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80054ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80054be:	4631      	mov	r1, r6
 80054c0:	dcf1      	bgt.n	80054a6 <__exponent+0x22>
 80054c2:	3130      	adds	r1, #48	; 0x30
 80054c4:	f1ae 0502 	sub.w	r5, lr, #2
 80054c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054cc:	1c44      	adds	r4, r0, #1
 80054ce:	4629      	mov	r1, r5
 80054d0:	4561      	cmp	r1, ip
 80054d2:	d30a      	bcc.n	80054ea <__exponent+0x66>
 80054d4:	f10d 0209 	add.w	r2, sp, #9
 80054d8:	eba2 020e 	sub.w	r2, r2, lr
 80054dc:	4565      	cmp	r5, ip
 80054de:	bf88      	it	hi
 80054e0:	2200      	movhi	r2, #0
 80054e2:	4413      	add	r3, r2
 80054e4:	1a18      	subs	r0, r3, r0
 80054e6:	b003      	add	sp, #12
 80054e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80054f2:	e7ed      	b.n	80054d0 <__exponent+0x4c>
 80054f4:	2330      	movs	r3, #48	; 0x30
 80054f6:	3130      	adds	r1, #48	; 0x30
 80054f8:	7083      	strb	r3, [r0, #2]
 80054fa:	70c1      	strb	r1, [r0, #3]
 80054fc:	1d03      	adds	r3, r0, #4
 80054fe:	e7f1      	b.n	80054e4 <__exponent+0x60>

08005500 <_printf_float>:
 8005500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	ed2d 8b02 	vpush	{d8}
 8005508:	b08d      	sub	sp, #52	; 0x34
 800550a:	460c      	mov	r4, r1
 800550c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005510:	4616      	mov	r6, r2
 8005512:	461f      	mov	r7, r3
 8005514:	4605      	mov	r5, r0
 8005516:	f001 fc81 	bl	8006e1c <_localeconv_r>
 800551a:	f8d0 a000 	ldr.w	sl, [r0]
 800551e:	4650      	mov	r0, sl
 8005520:	f7fa fe56 	bl	80001d0 <strlen>
 8005524:	2300      	movs	r3, #0
 8005526:	930a      	str	r3, [sp, #40]	; 0x28
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	9305      	str	r3, [sp, #20]
 800552c:	f8d8 3000 	ldr.w	r3, [r8]
 8005530:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005534:	3307      	adds	r3, #7
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	f103 0208 	add.w	r2, r3, #8
 800553e:	f8c8 2000 	str.w	r2, [r8]
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800554a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800554e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005552:	9307      	str	r3, [sp, #28]
 8005554:	f8cd 8018 	str.w	r8, [sp, #24]
 8005558:	ee08 0a10 	vmov	s16, r0
 800555c:	4b9f      	ldr	r3, [pc, #636]	; (80057dc <_printf_float+0x2dc>)
 800555e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005562:	f04f 32ff 	mov.w	r2, #4294967295
 8005566:	f7fb fae1 	bl	8000b2c <__aeabi_dcmpun>
 800556a:	bb88      	cbnz	r0, 80055d0 <_printf_float+0xd0>
 800556c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005570:	4b9a      	ldr	r3, [pc, #616]	; (80057dc <_printf_float+0x2dc>)
 8005572:	f04f 32ff 	mov.w	r2, #4294967295
 8005576:	f7fb fabb 	bl	8000af0 <__aeabi_dcmple>
 800557a:	bb48      	cbnz	r0, 80055d0 <_printf_float+0xd0>
 800557c:	2200      	movs	r2, #0
 800557e:	2300      	movs	r3, #0
 8005580:	4640      	mov	r0, r8
 8005582:	4649      	mov	r1, r9
 8005584:	f7fb faaa 	bl	8000adc <__aeabi_dcmplt>
 8005588:	b110      	cbz	r0, 8005590 <_printf_float+0x90>
 800558a:	232d      	movs	r3, #45	; 0x2d
 800558c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005590:	4b93      	ldr	r3, [pc, #588]	; (80057e0 <_printf_float+0x2e0>)
 8005592:	4894      	ldr	r0, [pc, #592]	; (80057e4 <_printf_float+0x2e4>)
 8005594:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005598:	bf94      	ite	ls
 800559a:	4698      	movls	r8, r3
 800559c:	4680      	movhi	r8, r0
 800559e:	2303      	movs	r3, #3
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	9b05      	ldr	r3, [sp, #20]
 80055a4:	f023 0204 	bic.w	r2, r3, #4
 80055a8:	6022      	str	r2, [r4, #0]
 80055aa:	f04f 0900 	mov.w	r9, #0
 80055ae:	9700      	str	r7, [sp, #0]
 80055b0:	4633      	mov	r3, r6
 80055b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80055b4:	4621      	mov	r1, r4
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 f9d8 	bl	800596c <_printf_common>
 80055bc:	3001      	adds	r0, #1
 80055be:	f040 8090 	bne.w	80056e2 <_printf_float+0x1e2>
 80055c2:	f04f 30ff 	mov.w	r0, #4294967295
 80055c6:	b00d      	add	sp, #52	; 0x34
 80055c8:	ecbd 8b02 	vpop	{d8}
 80055cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d0:	4642      	mov	r2, r8
 80055d2:	464b      	mov	r3, r9
 80055d4:	4640      	mov	r0, r8
 80055d6:	4649      	mov	r1, r9
 80055d8:	f7fb faa8 	bl	8000b2c <__aeabi_dcmpun>
 80055dc:	b140      	cbz	r0, 80055f0 <_printf_float+0xf0>
 80055de:	464b      	mov	r3, r9
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bfbc      	itt	lt
 80055e4:	232d      	movlt	r3, #45	; 0x2d
 80055e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055ea:	487f      	ldr	r0, [pc, #508]	; (80057e8 <_printf_float+0x2e8>)
 80055ec:	4b7f      	ldr	r3, [pc, #508]	; (80057ec <_printf_float+0x2ec>)
 80055ee:	e7d1      	b.n	8005594 <_printf_float+0x94>
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80055f6:	9206      	str	r2, [sp, #24]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	d13f      	bne.n	800567c <_printf_float+0x17c>
 80055fc:	2306      	movs	r3, #6
 80055fe:	6063      	str	r3, [r4, #4]
 8005600:	9b05      	ldr	r3, [sp, #20]
 8005602:	6861      	ldr	r1, [r4, #4]
 8005604:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005608:	2300      	movs	r3, #0
 800560a:	9303      	str	r3, [sp, #12]
 800560c:	ab0a      	add	r3, sp, #40	; 0x28
 800560e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005612:	ab09      	add	r3, sp, #36	; 0x24
 8005614:	ec49 8b10 	vmov	d0, r8, r9
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	6022      	str	r2, [r4, #0]
 800561c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005620:	4628      	mov	r0, r5
 8005622:	f7ff fecd 	bl	80053c0 <__cvt>
 8005626:	9b06      	ldr	r3, [sp, #24]
 8005628:	9909      	ldr	r1, [sp, #36]	; 0x24
 800562a:	2b47      	cmp	r3, #71	; 0x47
 800562c:	4680      	mov	r8, r0
 800562e:	d108      	bne.n	8005642 <_printf_float+0x142>
 8005630:	1cc8      	adds	r0, r1, #3
 8005632:	db02      	blt.n	800563a <_printf_float+0x13a>
 8005634:	6863      	ldr	r3, [r4, #4]
 8005636:	4299      	cmp	r1, r3
 8005638:	dd41      	ble.n	80056be <_printf_float+0x1be>
 800563a:	f1ab 0b02 	sub.w	fp, fp, #2
 800563e:	fa5f fb8b 	uxtb.w	fp, fp
 8005642:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005646:	d820      	bhi.n	800568a <_printf_float+0x18a>
 8005648:	3901      	subs	r1, #1
 800564a:	465a      	mov	r2, fp
 800564c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005650:	9109      	str	r1, [sp, #36]	; 0x24
 8005652:	f7ff ff17 	bl	8005484 <__exponent>
 8005656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005658:	1813      	adds	r3, r2, r0
 800565a:	2a01      	cmp	r2, #1
 800565c:	4681      	mov	r9, r0
 800565e:	6123      	str	r3, [r4, #16]
 8005660:	dc02      	bgt.n	8005668 <_printf_float+0x168>
 8005662:	6822      	ldr	r2, [r4, #0]
 8005664:	07d2      	lsls	r2, r2, #31
 8005666:	d501      	bpl.n	800566c <_printf_float+0x16c>
 8005668:	3301      	adds	r3, #1
 800566a:	6123      	str	r3, [r4, #16]
 800566c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005670:	2b00      	cmp	r3, #0
 8005672:	d09c      	beq.n	80055ae <_printf_float+0xae>
 8005674:	232d      	movs	r3, #45	; 0x2d
 8005676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567a:	e798      	b.n	80055ae <_printf_float+0xae>
 800567c:	9a06      	ldr	r2, [sp, #24]
 800567e:	2a47      	cmp	r2, #71	; 0x47
 8005680:	d1be      	bne.n	8005600 <_printf_float+0x100>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1bc      	bne.n	8005600 <_printf_float+0x100>
 8005686:	2301      	movs	r3, #1
 8005688:	e7b9      	b.n	80055fe <_printf_float+0xfe>
 800568a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800568e:	d118      	bne.n	80056c2 <_printf_float+0x1c2>
 8005690:	2900      	cmp	r1, #0
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	dd0b      	ble.n	80056ae <_printf_float+0x1ae>
 8005696:	6121      	str	r1, [r4, #16]
 8005698:	b913      	cbnz	r3, 80056a0 <_printf_float+0x1a0>
 800569a:	6822      	ldr	r2, [r4, #0]
 800569c:	07d0      	lsls	r0, r2, #31
 800569e:	d502      	bpl.n	80056a6 <_printf_float+0x1a6>
 80056a0:	3301      	adds	r3, #1
 80056a2:	440b      	add	r3, r1
 80056a4:	6123      	str	r3, [r4, #16]
 80056a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80056a8:	f04f 0900 	mov.w	r9, #0
 80056ac:	e7de      	b.n	800566c <_printf_float+0x16c>
 80056ae:	b913      	cbnz	r3, 80056b6 <_printf_float+0x1b6>
 80056b0:	6822      	ldr	r2, [r4, #0]
 80056b2:	07d2      	lsls	r2, r2, #31
 80056b4:	d501      	bpl.n	80056ba <_printf_float+0x1ba>
 80056b6:	3302      	adds	r3, #2
 80056b8:	e7f4      	b.n	80056a4 <_printf_float+0x1a4>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e7f2      	b.n	80056a4 <_printf_float+0x1a4>
 80056be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c4:	4299      	cmp	r1, r3
 80056c6:	db05      	blt.n	80056d4 <_printf_float+0x1d4>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	6121      	str	r1, [r4, #16]
 80056cc:	07d8      	lsls	r0, r3, #31
 80056ce:	d5ea      	bpl.n	80056a6 <_printf_float+0x1a6>
 80056d0:	1c4b      	adds	r3, r1, #1
 80056d2:	e7e7      	b.n	80056a4 <_printf_float+0x1a4>
 80056d4:	2900      	cmp	r1, #0
 80056d6:	bfd4      	ite	le
 80056d8:	f1c1 0202 	rsble	r2, r1, #2
 80056dc:	2201      	movgt	r2, #1
 80056de:	4413      	add	r3, r2
 80056e0:	e7e0      	b.n	80056a4 <_printf_float+0x1a4>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	055a      	lsls	r2, r3, #21
 80056e6:	d407      	bmi.n	80056f8 <_printf_float+0x1f8>
 80056e8:	6923      	ldr	r3, [r4, #16]
 80056ea:	4642      	mov	r2, r8
 80056ec:	4631      	mov	r1, r6
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	d12c      	bne.n	8005750 <_printf_float+0x250>
 80056f6:	e764      	b.n	80055c2 <_printf_float+0xc2>
 80056f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056fc:	f240 80e0 	bls.w	80058c0 <_printf_float+0x3c0>
 8005700:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005704:	2200      	movs	r2, #0
 8005706:	2300      	movs	r3, #0
 8005708:	f7fb f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 800570c:	2800      	cmp	r0, #0
 800570e:	d034      	beq.n	800577a <_printf_float+0x27a>
 8005710:	4a37      	ldr	r2, [pc, #220]	; (80057f0 <_printf_float+0x2f0>)
 8005712:	2301      	movs	r3, #1
 8005714:	4631      	mov	r1, r6
 8005716:	4628      	mov	r0, r5
 8005718:	47b8      	blx	r7
 800571a:	3001      	adds	r0, #1
 800571c:	f43f af51 	beq.w	80055c2 <_printf_float+0xc2>
 8005720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005724:	429a      	cmp	r2, r3
 8005726:	db02      	blt.n	800572e <_printf_float+0x22e>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	07d8      	lsls	r0, r3, #31
 800572c:	d510      	bpl.n	8005750 <_printf_float+0x250>
 800572e:	ee18 3a10 	vmov	r3, s16
 8005732:	4652      	mov	r2, sl
 8005734:	4631      	mov	r1, r6
 8005736:	4628      	mov	r0, r5
 8005738:	47b8      	blx	r7
 800573a:	3001      	adds	r0, #1
 800573c:	f43f af41 	beq.w	80055c2 <_printf_float+0xc2>
 8005740:	f04f 0800 	mov.w	r8, #0
 8005744:	f104 091a 	add.w	r9, r4, #26
 8005748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574a:	3b01      	subs	r3, #1
 800574c:	4543      	cmp	r3, r8
 800574e:	dc09      	bgt.n	8005764 <_printf_float+0x264>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	079b      	lsls	r3, r3, #30
 8005754:	f100 8105 	bmi.w	8005962 <_printf_float+0x462>
 8005758:	68e0      	ldr	r0, [r4, #12]
 800575a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800575c:	4298      	cmp	r0, r3
 800575e:	bfb8      	it	lt
 8005760:	4618      	movlt	r0, r3
 8005762:	e730      	b.n	80055c6 <_printf_float+0xc6>
 8005764:	2301      	movs	r3, #1
 8005766:	464a      	mov	r2, r9
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	f43f af27 	beq.w	80055c2 <_printf_float+0xc2>
 8005774:	f108 0801 	add.w	r8, r8, #1
 8005778:	e7e6      	b.n	8005748 <_printf_float+0x248>
 800577a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	dc39      	bgt.n	80057f4 <_printf_float+0x2f4>
 8005780:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <_printf_float+0x2f0>)
 8005782:	2301      	movs	r3, #1
 8005784:	4631      	mov	r1, r6
 8005786:	4628      	mov	r0, r5
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	f43f af19 	beq.w	80055c2 <_printf_float+0xc2>
 8005790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005794:	4313      	orrs	r3, r2
 8005796:	d102      	bne.n	800579e <_printf_float+0x29e>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	07d9      	lsls	r1, r3, #31
 800579c:	d5d8      	bpl.n	8005750 <_printf_float+0x250>
 800579e:	ee18 3a10 	vmov	r3, s16
 80057a2:	4652      	mov	r2, sl
 80057a4:	4631      	mov	r1, r6
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b8      	blx	r7
 80057aa:	3001      	adds	r0, #1
 80057ac:	f43f af09 	beq.w	80055c2 <_printf_float+0xc2>
 80057b0:	f04f 0900 	mov.w	r9, #0
 80057b4:	f104 0a1a 	add.w	sl, r4, #26
 80057b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ba:	425b      	negs	r3, r3
 80057bc:	454b      	cmp	r3, r9
 80057be:	dc01      	bgt.n	80057c4 <_printf_float+0x2c4>
 80057c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c2:	e792      	b.n	80056ea <_printf_float+0x1ea>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4652      	mov	r2, sl
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f aef7 	beq.w	80055c2 <_printf_float+0xc2>
 80057d4:	f109 0901 	add.w	r9, r9, #1
 80057d8:	e7ee      	b.n	80057b8 <_printf_float+0x2b8>
 80057da:	bf00      	nop
 80057dc:	7fefffff 	.word	0x7fefffff
 80057e0:	08008e40 	.word	0x08008e40
 80057e4:	08008e44 	.word	0x08008e44
 80057e8:	08008e4c 	.word	0x08008e4c
 80057ec:	08008e48 	.word	0x08008e48
 80057f0:	08008e50 	.word	0x08008e50
 80057f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057f8:	429a      	cmp	r2, r3
 80057fa:	bfa8      	it	ge
 80057fc:	461a      	movge	r2, r3
 80057fe:	2a00      	cmp	r2, #0
 8005800:	4691      	mov	r9, r2
 8005802:	dc37      	bgt.n	8005874 <_printf_float+0x374>
 8005804:	f04f 0b00 	mov.w	fp, #0
 8005808:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800580c:	f104 021a 	add.w	r2, r4, #26
 8005810:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005812:	9305      	str	r3, [sp, #20]
 8005814:	eba3 0309 	sub.w	r3, r3, r9
 8005818:	455b      	cmp	r3, fp
 800581a:	dc33      	bgt.n	8005884 <_printf_float+0x384>
 800581c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005820:	429a      	cmp	r2, r3
 8005822:	db3b      	blt.n	800589c <_printf_float+0x39c>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	07da      	lsls	r2, r3, #31
 8005828:	d438      	bmi.n	800589c <_printf_float+0x39c>
 800582a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582c:	9a05      	ldr	r2, [sp, #20]
 800582e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005830:	1a9a      	subs	r2, r3, r2
 8005832:	eba3 0901 	sub.w	r9, r3, r1
 8005836:	4591      	cmp	r9, r2
 8005838:	bfa8      	it	ge
 800583a:	4691      	movge	r9, r2
 800583c:	f1b9 0f00 	cmp.w	r9, #0
 8005840:	dc35      	bgt.n	80058ae <_printf_float+0x3ae>
 8005842:	f04f 0800 	mov.w	r8, #0
 8005846:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800584a:	f104 0a1a 	add.w	sl, r4, #26
 800584e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	eba3 0309 	sub.w	r3, r3, r9
 8005858:	4543      	cmp	r3, r8
 800585a:	f77f af79 	ble.w	8005750 <_printf_float+0x250>
 800585e:	2301      	movs	r3, #1
 8005860:	4652      	mov	r2, sl
 8005862:	4631      	mov	r1, r6
 8005864:	4628      	mov	r0, r5
 8005866:	47b8      	blx	r7
 8005868:	3001      	adds	r0, #1
 800586a:	f43f aeaa 	beq.w	80055c2 <_printf_float+0xc2>
 800586e:	f108 0801 	add.w	r8, r8, #1
 8005872:	e7ec      	b.n	800584e <_printf_float+0x34e>
 8005874:	4613      	mov	r3, r2
 8005876:	4631      	mov	r1, r6
 8005878:	4642      	mov	r2, r8
 800587a:	4628      	mov	r0, r5
 800587c:	47b8      	blx	r7
 800587e:	3001      	adds	r0, #1
 8005880:	d1c0      	bne.n	8005804 <_printf_float+0x304>
 8005882:	e69e      	b.n	80055c2 <_printf_float+0xc2>
 8005884:	2301      	movs	r3, #1
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	9205      	str	r2, [sp, #20]
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f43f ae97 	beq.w	80055c2 <_printf_float+0xc2>
 8005894:	9a05      	ldr	r2, [sp, #20]
 8005896:	f10b 0b01 	add.w	fp, fp, #1
 800589a:	e7b9      	b.n	8005810 <_printf_float+0x310>
 800589c:	ee18 3a10 	vmov	r3, s16
 80058a0:	4652      	mov	r2, sl
 80058a2:	4631      	mov	r1, r6
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b8      	blx	r7
 80058a8:	3001      	adds	r0, #1
 80058aa:	d1be      	bne.n	800582a <_printf_float+0x32a>
 80058ac:	e689      	b.n	80055c2 <_printf_float+0xc2>
 80058ae:	9a05      	ldr	r2, [sp, #20]
 80058b0:	464b      	mov	r3, r9
 80058b2:	4442      	add	r2, r8
 80058b4:	4631      	mov	r1, r6
 80058b6:	4628      	mov	r0, r5
 80058b8:	47b8      	blx	r7
 80058ba:	3001      	adds	r0, #1
 80058bc:	d1c1      	bne.n	8005842 <_printf_float+0x342>
 80058be:	e680      	b.n	80055c2 <_printf_float+0xc2>
 80058c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058c2:	2a01      	cmp	r2, #1
 80058c4:	dc01      	bgt.n	80058ca <_printf_float+0x3ca>
 80058c6:	07db      	lsls	r3, r3, #31
 80058c8:	d538      	bpl.n	800593c <_printf_float+0x43c>
 80058ca:	2301      	movs	r3, #1
 80058cc:	4642      	mov	r2, r8
 80058ce:	4631      	mov	r1, r6
 80058d0:	4628      	mov	r0, r5
 80058d2:	47b8      	blx	r7
 80058d4:	3001      	adds	r0, #1
 80058d6:	f43f ae74 	beq.w	80055c2 <_printf_float+0xc2>
 80058da:	ee18 3a10 	vmov	r3, s16
 80058de:	4652      	mov	r2, sl
 80058e0:	4631      	mov	r1, r6
 80058e2:	4628      	mov	r0, r5
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	f43f ae6b 	beq.w	80055c2 <_printf_float+0xc2>
 80058ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058f0:	2200      	movs	r2, #0
 80058f2:	2300      	movs	r3, #0
 80058f4:	f7fb f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80058f8:	b9d8      	cbnz	r0, 8005932 <_printf_float+0x432>
 80058fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058fc:	f108 0201 	add.w	r2, r8, #1
 8005900:	3b01      	subs	r3, #1
 8005902:	4631      	mov	r1, r6
 8005904:	4628      	mov	r0, r5
 8005906:	47b8      	blx	r7
 8005908:	3001      	adds	r0, #1
 800590a:	d10e      	bne.n	800592a <_printf_float+0x42a>
 800590c:	e659      	b.n	80055c2 <_printf_float+0xc2>
 800590e:	2301      	movs	r3, #1
 8005910:	4652      	mov	r2, sl
 8005912:	4631      	mov	r1, r6
 8005914:	4628      	mov	r0, r5
 8005916:	47b8      	blx	r7
 8005918:	3001      	adds	r0, #1
 800591a:	f43f ae52 	beq.w	80055c2 <_printf_float+0xc2>
 800591e:	f108 0801 	add.w	r8, r8, #1
 8005922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005924:	3b01      	subs	r3, #1
 8005926:	4543      	cmp	r3, r8
 8005928:	dcf1      	bgt.n	800590e <_printf_float+0x40e>
 800592a:	464b      	mov	r3, r9
 800592c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005930:	e6dc      	b.n	80056ec <_printf_float+0x1ec>
 8005932:	f04f 0800 	mov.w	r8, #0
 8005936:	f104 0a1a 	add.w	sl, r4, #26
 800593a:	e7f2      	b.n	8005922 <_printf_float+0x422>
 800593c:	2301      	movs	r3, #1
 800593e:	4642      	mov	r2, r8
 8005940:	e7df      	b.n	8005902 <_printf_float+0x402>
 8005942:	2301      	movs	r3, #1
 8005944:	464a      	mov	r2, r9
 8005946:	4631      	mov	r1, r6
 8005948:	4628      	mov	r0, r5
 800594a:	47b8      	blx	r7
 800594c:	3001      	adds	r0, #1
 800594e:	f43f ae38 	beq.w	80055c2 <_printf_float+0xc2>
 8005952:	f108 0801 	add.w	r8, r8, #1
 8005956:	68e3      	ldr	r3, [r4, #12]
 8005958:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800595a:	1a5b      	subs	r3, r3, r1
 800595c:	4543      	cmp	r3, r8
 800595e:	dcf0      	bgt.n	8005942 <_printf_float+0x442>
 8005960:	e6fa      	b.n	8005758 <_printf_float+0x258>
 8005962:	f04f 0800 	mov.w	r8, #0
 8005966:	f104 0919 	add.w	r9, r4, #25
 800596a:	e7f4      	b.n	8005956 <_printf_float+0x456>

0800596c <_printf_common>:
 800596c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005970:	4616      	mov	r6, r2
 8005972:	4699      	mov	r9, r3
 8005974:	688a      	ldr	r2, [r1, #8]
 8005976:	690b      	ldr	r3, [r1, #16]
 8005978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800597c:	4293      	cmp	r3, r2
 800597e:	bfb8      	it	lt
 8005980:	4613      	movlt	r3, r2
 8005982:	6033      	str	r3, [r6, #0]
 8005984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005988:	4607      	mov	r7, r0
 800598a:	460c      	mov	r4, r1
 800598c:	b10a      	cbz	r2, 8005992 <_printf_common+0x26>
 800598e:	3301      	adds	r3, #1
 8005990:	6033      	str	r3, [r6, #0]
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	0699      	lsls	r1, r3, #26
 8005996:	bf42      	ittt	mi
 8005998:	6833      	ldrmi	r3, [r6, #0]
 800599a:	3302      	addmi	r3, #2
 800599c:	6033      	strmi	r3, [r6, #0]
 800599e:	6825      	ldr	r5, [r4, #0]
 80059a0:	f015 0506 	ands.w	r5, r5, #6
 80059a4:	d106      	bne.n	80059b4 <_printf_common+0x48>
 80059a6:	f104 0a19 	add.w	sl, r4, #25
 80059aa:	68e3      	ldr	r3, [r4, #12]
 80059ac:	6832      	ldr	r2, [r6, #0]
 80059ae:	1a9b      	subs	r3, r3, r2
 80059b0:	42ab      	cmp	r3, r5
 80059b2:	dc26      	bgt.n	8005a02 <_printf_common+0x96>
 80059b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059b8:	1e13      	subs	r3, r2, #0
 80059ba:	6822      	ldr	r2, [r4, #0]
 80059bc:	bf18      	it	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	0692      	lsls	r2, r2, #26
 80059c2:	d42b      	bmi.n	8005a1c <_printf_common+0xb0>
 80059c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059c8:	4649      	mov	r1, r9
 80059ca:	4638      	mov	r0, r7
 80059cc:	47c0      	blx	r8
 80059ce:	3001      	adds	r0, #1
 80059d0:	d01e      	beq.n	8005a10 <_printf_common+0xa4>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	68e5      	ldr	r5, [r4, #12]
 80059d6:	6832      	ldr	r2, [r6, #0]
 80059d8:	f003 0306 	and.w	r3, r3, #6
 80059dc:	2b04      	cmp	r3, #4
 80059de:	bf08      	it	eq
 80059e0:	1aad      	subeq	r5, r5, r2
 80059e2:	68a3      	ldr	r3, [r4, #8]
 80059e4:	6922      	ldr	r2, [r4, #16]
 80059e6:	bf0c      	ite	eq
 80059e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059ec:	2500      	movne	r5, #0
 80059ee:	4293      	cmp	r3, r2
 80059f0:	bfc4      	itt	gt
 80059f2:	1a9b      	subgt	r3, r3, r2
 80059f4:	18ed      	addgt	r5, r5, r3
 80059f6:	2600      	movs	r6, #0
 80059f8:	341a      	adds	r4, #26
 80059fa:	42b5      	cmp	r5, r6
 80059fc:	d11a      	bne.n	8005a34 <_printf_common+0xc8>
 80059fe:	2000      	movs	r0, #0
 8005a00:	e008      	b.n	8005a14 <_printf_common+0xa8>
 8005a02:	2301      	movs	r3, #1
 8005a04:	4652      	mov	r2, sl
 8005a06:	4649      	mov	r1, r9
 8005a08:	4638      	mov	r0, r7
 8005a0a:	47c0      	blx	r8
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d103      	bne.n	8005a18 <_printf_common+0xac>
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a18:	3501      	adds	r5, #1
 8005a1a:	e7c6      	b.n	80059aa <_printf_common+0x3e>
 8005a1c:	18e1      	adds	r1, r4, r3
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	2030      	movs	r0, #48	; 0x30
 8005a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a26:	4422      	add	r2, r4
 8005a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a30:	3302      	adds	r3, #2
 8005a32:	e7c7      	b.n	80059c4 <_printf_common+0x58>
 8005a34:	2301      	movs	r3, #1
 8005a36:	4622      	mov	r2, r4
 8005a38:	4649      	mov	r1, r9
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	47c0      	blx	r8
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d0e6      	beq.n	8005a10 <_printf_common+0xa4>
 8005a42:	3601      	adds	r6, #1
 8005a44:	e7d9      	b.n	80059fa <_printf_common+0x8e>
	...

08005a48 <_printf_i>:
 8005a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a4c:	7e0f      	ldrb	r7, [r1, #24]
 8005a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a50:	2f78      	cmp	r7, #120	; 0x78
 8005a52:	4691      	mov	r9, r2
 8005a54:	4680      	mov	r8, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	469a      	mov	sl, r3
 8005a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a5e:	d807      	bhi.n	8005a70 <_printf_i+0x28>
 8005a60:	2f62      	cmp	r7, #98	; 0x62
 8005a62:	d80a      	bhi.n	8005a7a <_printf_i+0x32>
 8005a64:	2f00      	cmp	r7, #0
 8005a66:	f000 80d8 	beq.w	8005c1a <_printf_i+0x1d2>
 8005a6a:	2f58      	cmp	r7, #88	; 0x58
 8005a6c:	f000 80a3 	beq.w	8005bb6 <_printf_i+0x16e>
 8005a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a78:	e03a      	b.n	8005af0 <_printf_i+0xa8>
 8005a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a7e:	2b15      	cmp	r3, #21
 8005a80:	d8f6      	bhi.n	8005a70 <_printf_i+0x28>
 8005a82:	a101      	add	r1, pc, #4	; (adr r1, 8005a88 <_printf_i+0x40>)
 8005a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a88:	08005ae1 	.word	0x08005ae1
 8005a8c:	08005af5 	.word	0x08005af5
 8005a90:	08005a71 	.word	0x08005a71
 8005a94:	08005a71 	.word	0x08005a71
 8005a98:	08005a71 	.word	0x08005a71
 8005a9c:	08005a71 	.word	0x08005a71
 8005aa0:	08005af5 	.word	0x08005af5
 8005aa4:	08005a71 	.word	0x08005a71
 8005aa8:	08005a71 	.word	0x08005a71
 8005aac:	08005a71 	.word	0x08005a71
 8005ab0:	08005a71 	.word	0x08005a71
 8005ab4:	08005c01 	.word	0x08005c01
 8005ab8:	08005b25 	.word	0x08005b25
 8005abc:	08005be3 	.word	0x08005be3
 8005ac0:	08005a71 	.word	0x08005a71
 8005ac4:	08005a71 	.word	0x08005a71
 8005ac8:	08005c23 	.word	0x08005c23
 8005acc:	08005a71 	.word	0x08005a71
 8005ad0:	08005b25 	.word	0x08005b25
 8005ad4:	08005a71 	.word	0x08005a71
 8005ad8:	08005a71 	.word	0x08005a71
 8005adc:	08005beb 	.word	0x08005beb
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	1d1a      	adds	r2, r3, #4
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	602a      	str	r2, [r5, #0]
 8005ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0a3      	b.n	8005c3c <_printf_i+0x1f4>
 8005af4:	6820      	ldr	r0, [r4, #0]
 8005af6:	6829      	ldr	r1, [r5, #0]
 8005af8:	0606      	lsls	r6, r0, #24
 8005afa:	f101 0304 	add.w	r3, r1, #4
 8005afe:	d50a      	bpl.n	8005b16 <_printf_i+0xce>
 8005b00:	680e      	ldr	r6, [r1, #0]
 8005b02:	602b      	str	r3, [r5, #0]
 8005b04:	2e00      	cmp	r6, #0
 8005b06:	da03      	bge.n	8005b10 <_printf_i+0xc8>
 8005b08:	232d      	movs	r3, #45	; 0x2d
 8005b0a:	4276      	negs	r6, r6
 8005b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b10:	485e      	ldr	r0, [pc, #376]	; (8005c8c <_printf_i+0x244>)
 8005b12:	230a      	movs	r3, #10
 8005b14:	e019      	b.n	8005b4a <_printf_i+0x102>
 8005b16:	680e      	ldr	r6, [r1, #0]
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b1e:	bf18      	it	ne
 8005b20:	b236      	sxthne	r6, r6
 8005b22:	e7ef      	b.n	8005b04 <_printf_i+0xbc>
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	6820      	ldr	r0, [r4, #0]
 8005b28:	1d19      	adds	r1, r3, #4
 8005b2a:	6029      	str	r1, [r5, #0]
 8005b2c:	0601      	lsls	r1, r0, #24
 8005b2e:	d501      	bpl.n	8005b34 <_printf_i+0xec>
 8005b30:	681e      	ldr	r6, [r3, #0]
 8005b32:	e002      	b.n	8005b3a <_printf_i+0xf2>
 8005b34:	0646      	lsls	r6, r0, #25
 8005b36:	d5fb      	bpl.n	8005b30 <_printf_i+0xe8>
 8005b38:	881e      	ldrh	r6, [r3, #0]
 8005b3a:	4854      	ldr	r0, [pc, #336]	; (8005c8c <_printf_i+0x244>)
 8005b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b3e:	bf0c      	ite	eq
 8005b40:	2308      	moveq	r3, #8
 8005b42:	230a      	movne	r3, #10
 8005b44:	2100      	movs	r1, #0
 8005b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b4a:	6865      	ldr	r5, [r4, #4]
 8005b4c:	60a5      	str	r5, [r4, #8]
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	bfa2      	ittt	ge
 8005b52:	6821      	ldrge	r1, [r4, #0]
 8005b54:	f021 0104 	bicge.w	r1, r1, #4
 8005b58:	6021      	strge	r1, [r4, #0]
 8005b5a:	b90e      	cbnz	r6, 8005b60 <_printf_i+0x118>
 8005b5c:	2d00      	cmp	r5, #0
 8005b5e:	d04d      	beq.n	8005bfc <_printf_i+0x1b4>
 8005b60:	4615      	mov	r5, r2
 8005b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b66:	fb03 6711 	mls	r7, r3, r1, r6
 8005b6a:	5dc7      	ldrb	r7, [r0, r7]
 8005b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b70:	4637      	mov	r7, r6
 8005b72:	42bb      	cmp	r3, r7
 8005b74:	460e      	mov	r6, r1
 8005b76:	d9f4      	bls.n	8005b62 <_printf_i+0x11a>
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d10b      	bne.n	8005b94 <_printf_i+0x14c>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	07de      	lsls	r6, r3, #31
 8005b80:	d508      	bpl.n	8005b94 <_printf_i+0x14c>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	6861      	ldr	r1, [r4, #4]
 8005b86:	4299      	cmp	r1, r3
 8005b88:	bfde      	ittt	le
 8005b8a:	2330      	movle	r3, #48	; 0x30
 8005b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b94:	1b52      	subs	r2, r2, r5
 8005b96:	6122      	str	r2, [r4, #16]
 8005b98:	f8cd a000 	str.w	sl, [sp]
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	aa03      	add	r2, sp, #12
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	f7ff fee2 	bl	800596c <_printf_common>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d14c      	bne.n	8005c46 <_printf_i+0x1fe>
 8005bac:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb0:	b004      	add	sp, #16
 8005bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb6:	4835      	ldr	r0, [pc, #212]	; (8005c8c <_printf_i+0x244>)
 8005bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005bbc:	6829      	ldr	r1, [r5, #0]
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bc4:	6029      	str	r1, [r5, #0]
 8005bc6:	061d      	lsls	r5, r3, #24
 8005bc8:	d514      	bpl.n	8005bf4 <_printf_i+0x1ac>
 8005bca:	07df      	lsls	r7, r3, #31
 8005bcc:	bf44      	itt	mi
 8005bce:	f043 0320 	orrmi.w	r3, r3, #32
 8005bd2:	6023      	strmi	r3, [r4, #0]
 8005bd4:	b91e      	cbnz	r6, 8005bde <_printf_i+0x196>
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	f023 0320 	bic.w	r3, r3, #32
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	2310      	movs	r3, #16
 8005be0:	e7b0      	b.n	8005b44 <_printf_i+0xfc>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	f043 0320 	orr.w	r3, r3, #32
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	2378      	movs	r3, #120	; 0x78
 8005bec:	4828      	ldr	r0, [pc, #160]	; (8005c90 <_printf_i+0x248>)
 8005bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bf2:	e7e3      	b.n	8005bbc <_printf_i+0x174>
 8005bf4:	0659      	lsls	r1, r3, #25
 8005bf6:	bf48      	it	mi
 8005bf8:	b2b6      	uxthmi	r6, r6
 8005bfa:	e7e6      	b.n	8005bca <_printf_i+0x182>
 8005bfc:	4615      	mov	r5, r2
 8005bfe:	e7bb      	b.n	8005b78 <_printf_i+0x130>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	6826      	ldr	r6, [r4, #0]
 8005c04:	6961      	ldr	r1, [r4, #20]
 8005c06:	1d18      	adds	r0, r3, #4
 8005c08:	6028      	str	r0, [r5, #0]
 8005c0a:	0635      	lsls	r5, r6, #24
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	d501      	bpl.n	8005c14 <_printf_i+0x1cc>
 8005c10:	6019      	str	r1, [r3, #0]
 8005c12:	e002      	b.n	8005c1a <_printf_i+0x1d2>
 8005c14:	0670      	lsls	r0, r6, #25
 8005c16:	d5fb      	bpl.n	8005c10 <_printf_i+0x1c8>
 8005c18:	8019      	strh	r1, [r3, #0]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6123      	str	r3, [r4, #16]
 8005c1e:	4615      	mov	r5, r2
 8005c20:	e7ba      	b.n	8005b98 <_printf_i+0x150>
 8005c22:	682b      	ldr	r3, [r5, #0]
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	602a      	str	r2, [r5, #0]
 8005c28:	681d      	ldr	r5, [r3, #0]
 8005c2a:	6862      	ldr	r2, [r4, #4]
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f7fa fad6 	bl	80001e0 <memchr>
 8005c34:	b108      	cbz	r0, 8005c3a <_printf_i+0x1f2>
 8005c36:	1b40      	subs	r0, r0, r5
 8005c38:	6060      	str	r0, [r4, #4]
 8005c3a:	6863      	ldr	r3, [r4, #4]
 8005c3c:	6123      	str	r3, [r4, #16]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c44:	e7a8      	b.n	8005b98 <_printf_i+0x150>
 8005c46:	6923      	ldr	r3, [r4, #16]
 8005c48:	462a      	mov	r2, r5
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	47d0      	blx	sl
 8005c50:	3001      	adds	r0, #1
 8005c52:	d0ab      	beq.n	8005bac <_printf_i+0x164>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	079b      	lsls	r3, r3, #30
 8005c58:	d413      	bmi.n	8005c82 <_printf_i+0x23a>
 8005c5a:	68e0      	ldr	r0, [r4, #12]
 8005c5c:	9b03      	ldr	r3, [sp, #12]
 8005c5e:	4298      	cmp	r0, r3
 8005c60:	bfb8      	it	lt
 8005c62:	4618      	movlt	r0, r3
 8005c64:	e7a4      	b.n	8005bb0 <_printf_i+0x168>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4632      	mov	r2, r6
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	47d0      	blx	sl
 8005c70:	3001      	adds	r0, #1
 8005c72:	d09b      	beq.n	8005bac <_printf_i+0x164>
 8005c74:	3501      	adds	r5, #1
 8005c76:	68e3      	ldr	r3, [r4, #12]
 8005c78:	9903      	ldr	r1, [sp, #12]
 8005c7a:	1a5b      	subs	r3, r3, r1
 8005c7c:	42ab      	cmp	r3, r5
 8005c7e:	dcf2      	bgt.n	8005c66 <_printf_i+0x21e>
 8005c80:	e7eb      	b.n	8005c5a <_printf_i+0x212>
 8005c82:	2500      	movs	r5, #0
 8005c84:	f104 0619 	add.w	r6, r4, #25
 8005c88:	e7f5      	b.n	8005c76 <_printf_i+0x22e>
 8005c8a:	bf00      	nop
 8005c8c:	08008e52 	.word	0x08008e52
 8005c90:	08008e63 	.word	0x08008e63

08005c94 <_sbrk_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d06      	ldr	r5, [pc, #24]	; (8005cb0 <_sbrk_r+0x1c>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	f7fb fd98 	bl	80017d4 <_sbrk>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_sbrk_r+0x1a>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_sbrk_r+0x1a>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	20000484 	.word	0x20000484

08005cb4 <__sread>:
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbc:	f001 ffda 	bl	8007c74 <_read_r>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	bfab      	itete	ge
 8005cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8005cc8:	181b      	addge	r3, r3, r0
 8005cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cce:	bfac      	ite	ge
 8005cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cd2:	81a3      	strhlt	r3, [r4, #12]
 8005cd4:	bd10      	pop	{r4, pc}

08005cd6 <__swrite>:
 8005cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cda:	461f      	mov	r7, r3
 8005cdc:	898b      	ldrh	r3, [r1, #12]
 8005cde:	05db      	lsls	r3, r3, #23
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	d505      	bpl.n	8005cf4 <__swrite+0x1e>
 8005ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cec:	2302      	movs	r3, #2
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f001 f898 	bl	8006e24 <_lseek_r>
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	4632      	mov	r2, r6
 8005d02:	463b      	mov	r3, r7
 8005d04:	4628      	mov	r0, r5
 8005d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0a:	f000 b889 	b.w	8005e20 <_write_r>

08005d0e <__sseek>:
 8005d0e:	b510      	push	{r4, lr}
 8005d10:	460c      	mov	r4, r1
 8005d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d16:	f001 f885 	bl	8006e24 <_lseek_r>
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	bf15      	itete	ne
 8005d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d2a:	81a3      	strheq	r3, [r4, #12]
 8005d2c:	bf18      	it	ne
 8005d2e:	81a3      	strhne	r3, [r4, #12]
 8005d30:	bd10      	pop	{r4, pc}

08005d32 <__sclose>:
 8005d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d36:	f000 b911 	b.w	8005f5c <_close_r>
	...

08005d3c <_vsiprintf_r>:
 8005d3c:	b500      	push	{lr}
 8005d3e:	b09b      	sub	sp, #108	; 0x6c
 8005d40:	9100      	str	r1, [sp, #0]
 8005d42:	9104      	str	r1, [sp, #16]
 8005d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d48:	9105      	str	r1, [sp, #20]
 8005d4a:	9102      	str	r1, [sp, #8]
 8005d4c:	4905      	ldr	r1, [pc, #20]	; (8005d64 <_vsiprintf_r+0x28>)
 8005d4e:	9103      	str	r1, [sp, #12]
 8005d50:	4669      	mov	r1, sp
 8005d52:	f001 fd35 	bl	80077c0 <_svfiprintf_r>
 8005d56:	9b00      	ldr	r3, [sp, #0]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	b01b      	add	sp, #108	; 0x6c
 8005d5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d62:	bf00      	nop
 8005d64:	ffff0208 	.word	0xffff0208

08005d68 <vsiprintf>:
 8005d68:	4613      	mov	r3, r2
 8005d6a:	460a      	mov	r2, r1
 8005d6c:	4601      	mov	r1, r0
 8005d6e:	4802      	ldr	r0, [pc, #8]	; (8005d78 <vsiprintf+0x10>)
 8005d70:	6800      	ldr	r0, [r0, #0]
 8005d72:	f7ff bfe3 	b.w	8005d3c <_vsiprintf_r>
 8005d76:	bf00      	nop
 8005d78:	200000e4 	.word	0x200000e4

08005d7c <__swbuf_r>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	460e      	mov	r6, r1
 8005d80:	4614      	mov	r4, r2
 8005d82:	4605      	mov	r5, r0
 8005d84:	b118      	cbz	r0, 8005d8e <__swbuf_r+0x12>
 8005d86:	6983      	ldr	r3, [r0, #24]
 8005d88:	b90b      	cbnz	r3, 8005d8e <__swbuf_r+0x12>
 8005d8a:	f7ff f9a9 	bl	80050e0 <__sinit>
 8005d8e:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <__swbuf_r+0x98>)
 8005d90:	429c      	cmp	r4, r3
 8005d92:	d12b      	bne.n	8005dec <__swbuf_r+0x70>
 8005d94:	686c      	ldr	r4, [r5, #4]
 8005d96:	69a3      	ldr	r3, [r4, #24]
 8005d98:	60a3      	str	r3, [r4, #8]
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	071a      	lsls	r2, r3, #28
 8005d9e:	d52f      	bpl.n	8005e00 <__swbuf_r+0x84>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	b36b      	cbz	r3, 8005e00 <__swbuf_r+0x84>
 8005da4:	6923      	ldr	r3, [r4, #16]
 8005da6:	6820      	ldr	r0, [r4, #0]
 8005da8:	1ac0      	subs	r0, r0, r3
 8005daa:	6963      	ldr	r3, [r4, #20]
 8005dac:	b2f6      	uxtb	r6, r6
 8005dae:	4283      	cmp	r3, r0
 8005db0:	4637      	mov	r7, r6
 8005db2:	dc04      	bgt.n	8005dbe <__swbuf_r+0x42>
 8005db4:	4621      	mov	r1, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 ffe2 	bl	8006d80 <_fflush_r>
 8005dbc:	bb30      	cbnz	r0, 8005e0c <__swbuf_r+0x90>
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	60a3      	str	r3, [r4, #8]
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	701e      	strb	r6, [r3, #0]
 8005dcc:	6963      	ldr	r3, [r4, #20]
 8005dce:	3001      	adds	r0, #1
 8005dd0:	4283      	cmp	r3, r0
 8005dd2:	d004      	beq.n	8005dde <__swbuf_r+0x62>
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	07db      	lsls	r3, r3, #31
 8005dd8:	d506      	bpl.n	8005de8 <__swbuf_r+0x6c>
 8005dda:	2e0a      	cmp	r6, #10
 8005ddc:	d104      	bne.n	8005de8 <__swbuf_r+0x6c>
 8005dde:	4621      	mov	r1, r4
 8005de0:	4628      	mov	r0, r5
 8005de2:	f000 ffcd 	bl	8006d80 <_fflush_r>
 8005de6:	b988      	cbnz	r0, 8005e0c <__swbuf_r+0x90>
 8005de8:	4638      	mov	r0, r7
 8005dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dec:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <__swbuf_r+0x9c>)
 8005dee:	429c      	cmp	r4, r3
 8005df0:	d101      	bne.n	8005df6 <__swbuf_r+0x7a>
 8005df2:	68ac      	ldr	r4, [r5, #8]
 8005df4:	e7cf      	b.n	8005d96 <__swbuf_r+0x1a>
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <__swbuf_r+0xa0>)
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	bf08      	it	eq
 8005dfc:	68ec      	ldreq	r4, [r5, #12]
 8005dfe:	e7ca      	b.n	8005d96 <__swbuf_r+0x1a>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 f81e 	bl	8005e44 <__swsetup_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d0cb      	beq.n	8005da4 <__swbuf_r+0x28>
 8005e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e10:	e7ea      	b.n	8005de8 <__swbuf_r+0x6c>
 8005e12:	bf00      	nop
 8005e14:	08008dfc 	.word	0x08008dfc
 8005e18:	08008e1c 	.word	0x08008e1c
 8005e1c:	08008ddc 	.word	0x08008ddc

08005e20 <_write_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	; (8005e40 <_write_r+0x20>)
 8005e24:	4604      	mov	r4, r0
 8005e26:	4608      	mov	r0, r1
 8005e28:	4611      	mov	r1, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f7fe fefb 	bl	8004c2a <_write>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_write_r+0x1e>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_write_r+0x1e>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	20000484 	.word	0x20000484

08005e44 <__swsetup_r>:
 8005e44:	4b32      	ldr	r3, [pc, #200]	; (8005f10 <__swsetup_r+0xcc>)
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	681d      	ldr	r5, [r3, #0]
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	b125      	cbz	r5, 8005e5a <__swsetup_r+0x16>
 8005e50:	69ab      	ldr	r3, [r5, #24]
 8005e52:	b913      	cbnz	r3, 8005e5a <__swsetup_r+0x16>
 8005e54:	4628      	mov	r0, r5
 8005e56:	f7ff f943 	bl	80050e0 <__sinit>
 8005e5a:	4b2e      	ldr	r3, [pc, #184]	; (8005f14 <__swsetup_r+0xd0>)
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	d10f      	bne.n	8005e80 <__swsetup_r+0x3c>
 8005e60:	686c      	ldr	r4, [r5, #4]
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e68:	0719      	lsls	r1, r3, #28
 8005e6a:	d42c      	bmi.n	8005ec6 <__swsetup_r+0x82>
 8005e6c:	06dd      	lsls	r5, r3, #27
 8005e6e:	d411      	bmi.n	8005e94 <__swsetup_r+0x50>
 8005e70:	2309      	movs	r3, #9
 8005e72:	6033      	str	r3, [r6, #0]
 8005e74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e78:	81a3      	strh	r3, [r4, #12]
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7e:	e03e      	b.n	8005efe <__swsetup_r+0xba>
 8005e80:	4b25      	ldr	r3, [pc, #148]	; (8005f18 <__swsetup_r+0xd4>)
 8005e82:	429c      	cmp	r4, r3
 8005e84:	d101      	bne.n	8005e8a <__swsetup_r+0x46>
 8005e86:	68ac      	ldr	r4, [r5, #8]
 8005e88:	e7eb      	b.n	8005e62 <__swsetup_r+0x1e>
 8005e8a:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <__swsetup_r+0xd8>)
 8005e8c:	429c      	cmp	r4, r3
 8005e8e:	bf08      	it	eq
 8005e90:	68ec      	ldreq	r4, [r5, #12]
 8005e92:	e7e6      	b.n	8005e62 <__swsetup_r+0x1e>
 8005e94:	0758      	lsls	r0, r3, #29
 8005e96:	d512      	bpl.n	8005ebe <__swsetup_r+0x7a>
 8005e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e9a:	b141      	cbz	r1, 8005eae <__swsetup_r+0x6a>
 8005e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ea0:	4299      	cmp	r1, r3
 8005ea2:	d002      	beq.n	8005eaa <__swsetup_r+0x66>
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f001 fbe3 	bl	8007670 <_free_r>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6363      	str	r3, [r4, #52]	; 0x34
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eb4:	81a3      	strh	r3, [r4, #12]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	6063      	str	r3, [r4, #4]
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	f043 0308 	orr.w	r3, r3, #8
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	b94b      	cbnz	r3, 8005ede <__swsetup_r+0x9a>
 8005eca:	89a3      	ldrh	r3, [r4, #12]
 8005ecc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed4:	d003      	beq.n	8005ede <__swsetup_r+0x9a>
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f000 ffdb 	bl	8006e94 <__smakebuf_r>
 8005ede:	89a0      	ldrh	r0, [r4, #12]
 8005ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ee4:	f010 0301 	ands.w	r3, r0, #1
 8005ee8:	d00a      	beq.n	8005f00 <__swsetup_r+0xbc>
 8005eea:	2300      	movs	r3, #0
 8005eec:	60a3      	str	r3, [r4, #8]
 8005eee:	6963      	ldr	r3, [r4, #20]
 8005ef0:	425b      	negs	r3, r3
 8005ef2:	61a3      	str	r3, [r4, #24]
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	b943      	cbnz	r3, 8005f0a <__swsetup_r+0xc6>
 8005ef8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005efc:	d1ba      	bne.n	8005e74 <__swsetup_r+0x30>
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	0781      	lsls	r1, r0, #30
 8005f02:	bf58      	it	pl
 8005f04:	6963      	ldrpl	r3, [r4, #20]
 8005f06:	60a3      	str	r3, [r4, #8]
 8005f08:	e7f4      	b.n	8005ef4 <__swsetup_r+0xb0>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e7f7      	b.n	8005efe <__swsetup_r+0xba>
 8005f0e:	bf00      	nop
 8005f10:	200000e4 	.word	0x200000e4
 8005f14:	08008dfc 	.word	0x08008dfc
 8005f18:	08008e1c 	.word	0x08008e1c
 8005f1c:	08008ddc 	.word	0x08008ddc

08005f20 <__assert_func>:
 8005f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f22:	4614      	mov	r4, r2
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <__assert_func+0x2c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	68d8      	ldr	r0, [r3, #12]
 8005f2e:	b14c      	cbz	r4, 8005f44 <__assert_func+0x24>
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <__assert_func+0x30>)
 8005f32:	9100      	str	r1, [sp, #0]
 8005f34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f38:	4906      	ldr	r1, [pc, #24]	; (8005f54 <__assert_func+0x34>)
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	f000 ff5c 	bl	8006df8 <fiprintf>
 8005f40:	f001 feaa 	bl	8007c98 <abort>
 8005f44:	4b04      	ldr	r3, [pc, #16]	; (8005f58 <__assert_func+0x38>)
 8005f46:	461c      	mov	r4, r3
 8005f48:	e7f3      	b.n	8005f32 <__assert_func+0x12>
 8005f4a:	bf00      	nop
 8005f4c:	200000e4 	.word	0x200000e4
 8005f50:	08008e74 	.word	0x08008e74
 8005f54:	08008e81 	.word	0x08008e81
 8005f58:	08008eaf 	.word	0x08008eaf

08005f5c <_close_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d06      	ldr	r5, [pc, #24]	; (8005f78 <_close_r+0x1c>)
 8005f60:	2300      	movs	r3, #0
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
 8005f66:	602b      	str	r3, [r5, #0]
 8005f68:	f7fe fe90 	bl	8004c8c <_close>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_close_r+0x1a>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_close_r+0x1a>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	20000484 	.word	0x20000484

08005f7c <quorem>:
 8005f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	6903      	ldr	r3, [r0, #16]
 8005f82:	690c      	ldr	r4, [r1, #16]
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	4607      	mov	r7, r0
 8005f88:	f2c0 8081 	blt.w	800608e <quorem+0x112>
 8005f8c:	3c01      	subs	r4, #1
 8005f8e:	f101 0814 	add.w	r8, r1, #20
 8005f92:	f100 0514 	add.w	r5, r0, #20
 8005f96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fb4:	d331      	bcc.n	800601a <quorem+0x9e>
 8005fb6:	f04f 0e00 	mov.w	lr, #0
 8005fba:	4640      	mov	r0, r8
 8005fbc:	46ac      	mov	ip, r5
 8005fbe:	46f2      	mov	sl, lr
 8005fc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fc4:	b293      	uxth	r3, r2
 8005fc6:	fb06 e303 	mla	r3, r6, r3, lr
 8005fca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	ebaa 0303 	sub.w	r3, sl, r3
 8005fd4:	f8dc a000 	ldr.w	sl, [ip]
 8005fd8:	0c12      	lsrs	r2, r2, #16
 8005fda:	fa13 f38a 	uxtah	r3, r3, sl
 8005fde:	fb06 e202 	mla	r2, r6, r2, lr
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	9b00      	ldr	r3, [sp, #0]
 8005fe6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fea:	b292      	uxth	r2, r2
 8005fec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ff0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ff4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ff8:	4581      	cmp	r9, r0
 8005ffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ffe:	f84c 3b04 	str.w	r3, [ip], #4
 8006002:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006006:	d2db      	bcs.n	8005fc0 <quorem+0x44>
 8006008:	f855 300b 	ldr.w	r3, [r5, fp]
 800600c:	b92b      	cbnz	r3, 800601a <quorem+0x9e>
 800600e:	9b01      	ldr	r3, [sp, #4]
 8006010:	3b04      	subs	r3, #4
 8006012:	429d      	cmp	r5, r3
 8006014:	461a      	mov	r2, r3
 8006016:	d32e      	bcc.n	8006076 <quorem+0xfa>
 8006018:	613c      	str	r4, [r7, #16]
 800601a:	4638      	mov	r0, r7
 800601c:	f001 fa10 	bl	8007440 <__mcmp>
 8006020:	2800      	cmp	r0, #0
 8006022:	db24      	blt.n	800606e <quorem+0xf2>
 8006024:	3601      	adds	r6, #1
 8006026:	4628      	mov	r0, r5
 8006028:	f04f 0c00 	mov.w	ip, #0
 800602c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006030:	f8d0 e000 	ldr.w	lr, [r0]
 8006034:	b293      	uxth	r3, r2
 8006036:	ebac 0303 	sub.w	r3, ip, r3
 800603a:	0c12      	lsrs	r2, r2, #16
 800603c:	fa13 f38e 	uxtah	r3, r3, lr
 8006040:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006044:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006048:	b29b      	uxth	r3, r3
 800604a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800604e:	45c1      	cmp	r9, r8
 8006050:	f840 3b04 	str.w	r3, [r0], #4
 8006054:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006058:	d2e8      	bcs.n	800602c <quorem+0xb0>
 800605a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800605e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006062:	b922      	cbnz	r2, 800606e <quorem+0xf2>
 8006064:	3b04      	subs	r3, #4
 8006066:	429d      	cmp	r5, r3
 8006068:	461a      	mov	r2, r3
 800606a:	d30a      	bcc.n	8006082 <quorem+0x106>
 800606c:	613c      	str	r4, [r7, #16]
 800606e:	4630      	mov	r0, r6
 8006070:	b003      	add	sp, #12
 8006072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	3b04      	subs	r3, #4
 800607a:	2a00      	cmp	r2, #0
 800607c:	d1cc      	bne.n	8006018 <quorem+0x9c>
 800607e:	3c01      	subs	r4, #1
 8006080:	e7c7      	b.n	8006012 <quorem+0x96>
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	3b04      	subs	r3, #4
 8006086:	2a00      	cmp	r2, #0
 8006088:	d1f0      	bne.n	800606c <quorem+0xf0>
 800608a:	3c01      	subs	r4, #1
 800608c:	e7eb      	b.n	8006066 <quorem+0xea>
 800608e:	2000      	movs	r0, #0
 8006090:	e7ee      	b.n	8006070 <quorem+0xf4>
 8006092:	0000      	movs	r0, r0
 8006094:	0000      	movs	r0, r0
	...

08006098 <_dtoa_r>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	ed2d 8b04 	vpush	{d8-d9}
 80060a0:	ec57 6b10 	vmov	r6, r7, d0
 80060a4:	b093      	sub	sp, #76	; 0x4c
 80060a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060ac:	9106      	str	r1, [sp, #24]
 80060ae:	ee10 aa10 	vmov	sl, s0
 80060b2:	4604      	mov	r4, r0
 80060b4:	9209      	str	r2, [sp, #36]	; 0x24
 80060b6:	930c      	str	r3, [sp, #48]	; 0x30
 80060b8:	46bb      	mov	fp, r7
 80060ba:	b975      	cbnz	r5, 80060da <_dtoa_r+0x42>
 80060bc:	2010      	movs	r0, #16
 80060be:	f000 ff29 	bl	8006f14 <malloc>
 80060c2:	4602      	mov	r2, r0
 80060c4:	6260      	str	r0, [r4, #36]	; 0x24
 80060c6:	b920      	cbnz	r0, 80060d2 <_dtoa_r+0x3a>
 80060c8:	4ba7      	ldr	r3, [pc, #668]	; (8006368 <_dtoa_r+0x2d0>)
 80060ca:	21ea      	movs	r1, #234	; 0xea
 80060cc:	48a7      	ldr	r0, [pc, #668]	; (800636c <_dtoa_r+0x2d4>)
 80060ce:	f7ff ff27 	bl	8005f20 <__assert_func>
 80060d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060d6:	6005      	str	r5, [r0, #0]
 80060d8:	60c5      	str	r5, [r0, #12]
 80060da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	b151      	cbz	r1, 80060f6 <_dtoa_r+0x5e>
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	604a      	str	r2, [r1, #4]
 80060e4:	2301      	movs	r3, #1
 80060e6:	4093      	lsls	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 ff66 	bl	8006fbc <_Bfree>
 80060f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	1e3b      	subs	r3, r7, #0
 80060f8:	bfaa      	itet	ge
 80060fa:	2300      	movge	r3, #0
 80060fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006100:	f8c8 3000 	strge.w	r3, [r8]
 8006104:	4b9a      	ldr	r3, [pc, #616]	; (8006370 <_dtoa_r+0x2d8>)
 8006106:	bfbc      	itt	lt
 8006108:	2201      	movlt	r2, #1
 800610a:	f8c8 2000 	strlt.w	r2, [r8]
 800610e:	ea33 030b 	bics.w	r3, r3, fp
 8006112:	d11b      	bne.n	800614c <_dtoa_r+0xb4>
 8006114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006116:	f242 730f 	movw	r3, #9999	; 0x270f
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006120:	4333      	orrs	r3, r6
 8006122:	f000 8592 	beq.w	8006c4a <_dtoa_r+0xbb2>
 8006126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006128:	b963      	cbnz	r3, 8006144 <_dtoa_r+0xac>
 800612a:	4b92      	ldr	r3, [pc, #584]	; (8006374 <_dtoa_r+0x2dc>)
 800612c:	e022      	b.n	8006174 <_dtoa_r+0xdc>
 800612e:	4b92      	ldr	r3, [pc, #584]	; (8006378 <_dtoa_r+0x2e0>)
 8006130:	9301      	str	r3, [sp, #4]
 8006132:	3308      	adds	r3, #8
 8006134:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	9801      	ldr	r0, [sp, #4]
 800613a:	b013      	add	sp, #76	; 0x4c
 800613c:	ecbd 8b04 	vpop	{d8-d9}
 8006140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006144:	4b8b      	ldr	r3, [pc, #556]	; (8006374 <_dtoa_r+0x2dc>)
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	3303      	adds	r3, #3
 800614a:	e7f3      	b.n	8006134 <_dtoa_r+0x9c>
 800614c:	2200      	movs	r2, #0
 800614e:	2300      	movs	r3, #0
 8006150:	4650      	mov	r0, sl
 8006152:	4659      	mov	r1, fp
 8006154:	f7fa fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006158:	ec4b ab19 	vmov	d9, sl, fp
 800615c:	4680      	mov	r8, r0
 800615e:	b158      	cbz	r0, 8006178 <_dtoa_r+0xe0>
 8006160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006162:	2301      	movs	r3, #1
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 856b 	beq.w	8006c44 <_dtoa_r+0xbac>
 800616e:	4883      	ldr	r0, [pc, #524]	; (800637c <_dtoa_r+0x2e4>)
 8006170:	6018      	str	r0, [r3, #0]
 8006172:	1e43      	subs	r3, r0, #1
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	e7df      	b.n	8006138 <_dtoa_r+0xa0>
 8006178:	ec4b ab10 	vmov	d0, sl, fp
 800617c:	aa10      	add	r2, sp, #64	; 0x40
 800617e:	a911      	add	r1, sp, #68	; 0x44
 8006180:	4620      	mov	r0, r4
 8006182:	f001 fa03 	bl	800758c <__d2b>
 8006186:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800618a:	ee08 0a10 	vmov	s16, r0
 800618e:	2d00      	cmp	r5, #0
 8006190:	f000 8084 	beq.w	800629c <_dtoa_r+0x204>
 8006194:	ee19 3a90 	vmov	r3, s19
 8006198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800619c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80061a0:	4656      	mov	r6, sl
 80061a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80061a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80061ae:	4b74      	ldr	r3, [pc, #464]	; (8006380 <_dtoa_r+0x2e8>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	4630      	mov	r0, r6
 80061b4:	4639      	mov	r1, r7
 80061b6:	f7fa f867 	bl	8000288 <__aeabi_dsub>
 80061ba:	a365      	add	r3, pc, #404	; (adr r3, 8006350 <_dtoa_r+0x2b8>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa fa1a 	bl	80005f8 <__aeabi_dmul>
 80061c4:	a364      	add	r3, pc, #400	; (adr r3, 8006358 <_dtoa_r+0x2c0>)
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f7fa f85f 	bl	800028c <__adddf3>
 80061ce:	4606      	mov	r6, r0
 80061d0:	4628      	mov	r0, r5
 80061d2:	460f      	mov	r7, r1
 80061d4:	f7fa f9a6 	bl	8000524 <__aeabi_i2d>
 80061d8:	a361      	add	r3, pc, #388	; (adr r3, 8006360 <_dtoa_r+0x2c8>)
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f7fa fa0b 	bl	80005f8 <__aeabi_dmul>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4630      	mov	r0, r6
 80061e8:	4639      	mov	r1, r7
 80061ea:	f7fa f84f 	bl	800028c <__adddf3>
 80061ee:	4606      	mov	r6, r0
 80061f0:	460f      	mov	r7, r1
 80061f2:	f7fa fcb1 	bl	8000b58 <__aeabi_d2iz>
 80061f6:	2200      	movs	r2, #0
 80061f8:	9000      	str	r0, [sp, #0]
 80061fa:	2300      	movs	r3, #0
 80061fc:	4630      	mov	r0, r6
 80061fe:	4639      	mov	r1, r7
 8006200:	f7fa fc6c 	bl	8000adc <__aeabi_dcmplt>
 8006204:	b150      	cbz	r0, 800621c <_dtoa_r+0x184>
 8006206:	9800      	ldr	r0, [sp, #0]
 8006208:	f7fa f98c 	bl	8000524 <__aeabi_i2d>
 800620c:	4632      	mov	r2, r6
 800620e:	463b      	mov	r3, r7
 8006210:	f7fa fc5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006214:	b910      	cbnz	r0, 800621c <_dtoa_r+0x184>
 8006216:	9b00      	ldr	r3, [sp, #0]
 8006218:	3b01      	subs	r3, #1
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	2b16      	cmp	r3, #22
 8006220:	d85a      	bhi.n	80062d8 <_dtoa_r+0x240>
 8006222:	9a00      	ldr	r2, [sp, #0]
 8006224:	4b57      	ldr	r3, [pc, #348]	; (8006384 <_dtoa_r+0x2ec>)
 8006226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	ec51 0b19 	vmov	r0, r1, d9
 8006232:	f7fa fc53 	bl	8000adc <__aeabi_dcmplt>
 8006236:	2800      	cmp	r0, #0
 8006238:	d050      	beq.n	80062dc <_dtoa_r+0x244>
 800623a:	9b00      	ldr	r3, [sp, #0]
 800623c:	3b01      	subs	r3, #1
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2300      	movs	r3, #0
 8006242:	930b      	str	r3, [sp, #44]	; 0x2c
 8006244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006246:	1b5d      	subs	r5, r3, r5
 8006248:	1e6b      	subs	r3, r5, #1
 800624a:	9305      	str	r3, [sp, #20]
 800624c:	bf45      	ittet	mi
 800624e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006252:	9304      	strmi	r3, [sp, #16]
 8006254:	2300      	movpl	r3, #0
 8006256:	2300      	movmi	r3, #0
 8006258:	bf4c      	ite	mi
 800625a:	9305      	strmi	r3, [sp, #20]
 800625c:	9304      	strpl	r3, [sp, #16]
 800625e:	9b00      	ldr	r3, [sp, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	db3d      	blt.n	80062e0 <_dtoa_r+0x248>
 8006264:	9b05      	ldr	r3, [sp, #20]
 8006266:	9a00      	ldr	r2, [sp, #0]
 8006268:	920a      	str	r2, [sp, #40]	; 0x28
 800626a:	4413      	add	r3, r2
 800626c:	9305      	str	r3, [sp, #20]
 800626e:	2300      	movs	r3, #0
 8006270:	9307      	str	r3, [sp, #28]
 8006272:	9b06      	ldr	r3, [sp, #24]
 8006274:	2b09      	cmp	r3, #9
 8006276:	f200 8089 	bhi.w	800638c <_dtoa_r+0x2f4>
 800627a:	2b05      	cmp	r3, #5
 800627c:	bfc4      	itt	gt
 800627e:	3b04      	subgt	r3, #4
 8006280:	9306      	strgt	r3, [sp, #24]
 8006282:	9b06      	ldr	r3, [sp, #24]
 8006284:	f1a3 0302 	sub.w	r3, r3, #2
 8006288:	bfcc      	ite	gt
 800628a:	2500      	movgt	r5, #0
 800628c:	2501      	movle	r5, #1
 800628e:	2b03      	cmp	r3, #3
 8006290:	f200 8087 	bhi.w	80063a2 <_dtoa_r+0x30a>
 8006294:	e8df f003 	tbb	[pc, r3]
 8006298:	59383a2d 	.word	0x59383a2d
 800629c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80062a0:	441d      	add	r5, r3
 80062a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	bfc1      	itttt	gt
 80062aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80062b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80062b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062ba:	bfda      	itte	le
 80062bc:	f1c3 0320 	rsble	r3, r3, #32
 80062c0:	fa06 f003 	lslle.w	r0, r6, r3
 80062c4:	4318      	orrgt	r0, r3
 80062c6:	f7fa f91d 	bl	8000504 <__aeabi_ui2d>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4606      	mov	r6, r0
 80062ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80062d2:	3d01      	subs	r5, #1
 80062d4:	930e      	str	r3, [sp, #56]	; 0x38
 80062d6:	e76a      	b.n	80061ae <_dtoa_r+0x116>
 80062d8:	2301      	movs	r3, #1
 80062da:	e7b2      	b.n	8006242 <_dtoa_r+0x1aa>
 80062dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80062de:	e7b1      	b.n	8006244 <_dtoa_r+0x1ac>
 80062e0:	9b04      	ldr	r3, [sp, #16]
 80062e2:	9a00      	ldr	r2, [sp, #0]
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	4253      	negs	r3, r2
 80062ea:	9307      	str	r3, [sp, #28]
 80062ec:	2300      	movs	r3, #0
 80062ee:	930a      	str	r3, [sp, #40]	; 0x28
 80062f0:	e7bf      	b.n	8006272 <_dtoa_r+0x1da>
 80062f2:	2300      	movs	r3, #0
 80062f4:	9308      	str	r3, [sp, #32]
 80062f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dc55      	bgt.n	80063a8 <_dtoa_r+0x310>
 80062fc:	2301      	movs	r3, #1
 80062fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006302:	461a      	mov	r2, r3
 8006304:	9209      	str	r2, [sp, #36]	; 0x24
 8006306:	e00c      	b.n	8006322 <_dtoa_r+0x28a>
 8006308:	2301      	movs	r3, #1
 800630a:	e7f3      	b.n	80062f4 <_dtoa_r+0x25c>
 800630c:	2300      	movs	r3, #0
 800630e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006310:	9308      	str	r3, [sp, #32]
 8006312:	9b00      	ldr	r3, [sp, #0]
 8006314:	4413      	add	r3, r2
 8006316:	9302      	str	r3, [sp, #8]
 8006318:	3301      	adds	r3, #1
 800631a:	2b01      	cmp	r3, #1
 800631c:	9303      	str	r3, [sp, #12]
 800631e:	bfb8      	it	lt
 8006320:	2301      	movlt	r3, #1
 8006322:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006324:	2200      	movs	r2, #0
 8006326:	6042      	str	r2, [r0, #4]
 8006328:	2204      	movs	r2, #4
 800632a:	f102 0614 	add.w	r6, r2, #20
 800632e:	429e      	cmp	r6, r3
 8006330:	6841      	ldr	r1, [r0, #4]
 8006332:	d93d      	bls.n	80063b0 <_dtoa_r+0x318>
 8006334:	4620      	mov	r0, r4
 8006336:	f000 fe01 	bl	8006f3c <_Balloc>
 800633a:	9001      	str	r0, [sp, #4]
 800633c:	2800      	cmp	r0, #0
 800633e:	d13b      	bne.n	80063b8 <_dtoa_r+0x320>
 8006340:	4b11      	ldr	r3, [pc, #68]	; (8006388 <_dtoa_r+0x2f0>)
 8006342:	4602      	mov	r2, r0
 8006344:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006348:	e6c0      	b.n	80060cc <_dtoa_r+0x34>
 800634a:	2301      	movs	r3, #1
 800634c:	e7df      	b.n	800630e <_dtoa_r+0x276>
 800634e:	bf00      	nop
 8006350:	636f4361 	.word	0x636f4361
 8006354:	3fd287a7 	.word	0x3fd287a7
 8006358:	8b60c8b3 	.word	0x8b60c8b3
 800635c:	3fc68a28 	.word	0x3fc68a28
 8006360:	509f79fb 	.word	0x509f79fb
 8006364:	3fd34413 	.word	0x3fd34413
 8006368:	08008ebd 	.word	0x08008ebd
 800636c:	08008ed4 	.word	0x08008ed4
 8006370:	7ff00000 	.word	0x7ff00000
 8006374:	08008eb9 	.word	0x08008eb9
 8006378:	08008eb0 	.word	0x08008eb0
 800637c:	08008e51 	.word	0x08008e51
 8006380:	3ff80000 	.word	0x3ff80000
 8006384:	08008fc8 	.word	0x08008fc8
 8006388:	08008f2f 	.word	0x08008f2f
 800638c:	2501      	movs	r5, #1
 800638e:	2300      	movs	r3, #0
 8006390:	9306      	str	r3, [sp, #24]
 8006392:	9508      	str	r5, [sp, #32]
 8006394:	f04f 33ff 	mov.w	r3, #4294967295
 8006398:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	2312      	movs	r3, #18
 80063a0:	e7b0      	b.n	8006304 <_dtoa_r+0x26c>
 80063a2:	2301      	movs	r3, #1
 80063a4:	9308      	str	r3, [sp, #32]
 80063a6:	e7f5      	b.n	8006394 <_dtoa_r+0x2fc>
 80063a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063ae:	e7b8      	b.n	8006322 <_dtoa_r+0x28a>
 80063b0:	3101      	adds	r1, #1
 80063b2:	6041      	str	r1, [r0, #4]
 80063b4:	0052      	lsls	r2, r2, #1
 80063b6:	e7b8      	b.n	800632a <_dtoa_r+0x292>
 80063b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ba:	9a01      	ldr	r2, [sp, #4]
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	2b0e      	cmp	r3, #14
 80063c2:	f200 809d 	bhi.w	8006500 <_dtoa_r+0x468>
 80063c6:	2d00      	cmp	r5, #0
 80063c8:	f000 809a 	beq.w	8006500 <_dtoa_r+0x468>
 80063cc:	9b00      	ldr	r3, [sp, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	dd32      	ble.n	8006438 <_dtoa_r+0x3a0>
 80063d2:	4ab7      	ldr	r2, [pc, #732]	; (80066b0 <_dtoa_r+0x618>)
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063e0:	9b00      	ldr	r3, [sp, #0]
 80063e2:	05d8      	lsls	r0, r3, #23
 80063e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80063e8:	d516      	bpl.n	8006418 <_dtoa_r+0x380>
 80063ea:	4bb2      	ldr	r3, [pc, #712]	; (80066b4 <_dtoa_r+0x61c>)
 80063ec:	ec51 0b19 	vmov	r0, r1, d9
 80063f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063f4:	f7fa fa2a 	bl	800084c <__aeabi_ddiv>
 80063f8:	f007 070f 	and.w	r7, r7, #15
 80063fc:	4682      	mov	sl, r0
 80063fe:	468b      	mov	fp, r1
 8006400:	2503      	movs	r5, #3
 8006402:	4eac      	ldr	r6, [pc, #688]	; (80066b4 <_dtoa_r+0x61c>)
 8006404:	b957      	cbnz	r7, 800641c <_dtoa_r+0x384>
 8006406:	4642      	mov	r2, r8
 8006408:	464b      	mov	r3, r9
 800640a:	4650      	mov	r0, sl
 800640c:	4659      	mov	r1, fp
 800640e:	f7fa fa1d 	bl	800084c <__aeabi_ddiv>
 8006412:	4682      	mov	sl, r0
 8006414:	468b      	mov	fp, r1
 8006416:	e028      	b.n	800646a <_dtoa_r+0x3d2>
 8006418:	2502      	movs	r5, #2
 800641a:	e7f2      	b.n	8006402 <_dtoa_r+0x36a>
 800641c:	07f9      	lsls	r1, r7, #31
 800641e:	d508      	bpl.n	8006432 <_dtoa_r+0x39a>
 8006420:	4640      	mov	r0, r8
 8006422:	4649      	mov	r1, r9
 8006424:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006428:	f7fa f8e6 	bl	80005f8 <__aeabi_dmul>
 800642c:	3501      	adds	r5, #1
 800642e:	4680      	mov	r8, r0
 8006430:	4689      	mov	r9, r1
 8006432:	107f      	asrs	r7, r7, #1
 8006434:	3608      	adds	r6, #8
 8006436:	e7e5      	b.n	8006404 <_dtoa_r+0x36c>
 8006438:	f000 809b 	beq.w	8006572 <_dtoa_r+0x4da>
 800643c:	9b00      	ldr	r3, [sp, #0]
 800643e:	4f9d      	ldr	r7, [pc, #628]	; (80066b4 <_dtoa_r+0x61c>)
 8006440:	425e      	negs	r6, r3
 8006442:	4b9b      	ldr	r3, [pc, #620]	; (80066b0 <_dtoa_r+0x618>)
 8006444:	f006 020f 	and.w	r2, r6, #15
 8006448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	ec51 0b19 	vmov	r0, r1, d9
 8006454:	f7fa f8d0 	bl	80005f8 <__aeabi_dmul>
 8006458:	1136      	asrs	r6, r6, #4
 800645a:	4682      	mov	sl, r0
 800645c:	468b      	mov	fp, r1
 800645e:	2300      	movs	r3, #0
 8006460:	2502      	movs	r5, #2
 8006462:	2e00      	cmp	r6, #0
 8006464:	d17a      	bne.n	800655c <_dtoa_r+0x4c4>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1d3      	bne.n	8006412 <_dtoa_r+0x37a>
 800646a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8082 	beq.w	8006576 <_dtoa_r+0x4de>
 8006472:	4b91      	ldr	r3, [pc, #580]	; (80066b8 <_dtoa_r+0x620>)
 8006474:	2200      	movs	r2, #0
 8006476:	4650      	mov	r0, sl
 8006478:	4659      	mov	r1, fp
 800647a:	f7fa fb2f 	bl	8000adc <__aeabi_dcmplt>
 800647e:	2800      	cmp	r0, #0
 8006480:	d079      	beq.n	8006576 <_dtoa_r+0x4de>
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d076      	beq.n	8006576 <_dtoa_r+0x4de>
 8006488:	9b02      	ldr	r3, [sp, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	dd36      	ble.n	80064fc <_dtoa_r+0x464>
 800648e:	9b00      	ldr	r3, [sp, #0]
 8006490:	4650      	mov	r0, sl
 8006492:	4659      	mov	r1, fp
 8006494:	1e5f      	subs	r7, r3, #1
 8006496:	2200      	movs	r2, #0
 8006498:	4b88      	ldr	r3, [pc, #544]	; (80066bc <_dtoa_r+0x624>)
 800649a:	f7fa f8ad 	bl	80005f8 <__aeabi_dmul>
 800649e:	9e02      	ldr	r6, [sp, #8]
 80064a0:	4682      	mov	sl, r0
 80064a2:	468b      	mov	fp, r1
 80064a4:	3501      	adds	r5, #1
 80064a6:	4628      	mov	r0, r5
 80064a8:	f7fa f83c 	bl	8000524 <__aeabi_i2d>
 80064ac:	4652      	mov	r2, sl
 80064ae:	465b      	mov	r3, fp
 80064b0:	f7fa f8a2 	bl	80005f8 <__aeabi_dmul>
 80064b4:	4b82      	ldr	r3, [pc, #520]	; (80066c0 <_dtoa_r+0x628>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	f7f9 fee8 	bl	800028c <__adddf3>
 80064bc:	46d0      	mov	r8, sl
 80064be:	46d9      	mov	r9, fp
 80064c0:	4682      	mov	sl, r0
 80064c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80064c6:	2e00      	cmp	r6, #0
 80064c8:	d158      	bne.n	800657c <_dtoa_r+0x4e4>
 80064ca:	4b7e      	ldr	r3, [pc, #504]	; (80066c4 <_dtoa_r+0x62c>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	4640      	mov	r0, r8
 80064d0:	4649      	mov	r1, r9
 80064d2:	f7f9 fed9 	bl	8000288 <__aeabi_dsub>
 80064d6:	4652      	mov	r2, sl
 80064d8:	465b      	mov	r3, fp
 80064da:	4680      	mov	r8, r0
 80064dc:	4689      	mov	r9, r1
 80064de:	f7fa fb1b 	bl	8000b18 <__aeabi_dcmpgt>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	f040 8295 	bne.w	8006a12 <_dtoa_r+0x97a>
 80064e8:	4652      	mov	r2, sl
 80064ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80064ee:	4640      	mov	r0, r8
 80064f0:	4649      	mov	r1, r9
 80064f2:	f7fa faf3 	bl	8000adc <__aeabi_dcmplt>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f040 8289 	bne.w	8006a0e <_dtoa_r+0x976>
 80064fc:	ec5b ab19 	vmov	sl, fp, d9
 8006500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006502:	2b00      	cmp	r3, #0
 8006504:	f2c0 8148 	blt.w	8006798 <_dtoa_r+0x700>
 8006508:	9a00      	ldr	r2, [sp, #0]
 800650a:	2a0e      	cmp	r2, #14
 800650c:	f300 8144 	bgt.w	8006798 <_dtoa_r+0x700>
 8006510:	4b67      	ldr	r3, [pc, #412]	; (80066b0 <_dtoa_r+0x618>)
 8006512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006516:	e9d3 8900 	ldrd	r8, r9, [r3]
 800651a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	f280 80d5 	bge.w	80066cc <_dtoa_r+0x634>
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f300 80d1 	bgt.w	80066cc <_dtoa_r+0x634>
 800652a:	f040 826f 	bne.w	8006a0c <_dtoa_r+0x974>
 800652e:	4b65      	ldr	r3, [pc, #404]	; (80066c4 <_dtoa_r+0x62c>)
 8006530:	2200      	movs	r2, #0
 8006532:	4640      	mov	r0, r8
 8006534:	4649      	mov	r1, r9
 8006536:	f7fa f85f 	bl	80005f8 <__aeabi_dmul>
 800653a:	4652      	mov	r2, sl
 800653c:	465b      	mov	r3, fp
 800653e:	f7fa fae1 	bl	8000b04 <__aeabi_dcmpge>
 8006542:	9e03      	ldr	r6, [sp, #12]
 8006544:	4637      	mov	r7, r6
 8006546:	2800      	cmp	r0, #0
 8006548:	f040 8245 	bne.w	80069d6 <_dtoa_r+0x93e>
 800654c:	9d01      	ldr	r5, [sp, #4]
 800654e:	2331      	movs	r3, #49	; 0x31
 8006550:	f805 3b01 	strb.w	r3, [r5], #1
 8006554:	9b00      	ldr	r3, [sp, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	e240      	b.n	80069de <_dtoa_r+0x946>
 800655c:	07f2      	lsls	r2, r6, #31
 800655e:	d505      	bpl.n	800656c <_dtoa_r+0x4d4>
 8006560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006564:	f7fa f848 	bl	80005f8 <__aeabi_dmul>
 8006568:	3501      	adds	r5, #1
 800656a:	2301      	movs	r3, #1
 800656c:	1076      	asrs	r6, r6, #1
 800656e:	3708      	adds	r7, #8
 8006570:	e777      	b.n	8006462 <_dtoa_r+0x3ca>
 8006572:	2502      	movs	r5, #2
 8006574:	e779      	b.n	800646a <_dtoa_r+0x3d2>
 8006576:	9f00      	ldr	r7, [sp, #0]
 8006578:	9e03      	ldr	r6, [sp, #12]
 800657a:	e794      	b.n	80064a6 <_dtoa_r+0x40e>
 800657c:	9901      	ldr	r1, [sp, #4]
 800657e:	4b4c      	ldr	r3, [pc, #304]	; (80066b0 <_dtoa_r+0x618>)
 8006580:	4431      	add	r1, r6
 8006582:	910d      	str	r1, [sp, #52]	; 0x34
 8006584:	9908      	ldr	r1, [sp, #32]
 8006586:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800658a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800658e:	2900      	cmp	r1, #0
 8006590:	d043      	beq.n	800661a <_dtoa_r+0x582>
 8006592:	494d      	ldr	r1, [pc, #308]	; (80066c8 <_dtoa_r+0x630>)
 8006594:	2000      	movs	r0, #0
 8006596:	f7fa f959 	bl	800084c <__aeabi_ddiv>
 800659a:	4652      	mov	r2, sl
 800659c:	465b      	mov	r3, fp
 800659e:	f7f9 fe73 	bl	8000288 <__aeabi_dsub>
 80065a2:	9d01      	ldr	r5, [sp, #4]
 80065a4:	4682      	mov	sl, r0
 80065a6:	468b      	mov	fp, r1
 80065a8:	4649      	mov	r1, r9
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7fa fad4 	bl	8000b58 <__aeabi_d2iz>
 80065b0:	4606      	mov	r6, r0
 80065b2:	f7f9 ffb7 	bl	8000524 <__aeabi_i2d>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4640      	mov	r0, r8
 80065bc:	4649      	mov	r1, r9
 80065be:	f7f9 fe63 	bl	8000288 <__aeabi_dsub>
 80065c2:	3630      	adds	r6, #48	; 0x30
 80065c4:	f805 6b01 	strb.w	r6, [r5], #1
 80065c8:	4652      	mov	r2, sl
 80065ca:	465b      	mov	r3, fp
 80065cc:	4680      	mov	r8, r0
 80065ce:	4689      	mov	r9, r1
 80065d0:	f7fa fa84 	bl	8000adc <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d163      	bne.n	80066a0 <_dtoa_r+0x608>
 80065d8:	4642      	mov	r2, r8
 80065da:	464b      	mov	r3, r9
 80065dc:	4936      	ldr	r1, [pc, #216]	; (80066b8 <_dtoa_r+0x620>)
 80065de:	2000      	movs	r0, #0
 80065e0:	f7f9 fe52 	bl	8000288 <__aeabi_dsub>
 80065e4:	4652      	mov	r2, sl
 80065e6:	465b      	mov	r3, fp
 80065e8:	f7fa fa78 	bl	8000adc <__aeabi_dcmplt>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f040 80b5 	bne.w	800675c <_dtoa_r+0x6c4>
 80065f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065f4:	429d      	cmp	r5, r3
 80065f6:	d081      	beq.n	80064fc <_dtoa_r+0x464>
 80065f8:	4b30      	ldr	r3, [pc, #192]	; (80066bc <_dtoa_r+0x624>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	4650      	mov	r0, sl
 80065fe:	4659      	mov	r1, fp
 8006600:	f7f9 fffa 	bl	80005f8 <__aeabi_dmul>
 8006604:	4b2d      	ldr	r3, [pc, #180]	; (80066bc <_dtoa_r+0x624>)
 8006606:	4682      	mov	sl, r0
 8006608:	468b      	mov	fp, r1
 800660a:	4640      	mov	r0, r8
 800660c:	4649      	mov	r1, r9
 800660e:	2200      	movs	r2, #0
 8006610:	f7f9 fff2 	bl	80005f8 <__aeabi_dmul>
 8006614:	4680      	mov	r8, r0
 8006616:	4689      	mov	r9, r1
 8006618:	e7c6      	b.n	80065a8 <_dtoa_r+0x510>
 800661a:	4650      	mov	r0, sl
 800661c:	4659      	mov	r1, fp
 800661e:	f7f9 ffeb 	bl	80005f8 <__aeabi_dmul>
 8006622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006624:	9d01      	ldr	r5, [sp, #4]
 8006626:	930f      	str	r3, [sp, #60]	; 0x3c
 8006628:	4682      	mov	sl, r0
 800662a:	468b      	mov	fp, r1
 800662c:	4649      	mov	r1, r9
 800662e:	4640      	mov	r0, r8
 8006630:	f7fa fa92 	bl	8000b58 <__aeabi_d2iz>
 8006634:	4606      	mov	r6, r0
 8006636:	f7f9 ff75 	bl	8000524 <__aeabi_i2d>
 800663a:	3630      	adds	r6, #48	; 0x30
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7f9 fe20 	bl	8000288 <__aeabi_dsub>
 8006648:	f805 6b01 	strb.w	r6, [r5], #1
 800664c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800664e:	429d      	cmp	r5, r3
 8006650:	4680      	mov	r8, r0
 8006652:	4689      	mov	r9, r1
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	d124      	bne.n	80066a4 <_dtoa_r+0x60c>
 800665a:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <_dtoa_r+0x630>)
 800665c:	4650      	mov	r0, sl
 800665e:	4659      	mov	r1, fp
 8006660:	f7f9 fe14 	bl	800028c <__adddf3>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4640      	mov	r0, r8
 800666a:	4649      	mov	r1, r9
 800666c:	f7fa fa54 	bl	8000b18 <__aeabi_dcmpgt>
 8006670:	2800      	cmp	r0, #0
 8006672:	d173      	bne.n	800675c <_dtoa_r+0x6c4>
 8006674:	4652      	mov	r2, sl
 8006676:	465b      	mov	r3, fp
 8006678:	4913      	ldr	r1, [pc, #76]	; (80066c8 <_dtoa_r+0x630>)
 800667a:	2000      	movs	r0, #0
 800667c:	f7f9 fe04 	bl	8000288 <__aeabi_dsub>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4640      	mov	r0, r8
 8006686:	4649      	mov	r1, r9
 8006688:	f7fa fa28 	bl	8000adc <__aeabi_dcmplt>
 800668c:	2800      	cmp	r0, #0
 800668e:	f43f af35 	beq.w	80064fc <_dtoa_r+0x464>
 8006692:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006694:	1e6b      	subs	r3, r5, #1
 8006696:	930f      	str	r3, [sp, #60]	; 0x3c
 8006698:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800669c:	2b30      	cmp	r3, #48	; 0x30
 800669e:	d0f8      	beq.n	8006692 <_dtoa_r+0x5fa>
 80066a0:	9700      	str	r7, [sp, #0]
 80066a2:	e049      	b.n	8006738 <_dtoa_r+0x6a0>
 80066a4:	4b05      	ldr	r3, [pc, #20]	; (80066bc <_dtoa_r+0x624>)
 80066a6:	f7f9 ffa7 	bl	80005f8 <__aeabi_dmul>
 80066aa:	4680      	mov	r8, r0
 80066ac:	4689      	mov	r9, r1
 80066ae:	e7bd      	b.n	800662c <_dtoa_r+0x594>
 80066b0:	08008fc8 	.word	0x08008fc8
 80066b4:	08008fa0 	.word	0x08008fa0
 80066b8:	3ff00000 	.word	0x3ff00000
 80066bc:	40240000 	.word	0x40240000
 80066c0:	401c0000 	.word	0x401c0000
 80066c4:	40140000 	.word	0x40140000
 80066c8:	3fe00000 	.word	0x3fe00000
 80066cc:	9d01      	ldr	r5, [sp, #4]
 80066ce:	4656      	mov	r6, sl
 80066d0:	465f      	mov	r7, fp
 80066d2:	4642      	mov	r2, r8
 80066d4:	464b      	mov	r3, r9
 80066d6:	4630      	mov	r0, r6
 80066d8:	4639      	mov	r1, r7
 80066da:	f7fa f8b7 	bl	800084c <__aeabi_ddiv>
 80066de:	f7fa fa3b 	bl	8000b58 <__aeabi_d2iz>
 80066e2:	4682      	mov	sl, r0
 80066e4:	f7f9 ff1e 	bl	8000524 <__aeabi_i2d>
 80066e8:	4642      	mov	r2, r8
 80066ea:	464b      	mov	r3, r9
 80066ec:	f7f9 ff84 	bl	80005f8 <__aeabi_dmul>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4630      	mov	r0, r6
 80066f6:	4639      	mov	r1, r7
 80066f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80066fc:	f7f9 fdc4 	bl	8000288 <__aeabi_dsub>
 8006700:	f805 6b01 	strb.w	r6, [r5], #1
 8006704:	9e01      	ldr	r6, [sp, #4]
 8006706:	9f03      	ldr	r7, [sp, #12]
 8006708:	1bae      	subs	r6, r5, r6
 800670a:	42b7      	cmp	r7, r6
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	d135      	bne.n	800677e <_dtoa_r+0x6e6>
 8006712:	f7f9 fdbb 	bl	800028c <__adddf3>
 8006716:	4642      	mov	r2, r8
 8006718:	464b      	mov	r3, r9
 800671a:	4606      	mov	r6, r0
 800671c:	460f      	mov	r7, r1
 800671e:	f7fa f9fb 	bl	8000b18 <__aeabi_dcmpgt>
 8006722:	b9d0      	cbnz	r0, 800675a <_dtoa_r+0x6c2>
 8006724:	4642      	mov	r2, r8
 8006726:	464b      	mov	r3, r9
 8006728:	4630      	mov	r0, r6
 800672a:	4639      	mov	r1, r7
 800672c:	f7fa f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006730:	b110      	cbz	r0, 8006738 <_dtoa_r+0x6a0>
 8006732:	f01a 0f01 	tst.w	sl, #1
 8006736:	d110      	bne.n	800675a <_dtoa_r+0x6c2>
 8006738:	4620      	mov	r0, r4
 800673a:	ee18 1a10 	vmov	r1, s16
 800673e:	f000 fc3d 	bl	8006fbc <_Bfree>
 8006742:	2300      	movs	r3, #0
 8006744:	9800      	ldr	r0, [sp, #0]
 8006746:	702b      	strb	r3, [r5, #0]
 8006748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800674a:	3001      	adds	r0, #1
 800674c:	6018      	str	r0, [r3, #0]
 800674e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006750:	2b00      	cmp	r3, #0
 8006752:	f43f acf1 	beq.w	8006138 <_dtoa_r+0xa0>
 8006756:	601d      	str	r5, [r3, #0]
 8006758:	e4ee      	b.n	8006138 <_dtoa_r+0xa0>
 800675a:	9f00      	ldr	r7, [sp, #0]
 800675c:	462b      	mov	r3, r5
 800675e:	461d      	mov	r5, r3
 8006760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006764:	2a39      	cmp	r2, #57	; 0x39
 8006766:	d106      	bne.n	8006776 <_dtoa_r+0x6de>
 8006768:	9a01      	ldr	r2, [sp, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d1f7      	bne.n	800675e <_dtoa_r+0x6c6>
 800676e:	9901      	ldr	r1, [sp, #4]
 8006770:	2230      	movs	r2, #48	; 0x30
 8006772:	3701      	adds	r7, #1
 8006774:	700a      	strb	r2, [r1, #0]
 8006776:	781a      	ldrb	r2, [r3, #0]
 8006778:	3201      	adds	r2, #1
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	e790      	b.n	80066a0 <_dtoa_r+0x608>
 800677e:	4ba6      	ldr	r3, [pc, #664]	; (8006a18 <_dtoa_r+0x980>)
 8006780:	2200      	movs	r2, #0
 8006782:	f7f9 ff39 	bl	80005f8 <__aeabi_dmul>
 8006786:	2200      	movs	r2, #0
 8006788:	2300      	movs	r3, #0
 800678a:	4606      	mov	r6, r0
 800678c:	460f      	mov	r7, r1
 800678e:	f7fa f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006792:	2800      	cmp	r0, #0
 8006794:	d09d      	beq.n	80066d2 <_dtoa_r+0x63a>
 8006796:	e7cf      	b.n	8006738 <_dtoa_r+0x6a0>
 8006798:	9a08      	ldr	r2, [sp, #32]
 800679a:	2a00      	cmp	r2, #0
 800679c:	f000 80d7 	beq.w	800694e <_dtoa_r+0x8b6>
 80067a0:	9a06      	ldr	r2, [sp, #24]
 80067a2:	2a01      	cmp	r2, #1
 80067a4:	f300 80ba 	bgt.w	800691c <_dtoa_r+0x884>
 80067a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	f000 80b2 	beq.w	8006914 <_dtoa_r+0x87c>
 80067b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067b4:	9e07      	ldr	r6, [sp, #28]
 80067b6:	9d04      	ldr	r5, [sp, #16]
 80067b8:	9a04      	ldr	r2, [sp, #16]
 80067ba:	441a      	add	r2, r3
 80067bc:	9204      	str	r2, [sp, #16]
 80067be:	9a05      	ldr	r2, [sp, #20]
 80067c0:	2101      	movs	r1, #1
 80067c2:	441a      	add	r2, r3
 80067c4:	4620      	mov	r0, r4
 80067c6:	9205      	str	r2, [sp, #20]
 80067c8:	f000 fcb0 	bl	800712c <__i2b>
 80067cc:	4607      	mov	r7, r0
 80067ce:	2d00      	cmp	r5, #0
 80067d0:	dd0c      	ble.n	80067ec <_dtoa_r+0x754>
 80067d2:	9b05      	ldr	r3, [sp, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dd09      	ble.n	80067ec <_dtoa_r+0x754>
 80067d8:	42ab      	cmp	r3, r5
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	bfa8      	it	ge
 80067de:	462b      	movge	r3, r5
 80067e0:	1ad2      	subs	r2, r2, r3
 80067e2:	9204      	str	r2, [sp, #16]
 80067e4:	9a05      	ldr	r2, [sp, #20]
 80067e6:	1aed      	subs	r5, r5, r3
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	9b07      	ldr	r3, [sp, #28]
 80067ee:	b31b      	cbz	r3, 8006838 <_dtoa_r+0x7a0>
 80067f0:	9b08      	ldr	r3, [sp, #32]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 80af 	beq.w	8006956 <_dtoa_r+0x8be>
 80067f8:	2e00      	cmp	r6, #0
 80067fa:	dd13      	ble.n	8006824 <_dtoa_r+0x78c>
 80067fc:	4639      	mov	r1, r7
 80067fe:	4632      	mov	r2, r6
 8006800:	4620      	mov	r0, r4
 8006802:	f000 fd53 	bl	80072ac <__pow5mult>
 8006806:	ee18 2a10 	vmov	r2, s16
 800680a:	4601      	mov	r1, r0
 800680c:	4607      	mov	r7, r0
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fca2 	bl	8007158 <__multiply>
 8006814:	ee18 1a10 	vmov	r1, s16
 8006818:	4680      	mov	r8, r0
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fbce 	bl	8006fbc <_Bfree>
 8006820:	ee08 8a10 	vmov	s16, r8
 8006824:	9b07      	ldr	r3, [sp, #28]
 8006826:	1b9a      	subs	r2, r3, r6
 8006828:	d006      	beq.n	8006838 <_dtoa_r+0x7a0>
 800682a:	ee18 1a10 	vmov	r1, s16
 800682e:	4620      	mov	r0, r4
 8006830:	f000 fd3c 	bl	80072ac <__pow5mult>
 8006834:	ee08 0a10 	vmov	s16, r0
 8006838:	2101      	movs	r1, #1
 800683a:	4620      	mov	r0, r4
 800683c:	f000 fc76 	bl	800712c <__i2b>
 8006840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006842:	2b00      	cmp	r3, #0
 8006844:	4606      	mov	r6, r0
 8006846:	f340 8088 	ble.w	800695a <_dtoa_r+0x8c2>
 800684a:	461a      	mov	r2, r3
 800684c:	4601      	mov	r1, r0
 800684e:	4620      	mov	r0, r4
 8006850:	f000 fd2c 	bl	80072ac <__pow5mult>
 8006854:	9b06      	ldr	r3, [sp, #24]
 8006856:	2b01      	cmp	r3, #1
 8006858:	4606      	mov	r6, r0
 800685a:	f340 8081 	ble.w	8006960 <_dtoa_r+0x8c8>
 800685e:	f04f 0800 	mov.w	r8, #0
 8006862:	6933      	ldr	r3, [r6, #16]
 8006864:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006868:	6918      	ldr	r0, [r3, #16]
 800686a:	f000 fc0f 	bl	800708c <__hi0bits>
 800686e:	f1c0 0020 	rsb	r0, r0, #32
 8006872:	9b05      	ldr	r3, [sp, #20]
 8006874:	4418      	add	r0, r3
 8006876:	f010 001f 	ands.w	r0, r0, #31
 800687a:	f000 8092 	beq.w	80069a2 <_dtoa_r+0x90a>
 800687e:	f1c0 0320 	rsb	r3, r0, #32
 8006882:	2b04      	cmp	r3, #4
 8006884:	f340 808a 	ble.w	800699c <_dtoa_r+0x904>
 8006888:	f1c0 001c 	rsb	r0, r0, #28
 800688c:	9b04      	ldr	r3, [sp, #16]
 800688e:	4403      	add	r3, r0
 8006890:	9304      	str	r3, [sp, #16]
 8006892:	9b05      	ldr	r3, [sp, #20]
 8006894:	4403      	add	r3, r0
 8006896:	4405      	add	r5, r0
 8006898:	9305      	str	r3, [sp, #20]
 800689a:	9b04      	ldr	r3, [sp, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	dd07      	ble.n	80068b0 <_dtoa_r+0x818>
 80068a0:	ee18 1a10 	vmov	r1, s16
 80068a4:	461a      	mov	r2, r3
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 fd5a 	bl	8007360 <__lshift>
 80068ac:	ee08 0a10 	vmov	s16, r0
 80068b0:	9b05      	ldr	r3, [sp, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dd05      	ble.n	80068c2 <_dtoa_r+0x82a>
 80068b6:	4631      	mov	r1, r6
 80068b8:	461a      	mov	r2, r3
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 fd50 	bl	8007360 <__lshift>
 80068c0:	4606      	mov	r6, r0
 80068c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d06e      	beq.n	80069a6 <_dtoa_r+0x90e>
 80068c8:	ee18 0a10 	vmov	r0, s16
 80068cc:	4631      	mov	r1, r6
 80068ce:	f000 fdb7 	bl	8007440 <__mcmp>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	da67      	bge.n	80069a6 <_dtoa_r+0x90e>
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	3b01      	subs	r3, #1
 80068da:	ee18 1a10 	vmov	r1, s16
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	220a      	movs	r2, #10
 80068e2:	2300      	movs	r3, #0
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 fb8b 	bl	8007000 <__multadd>
 80068ea:	9b08      	ldr	r3, [sp, #32]
 80068ec:	ee08 0a10 	vmov	s16, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 81b1 	beq.w	8006c58 <_dtoa_r+0xbc0>
 80068f6:	2300      	movs	r3, #0
 80068f8:	4639      	mov	r1, r7
 80068fa:	220a      	movs	r2, #10
 80068fc:	4620      	mov	r0, r4
 80068fe:	f000 fb7f 	bl	8007000 <__multadd>
 8006902:	9b02      	ldr	r3, [sp, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	4607      	mov	r7, r0
 8006908:	f300 808e 	bgt.w	8006a28 <_dtoa_r+0x990>
 800690c:	9b06      	ldr	r3, [sp, #24]
 800690e:	2b02      	cmp	r3, #2
 8006910:	dc51      	bgt.n	80069b6 <_dtoa_r+0x91e>
 8006912:	e089      	b.n	8006a28 <_dtoa_r+0x990>
 8006914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006916:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800691a:	e74b      	b.n	80067b4 <_dtoa_r+0x71c>
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	1e5e      	subs	r6, r3, #1
 8006920:	9b07      	ldr	r3, [sp, #28]
 8006922:	42b3      	cmp	r3, r6
 8006924:	bfbf      	itttt	lt
 8006926:	9b07      	ldrlt	r3, [sp, #28]
 8006928:	9607      	strlt	r6, [sp, #28]
 800692a:	1af2      	sublt	r2, r6, r3
 800692c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800692e:	bfb6      	itet	lt
 8006930:	189b      	addlt	r3, r3, r2
 8006932:	1b9e      	subge	r6, r3, r6
 8006934:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	bfb8      	it	lt
 800693a:	2600      	movlt	r6, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	bfb7      	itett	lt
 8006940:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006944:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006948:	1a9d      	sublt	r5, r3, r2
 800694a:	2300      	movlt	r3, #0
 800694c:	e734      	b.n	80067b8 <_dtoa_r+0x720>
 800694e:	9e07      	ldr	r6, [sp, #28]
 8006950:	9d04      	ldr	r5, [sp, #16]
 8006952:	9f08      	ldr	r7, [sp, #32]
 8006954:	e73b      	b.n	80067ce <_dtoa_r+0x736>
 8006956:	9a07      	ldr	r2, [sp, #28]
 8006958:	e767      	b.n	800682a <_dtoa_r+0x792>
 800695a:	9b06      	ldr	r3, [sp, #24]
 800695c:	2b01      	cmp	r3, #1
 800695e:	dc18      	bgt.n	8006992 <_dtoa_r+0x8fa>
 8006960:	f1ba 0f00 	cmp.w	sl, #0
 8006964:	d115      	bne.n	8006992 <_dtoa_r+0x8fa>
 8006966:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800696a:	b993      	cbnz	r3, 8006992 <_dtoa_r+0x8fa>
 800696c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006970:	0d1b      	lsrs	r3, r3, #20
 8006972:	051b      	lsls	r3, r3, #20
 8006974:	b183      	cbz	r3, 8006998 <_dtoa_r+0x900>
 8006976:	9b04      	ldr	r3, [sp, #16]
 8006978:	3301      	adds	r3, #1
 800697a:	9304      	str	r3, [sp, #16]
 800697c:	9b05      	ldr	r3, [sp, #20]
 800697e:	3301      	adds	r3, #1
 8006980:	9305      	str	r3, [sp, #20]
 8006982:	f04f 0801 	mov.w	r8, #1
 8006986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006988:	2b00      	cmp	r3, #0
 800698a:	f47f af6a 	bne.w	8006862 <_dtoa_r+0x7ca>
 800698e:	2001      	movs	r0, #1
 8006990:	e76f      	b.n	8006872 <_dtoa_r+0x7da>
 8006992:	f04f 0800 	mov.w	r8, #0
 8006996:	e7f6      	b.n	8006986 <_dtoa_r+0x8ee>
 8006998:	4698      	mov	r8, r3
 800699a:	e7f4      	b.n	8006986 <_dtoa_r+0x8ee>
 800699c:	f43f af7d 	beq.w	800689a <_dtoa_r+0x802>
 80069a0:	4618      	mov	r0, r3
 80069a2:	301c      	adds	r0, #28
 80069a4:	e772      	b.n	800688c <_dtoa_r+0x7f4>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dc37      	bgt.n	8006a1c <_dtoa_r+0x984>
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	dd34      	ble.n	8006a1c <_dtoa_r+0x984>
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	9302      	str	r3, [sp, #8]
 80069b6:	9b02      	ldr	r3, [sp, #8]
 80069b8:	b96b      	cbnz	r3, 80069d6 <_dtoa_r+0x93e>
 80069ba:	4631      	mov	r1, r6
 80069bc:	2205      	movs	r2, #5
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 fb1e 	bl	8007000 <__multadd>
 80069c4:	4601      	mov	r1, r0
 80069c6:	4606      	mov	r6, r0
 80069c8:	ee18 0a10 	vmov	r0, s16
 80069cc:	f000 fd38 	bl	8007440 <__mcmp>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	f73f adbb 	bgt.w	800654c <_dtoa_r+0x4b4>
 80069d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d8:	9d01      	ldr	r5, [sp, #4]
 80069da:	43db      	mvns	r3, r3
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	f04f 0800 	mov.w	r8, #0
 80069e2:	4631      	mov	r1, r6
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 fae9 	bl	8006fbc <_Bfree>
 80069ea:	2f00      	cmp	r7, #0
 80069ec:	f43f aea4 	beq.w	8006738 <_dtoa_r+0x6a0>
 80069f0:	f1b8 0f00 	cmp.w	r8, #0
 80069f4:	d005      	beq.n	8006a02 <_dtoa_r+0x96a>
 80069f6:	45b8      	cmp	r8, r7
 80069f8:	d003      	beq.n	8006a02 <_dtoa_r+0x96a>
 80069fa:	4641      	mov	r1, r8
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 fadd 	bl	8006fbc <_Bfree>
 8006a02:	4639      	mov	r1, r7
 8006a04:	4620      	mov	r0, r4
 8006a06:	f000 fad9 	bl	8006fbc <_Bfree>
 8006a0a:	e695      	b.n	8006738 <_dtoa_r+0x6a0>
 8006a0c:	2600      	movs	r6, #0
 8006a0e:	4637      	mov	r7, r6
 8006a10:	e7e1      	b.n	80069d6 <_dtoa_r+0x93e>
 8006a12:	9700      	str	r7, [sp, #0]
 8006a14:	4637      	mov	r7, r6
 8006a16:	e599      	b.n	800654c <_dtoa_r+0x4b4>
 8006a18:	40240000 	.word	0x40240000
 8006a1c:	9b08      	ldr	r3, [sp, #32]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 80ca 	beq.w	8006bb8 <_dtoa_r+0xb20>
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	dd05      	ble.n	8006a38 <_dtoa_r+0x9a0>
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	462a      	mov	r2, r5
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 fc95 	bl	8007360 <__lshift>
 8006a36:	4607      	mov	r7, r0
 8006a38:	f1b8 0f00 	cmp.w	r8, #0
 8006a3c:	d05b      	beq.n	8006af6 <_dtoa_r+0xa5e>
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 fa7b 	bl	8006f3c <_Balloc>
 8006a46:	4605      	mov	r5, r0
 8006a48:	b928      	cbnz	r0, 8006a56 <_dtoa_r+0x9be>
 8006a4a:	4b87      	ldr	r3, [pc, #540]	; (8006c68 <_dtoa_r+0xbd0>)
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a52:	f7ff bb3b 	b.w	80060cc <_dtoa_r+0x34>
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	3202      	adds	r2, #2
 8006a5a:	0092      	lsls	r2, r2, #2
 8006a5c:	f107 010c 	add.w	r1, r7, #12
 8006a60:	300c      	adds	r0, #12
 8006a62:	f7fe fc02 	bl	800526a <memcpy>
 8006a66:	2201      	movs	r2, #1
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 fc78 	bl	8007360 <__lshift>
 8006a70:	9b01      	ldr	r3, [sp, #4]
 8006a72:	f103 0901 	add.w	r9, r3, #1
 8006a76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	9305      	str	r3, [sp, #20]
 8006a7e:	f00a 0301 	and.w	r3, sl, #1
 8006a82:	46b8      	mov	r8, r7
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	4607      	mov	r7, r0
 8006a88:	4631      	mov	r1, r6
 8006a8a:	ee18 0a10 	vmov	r0, s16
 8006a8e:	f7ff fa75 	bl	8005f7c <quorem>
 8006a92:	4641      	mov	r1, r8
 8006a94:	9002      	str	r0, [sp, #8]
 8006a96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a9a:	ee18 0a10 	vmov	r0, s16
 8006a9e:	f000 fccf 	bl	8007440 <__mcmp>
 8006aa2:	463a      	mov	r2, r7
 8006aa4:	9003      	str	r0, [sp, #12]
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 fce5 	bl	8007478 <__mdiff>
 8006aae:	68c2      	ldr	r2, [r0, #12]
 8006ab0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	bb02      	cbnz	r2, 8006afa <_dtoa_r+0xa62>
 8006ab8:	4601      	mov	r1, r0
 8006aba:	ee18 0a10 	vmov	r0, s16
 8006abe:	f000 fcbf 	bl	8007440 <__mcmp>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	9207      	str	r2, [sp, #28]
 8006aca:	f000 fa77 	bl	8006fbc <_Bfree>
 8006ace:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ad2:	ea43 0102 	orr.w	r1, r3, r2
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	464d      	mov	r5, r9
 8006adc:	d10f      	bne.n	8006afe <_dtoa_r+0xa66>
 8006ade:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ae2:	d02a      	beq.n	8006b3a <_dtoa_r+0xaa2>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dd02      	ble.n	8006af0 <_dtoa_r+0xa58>
 8006aea:	9b02      	ldr	r3, [sp, #8]
 8006aec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006af0:	f88b a000 	strb.w	sl, [fp]
 8006af4:	e775      	b.n	80069e2 <_dtoa_r+0x94a>
 8006af6:	4638      	mov	r0, r7
 8006af8:	e7ba      	b.n	8006a70 <_dtoa_r+0x9d8>
 8006afa:	2201      	movs	r2, #1
 8006afc:	e7e2      	b.n	8006ac4 <_dtoa_r+0xa2c>
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	db04      	blt.n	8006b0e <_dtoa_r+0xa76>
 8006b04:	9906      	ldr	r1, [sp, #24]
 8006b06:	430b      	orrs	r3, r1
 8006b08:	9904      	ldr	r1, [sp, #16]
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	d122      	bne.n	8006b54 <_dtoa_r+0xabc>
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	ddee      	ble.n	8006af0 <_dtoa_r+0xa58>
 8006b12:	ee18 1a10 	vmov	r1, s16
 8006b16:	2201      	movs	r2, #1
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 fc21 	bl	8007360 <__lshift>
 8006b1e:	4631      	mov	r1, r6
 8006b20:	ee08 0a10 	vmov	s16, r0
 8006b24:	f000 fc8c 	bl	8007440 <__mcmp>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	dc03      	bgt.n	8006b34 <_dtoa_r+0xa9c>
 8006b2c:	d1e0      	bne.n	8006af0 <_dtoa_r+0xa58>
 8006b2e:	f01a 0f01 	tst.w	sl, #1
 8006b32:	d0dd      	beq.n	8006af0 <_dtoa_r+0xa58>
 8006b34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b38:	d1d7      	bne.n	8006aea <_dtoa_r+0xa52>
 8006b3a:	2339      	movs	r3, #57	; 0x39
 8006b3c:	f88b 3000 	strb.w	r3, [fp]
 8006b40:	462b      	mov	r3, r5
 8006b42:	461d      	mov	r5, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b4a:	2a39      	cmp	r2, #57	; 0x39
 8006b4c:	d071      	beq.n	8006c32 <_dtoa_r+0xb9a>
 8006b4e:	3201      	adds	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	e746      	b.n	80069e2 <_dtoa_r+0x94a>
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	dd07      	ble.n	8006b68 <_dtoa_r+0xad0>
 8006b58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b5c:	d0ed      	beq.n	8006b3a <_dtoa_r+0xaa2>
 8006b5e:	f10a 0301 	add.w	r3, sl, #1
 8006b62:	f88b 3000 	strb.w	r3, [fp]
 8006b66:	e73c      	b.n	80069e2 <_dtoa_r+0x94a>
 8006b68:	9b05      	ldr	r3, [sp, #20]
 8006b6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b6e:	4599      	cmp	r9, r3
 8006b70:	d047      	beq.n	8006c02 <_dtoa_r+0xb6a>
 8006b72:	ee18 1a10 	vmov	r1, s16
 8006b76:	2300      	movs	r3, #0
 8006b78:	220a      	movs	r2, #10
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 fa40 	bl	8007000 <__multadd>
 8006b80:	45b8      	cmp	r8, r7
 8006b82:	ee08 0a10 	vmov	s16, r0
 8006b86:	f04f 0300 	mov.w	r3, #0
 8006b8a:	f04f 020a 	mov.w	r2, #10
 8006b8e:	4641      	mov	r1, r8
 8006b90:	4620      	mov	r0, r4
 8006b92:	d106      	bne.n	8006ba2 <_dtoa_r+0xb0a>
 8006b94:	f000 fa34 	bl	8007000 <__multadd>
 8006b98:	4680      	mov	r8, r0
 8006b9a:	4607      	mov	r7, r0
 8006b9c:	f109 0901 	add.w	r9, r9, #1
 8006ba0:	e772      	b.n	8006a88 <_dtoa_r+0x9f0>
 8006ba2:	f000 fa2d 	bl	8007000 <__multadd>
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	4680      	mov	r8, r0
 8006baa:	2300      	movs	r3, #0
 8006bac:	220a      	movs	r2, #10
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 fa26 	bl	8007000 <__multadd>
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	e7f1      	b.n	8006b9c <_dtoa_r+0xb04>
 8006bb8:	9b03      	ldr	r3, [sp, #12]
 8006bba:	9302      	str	r3, [sp, #8]
 8006bbc:	9d01      	ldr	r5, [sp, #4]
 8006bbe:	ee18 0a10 	vmov	r0, s16
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	f7ff f9da 	bl	8005f7c <quorem>
 8006bc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006bcc:	9b01      	ldr	r3, [sp, #4]
 8006bce:	f805 ab01 	strb.w	sl, [r5], #1
 8006bd2:	1aea      	subs	r2, r5, r3
 8006bd4:	9b02      	ldr	r3, [sp, #8]
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	dd09      	ble.n	8006bee <_dtoa_r+0xb56>
 8006bda:	ee18 1a10 	vmov	r1, s16
 8006bde:	2300      	movs	r3, #0
 8006be0:	220a      	movs	r2, #10
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fa0c 	bl	8007000 <__multadd>
 8006be8:	ee08 0a10 	vmov	s16, r0
 8006bec:	e7e7      	b.n	8006bbe <_dtoa_r+0xb26>
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bfc8      	it	gt
 8006bf4:	461d      	movgt	r5, r3
 8006bf6:	9b01      	ldr	r3, [sp, #4]
 8006bf8:	bfd8      	it	le
 8006bfa:	2501      	movle	r5, #1
 8006bfc:	441d      	add	r5, r3
 8006bfe:	f04f 0800 	mov.w	r8, #0
 8006c02:	ee18 1a10 	vmov	r1, s16
 8006c06:	2201      	movs	r2, #1
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f000 fba9 	bl	8007360 <__lshift>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	ee08 0a10 	vmov	s16, r0
 8006c14:	f000 fc14 	bl	8007440 <__mcmp>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	dc91      	bgt.n	8006b40 <_dtoa_r+0xaa8>
 8006c1c:	d102      	bne.n	8006c24 <_dtoa_r+0xb8c>
 8006c1e:	f01a 0f01 	tst.w	sl, #1
 8006c22:	d18d      	bne.n	8006b40 <_dtoa_r+0xaa8>
 8006c24:	462b      	mov	r3, r5
 8006c26:	461d      	mov	r5, r3
 8006c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c2c:	2a30      	cmp	r2, #48	; 0x30
 8006c2e:	d0fa      	beq.n	8006c26 <_dtoa_r+0xb8e>
 8006c30:	e6d7      	b.n	80069e2 <_dtoa_r+0x94a>
 8006c32:	9a01      	ldr	r2, [sp, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d184      	bne.n	8006b42 <_dtoa_r+0xaaa>
 8006c38:	9b00      	ldr	r3, [sp, #0]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	2331      	movs	r3, #49	; 0x31
 8006c40:	7013      	strb	r3, [r2, #0]
 8006c42:	e6ce      	b.n	80069e2 <_dtoa_r+0x94a>
 8006c44:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <_dtoa_r+0xbd4>)
 8006c46:	f7ff ba95 	b.w	8006174 <_dtoa_r+0xdc>
 8006c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f47f aa6e 	bne.w	800612e <_dtoa_r+0x96>
 8006c52:	4b07      	ldr	r3, [pc, #28]	; (8006c70 <_dtoa_r+0xbd8>)
 8006c54:	f7ff ba8e 	b.w	8006174 <_dtoa_r+0xdc>
 8006c58:	9b02      	ldr	r3, [sp, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	dcae      	bgt.n	8006bbc <_dtoa_r+0xb24>
 8006c5e:	9b06      	ldr	r3, [sp, #24]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	f73f aea8 	bgt.w	80069b6 <_dtoa_r+0x91e>
 8006c66:	e7a9      	b.n	8006bbc <_dtoa_r+0xb24>
 8006c68:	08008f2f 	.word	0x08008f2f
 8006c6c:	08008e50 	.word	0x08008e50
 8006c70:	08008eb0 	.word	0x08008eb0

08006c74 <__sflush_r>:
 8006c74:	898a      	ldrh	r2, [r1, #12]
 8006c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	0710      	lsls	r0, r2, #28
 8006c7e:	460c      	mov	r4, r1
 8006c80:	d458      	bmi.n	8006d34 <__sflush_r+0xc0>
 8006c82:	684b      	ldr	r3, [r1, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	dc05      	bgt.n	8006c94 <__sflush_r+0x20>
 8006c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dc02      	bgt.n	8006c94 <__sflush_r+0x20>
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c96:	2e00      	cmp	r6, #0
 8006c98:	d0f9      	beq.n	8006c8e <__sflush_r+0x1a>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ca0:	682f      	ldr	r7, [r5, #0]
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	d032      	beq.n	8006d0c <__sflush_r+0x98>
 8006ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	075a      	lsls	r2, r3, #29
 8006cac:	d505      	bpl.n	8006cba <__sflush_r+0x46>
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	1ac0      	subs	r0, r0, r3
 8006cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cb4:	b10b      	cbz	r3, 8006cba <__sflush_r+0x46>
 8006cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cb8:	1ac0      	subs	r0, r0, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc0:	6a21      	ldr	r1, [r4, #32]
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b0      	blx	r6
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	d106      	bne.n	8006cda <__sflush_r+0x66>
 8006ccc:	6829      	ldr	r1, [r5, #0]
 8006cce:	291d      	cmp	r1, #29
 8006cd0:	d82c      	bhi.n	8006d2c <__sflush_r+0xb8>
 8006cd2:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <__sflush_r+0x108>)
 8006cd4:	40ca      	lsrs	r2, r1
 8006cd6:	07d6      	lsls	r6, r2, #31
 8006cd8:	d528      	bpl.n	8006d2c <__sflush_r+0xb8>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	6062      	str	r2, [r4, #4]
 8006cde:	04d9      	lsls	r1, r3, #19
 8006ce0:	6922      	ldr	r2, [r4, #16]
 8006ce2:	6022      	str	r2, [r4, #0]
 8006ce4:	d504      	bpl.n	8006cf0 <__sflush_r+0x7c>
 8006ce6:	1c42      	adds	r2, r0, #1
 8006ce8:	d101      	bne.n	8006cee <__sflush_r+0x7a>
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	b903      	cbnz	r3, 8006cf0 <__sflush_r+0x7c>
 8006cee:	6560      	str	r0, [r4, #84]	; 0x54
 8006cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cf2:	602f      	str	r7, [r5, #0]
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	d0ca      	beq.n	8006c8e <__sflush_r+0x1a>
 8006cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cfc:	4299      	cmp	r1, r3
 8006cfe:	d002      	beq.n	8006d06 <__sflush_r+0x92>
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 fcb5 	bl	8007670 <_free_r>
 8006d06:	2000      	movs	r0, #0
 8006d08:	6360      	str	r0, [r4, #52]	; 0x34
 8006d0a:	e7c1      	b.n	8006c90 <__sflush_r+0x1c>
 8006d0c:	6a21      	ldr	r1, [r4, #32]
 8006d0e:	2301      	movs	r3, #1
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b0      	blx	r6
 8006d14:	1c41      	adds	r1, r0, #1
 8006d16:	d1c7      	bne.n	8006ca8 <__sflush_r+0x34>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0c4      	beq.n	8006ca8 <__sflush_r+0x34>
 8006d1e:	2b1d      	cmp	r3, #29
 8006d20:	d001      	beq.n	8006d26 <__sflush_r+0xb2>
 8006d22:	2b16      	cmp	r3, #22
 8006d24:	d101      	bne.n	8006d2a <__sflush_r+0xb6>
 8006d26:	602f      	str	r7, [r5, #0]
 8006d28:	e7b1      	b.n	8006c8e <__sflush_r+0x1a>
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d30:	81a3      	strh	r3, [r4, #12]
 8006d32:	e7ad      	b.n	8006c90 <__sflush_r+0x1c>
 8006d34:	690f      	ldr	r7, [r1, #16]
 8006d36:	2f00      	cmp	r7, #0
 8006d38:	d0a9      	beq.n	8006c8e <__sflush_r+0x1a>
 8006d3a:	0793      	lsls	r3, r2, #30
 8006d3c:	680e      	ldr	r6, [r1, #0]
 8006d3e:	bf08      	it	eq
 8006d40:	694b      	ldreq	r3, [r1, #20]
 8006d42:	600f      	str	r7, [r1, #0]
 8006d44:	bf18      	it	ne
 8006d46:	2300      	movne	r3, #0
 8006d48:	eba6 0807 	sub.w	r8, r6, r7
 8006d4c:	608b      	str	r3, [r1, #8]
 8006d4e:	f1b8 0f00 	cmp.w	r8, #0
 8006d52:	dd9c      	ble.n	8006c8e <__sflush_r+0x1a>
 8006d54:	6a21      	ldr	r1, [r4, #32]
 8006d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d58:	4643      	mov	r3, r8
 8006d5a:	463a      	mov	r2, r7
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	47b0      	blx	r6
 8006d60:	2800      	cmp	r0, #0
 8006d62:	dc06      	bgt.n	8006d72 <__sflush_r+0xfe>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	e78e      	b.n	8006c90 <__sflush_r+0x1c>
 8006d72:	4407      	add	r7, r0
 8006d74:	eba8 0800 	sub.w	r8, r8, r0
 8006d78:	e7e9      	b.n	8006d4e <__sflush_r+0xda>
 8006d7a:	bf00      	nop
 8006d7c:	20400001 	.word	0x20400001

08006d80 <_fflush_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	690b      	ldr	r3, [r1, #16]
 8006d84:	4605      	mov	r5, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	b913      	cbnz	r3, 8006d90 <_fflush_r+0x10>
 8006d8a:	2500      	movs	r5, #0
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	b118      	cbz	r0, 8006d9a <_fflush_r+0x1a>
 8006d92:	6983      	ldr	r3, [r0, #24]
 8006d94:	b90b      	cbnz	r3, 8006d9a <_fflush_r+0x1a>
 8006d96:	f7fe f9a3 	bl	80050e0 <__sinit>
 8006d9a:	4b14      	ldr	r3, [pc, #80]	; (8006dec <_fflush_r+0x6c>)
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	d11b      	bne.n	8006dd8 <_fflush_r+0x58>
 8006da0:	686c      	ldr	r4, [r5, #4]
 8006da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0ef      	beq.n	8006d8a <_fflush_r+0xa>
 8006daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dac:	07d0      	lsls	r0, r2, #31
 8006dae:	d404      	bmi.n	8006dba <_fflush_r+0x3a>
 8006db0:	0599      	lsls	r1, r3, #22
 8006db2:	d402      	bmi.n	8006dba <_fflush_r+0x3a>
 8006db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006db6:	f7fe fa56 	bl	8005266 <__retarget_lock_acquire_recursive>
 8006dba:	4628      	mov	r0, r5
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	f7ff ff59 	bl	8006c74 <__sflush_r>
 8006dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dc4:	07da      	lsls	r2, r3, #31
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	d4e0      	bmi.n	8006d8c <_fflush_r+0xc>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	059b      	lsls	r3, r3, #22
 8006dce:	d4dd      	bmi.n	8006d8c <_fflush_r+0xc>
 8006dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dd2:	f7fe fa49 	bl	8005268 <__retarget_lock_release_recursive>
 8006dd6:	e7d9      	b.n	8006d8c <_fflush_r+0xc>
 8006dd8:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <_fflush_r+0x70>)
 8006dda:	429c      	cmp	r4, r3
 8006ddc:	d101      	bne.n	8006de2 <_fflush_r+0x62>
 8006dde:	68ac      	ldr	r4, [r5, #8]
 8006de0:	e7df      	b.n	8006da2 <_fflush_r+0x22>
 8006de2:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <_fflush_r+0x74>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	bf08      	it	eq
 8006de8:	68ec      	ldreq	r4, [r5, #12]
 8006dea:	e7da      	b.n	8006da2 <_fflush_r+0x22>
 8006dec:	08008dfc 	.word	0x08008dfc
 8006df0:	08008e1c 	.word	0x08008e1c
 8006df4:	08008ddc 	.word	0x08008ddc

08006df8 <fiprintf>:
 8006df8:	b40e      	push	{r1, r2, r3}
 8006dfa:	b503      	push	{r0, r1, lr}
 8006dfc:	4601      	mov	r1, r0
 8006dfe:	ab03      	add	r3, sp, #12
 8006e00:	4805      	ldr	r0, [pc, #20]	; (8006e18 <fiprintf+0x20>)
 8006e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e06:	6800      	ldr	r0, [r0, #0]
 8006e08:	9301      	str	r3, [sp, #4]
 8006e0a:	f000 fe03 	bl	8007a14 <_vfiprintf_r>
 8006e0e:	b002      	add	sp, #8
 8006e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e14:	b003      	add	sp, #12
 8006e16:	4770      	bx	lr
 8006e18:	200000e4 	.word	0x200000e4

08006e1c <_localeconv_r>:
 8006e1c:	4800      	ldr	r0, [pc, #0]	; (8006e20 <_localeconv_r+0x4>)
 8006e1e:	4770      	bx	lr
 8006e20:	20000238 	.word	0x20000238

08006e24 <_lseek_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d07      	ldr	r5, [pc, #28]	; (8006e44 <_lseek_r+0x20>)
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f7fd fee7 	bl	8004c06 <_lseek>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_lseek_r+0x1e>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_lseek_r+0x1e>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	20000484 	.word	0x20000484

08006e48 <__swhatbuf_r>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	460e      	mov	r6, r1
 8006e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e50:	2900      	cmp	r1, #0
 8006e52:	b096      	sub	sp, #88	; 0x58
 8006e54:	4614      	mov	r4, r2
 8006e56:	461d      	mov	r5, r3
 8006e58:	da08      	bge.n	8006e6c <__swhatbuf_r+0x24>
 8006e5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	602a      	str	r2, [r5, #0]
 8006e62:	061a      	lsls	r2, r3, #24
 8006e64:	d410      	bmi.n	8006e88 <__swhatbuf_r+0x40>
 8006e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e6a:	e00e      	b.n	8006e8a <__swhatbuf_r+0x42>
 8006e6c:	466a      	mov	r2, sp
 8006e6e:	f000 ff1b 	bl	8007ca8 <_fstat_r>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	dbf1      	blt.n	8006e5a <__swhatbuf_r+0x12>
 8006e76:	9a01      	ldr	r2, [sp, #4]
 8006e78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e80:	425a      	negs	r2, r3
 8006e82:	415a      	adcs	r2, r3
 8006e84:	602a      	str	r2, [r5, #0]
 8006e86:	e7ee      	b.n	8006e66 <__swhatbuf_r+0x1e>
 8006e88:	2340      	movs	r3, #64	; 0x40
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	b016      	add	sp, #88	; 0x58
 8006e90:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e94 <__smakebuf_r>:
 8006e94:	898b      	ldrh	r3, [r1, #12]
 8006e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e98:	079d      	lsls	r5, r3, #30
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	d507      	bpl.n	8006eb0 <__smakebuf_r+0x1c>
 8006ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	6123      	str	r3, [r4, #16]
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	6163      	str	r3, [r4, #20]
 8006eac:	b002      	add	sp, #8
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	ab01      	add	r3, sp, #4
 8006eb2:	466a      	mov	r2, sp
 8006eb4:	f7ff ffc8 	bl	8006e48 <__swhatbuf_r>
 8006eb8:	9900      	ldr	r1, [sp, #0]
 8006eba:	4605      	mov	r5, r0
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f7fe fa0b 	bl	80052d8 <_malloc_r>
 8006ec2:	b948      	cbnz	r0, 8006ed8 <__smakebuf_r+0x44>
 8006ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec8:	059a      	lsls	r2, r3, #22
 8006eca:	d4ef      	bmi.n	8006eac <__smakebuf_r+0x18>
 8006ecc:	f023 0303 	bic.w	r3, r3, #3
 8006ed0:	f043 0302 	orr.w	r3, r3, #2
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	e7e3      	b.n	8006ea0 <__smakebuf_r+0xc>
 8006ed8:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <__smakebuf_r+0x7c>)
 8006eda:	62b3      	str	r3, [r6, #40]	; 0x28
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	6020      	str	r0, [r4, #0]
 8006ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	9b00      	ldr	r3, [sp, #0]
 8006ee8:	6163      	str	r3, [r4, #20]
 8006eea:	9b01      	ldr	r3, [sp, #4]
 8006eec:	6120      	str	r0, [r4, #16]
 8006eee:	b15b      	cbz	r3, 8006f08 <__smakebuf_r+0x74>
 8006ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 fee9 	bl	8007ccc <_isatty_r>
 8006efa:	b128      	cbz	r0, 8006f08 <__smakebuf_r+0x74>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	f043 0301 	orr.w	r3, r3, #1
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	89a0      	ldrh	r0, [r4, #12]
 8006f0a:	4305      	orrs	r5, r0
 8006f0c:	81a5      	strh	r5, [r4, #12]
 8006f0e:	e7cd      	b.n	8006eac <__smakebuf_r+0x18>
 8006f10:	08005079 	.word	0x08005079

08006f14 <malloc>:
 8006f14:	4b02      	ldr	r3, [pc, #8]	; (8006f20 <malloc+0xc>)
 8006f16:	4601      	mov	r1, r0
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	f7fe b9dd 	b.w	80052d8 <_malloc_r>
 8006f1e:	bf00      	nop
 8006f20:	200000e4 	.word	0x200000e4

08006f24 <__malloc_lock>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__malloc_lock+0x8>)
 8006f26:	f7fe b99e 	b.w	8005266 <__retarget_lock_acquire_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	20000478 	.word	0x20000478

08006f30 <__malloc_unlock>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__malloc_unlock+0x8>)
 8006f32:	f7fe b999 	b.w	8005268 <__retarget_lock_release_recursive>
 8006f36:	bf00      	nop
 8006f38:	20000478 	.word	0x20000478

08006f3c <_Balloc>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f40:	4604      	mov	r4, r0
 8006f42:	460d      	mov	r5, r1
 8006f44:	b976      	cbnz	r6, 8006f64 <_Balloc+0x28>
 8006f46:	2010      	movs	r0, #16
 8006f48:	f7ff ffe4 	bl	8006f14 <malloc>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	6260      	str	r0, [r4, #36]	; 0x24
 8006f50:	b920      	cbnz	r0, 8006f5c <_Balloc+0x20>
 8006f52:	4b18      	ldr	r3, [pc, #96]	; (8006fb4 <_Balloc+0x78>)
 8006f54:	4818      	ldr	r0, [pc, #96]	; (8006fb8 <_Balloc+0x7c>)
 8006f56:	2166      	movs	r1, #102	; 0x66
 8006f58:	f7fe ffe2 	bl	8005f20 <__assert_func>
 8006f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f60:	6006      	str	r6, [r0, #0]
 8006f62:	60c6      	str	r6, [r0, #12]
 8006f64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f66:	68f3      	ldr	r3, [r6, #12]
 8006f68:	b183      	cbz	r3, 8006f8c <_Balloc+0x50>
 8006f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f72:	b9b8      	cbnz	r0, 8006fa4 <_Balloc+0x68>
 8006f74:	2101      	movs	r1, #1
 8006f76:	fa01 f605 	lsl.w	r6, r1, r5
 8006f7a:	1d72      	adds	r2, r6, #5
 8006f7c:	0092      	lsls	r2, r2, #2
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 fb60 	bl	8007644 <_calloc_r>
 8006f84:	b160      	cbz	r0, 8006fa0 <_Balloc+0x64>
 8006f86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f8a:	e00e      	b.n	8006faa <_Balloc+0x6e>
 8006f8c:	2221      	movs	r2, #33	; 0x21
 8006f8e:	2104      	movs	r1, #4
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fb57 	bl	8007644 <_calloc_r>
 8006f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f98:	60f0      	str	r0, [r6, #12]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e4      	bne.n	8006f6a <_Balloc+0x2e>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	6802      	ldr	r2, [r0, #0]
 8006fa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006faa:	2300      	movs	r3, #0
 8006fac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fb0:	e7f7      	b.n	8006fa2 <_Balloc+0x66>
 8006fb2:	bf00      	nop
 8006fb4:	08008ebd 	.word	0x08008ebd
 8006fb8:	08008f40 	.word	0x08008f40

08006fbc <_Bfree>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	b976      	cbnz	r6, 8006fe4 <_Bfree+0x28>
 8006fc6:	2010      	movs	r0, #16
 8006fc8:	f7ff ffa4 	bl	8006f14 <malloc>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6268      	str	r0, [r5, #36]	; 0x24
 8006fd0:	b920      	cbnz	r0, 8006fdc <_Bfree+0x20>
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <_Bfree+0x3c>)
 8006fd4:	4809      	ldr	r0, [pc, #36]	; (8006ffc <_Bfree+0x40>)
 8006fd6:	218a      	movs	r1, #138	; 0x8a
 8006fd8:	f7fe ffa2 	bl	8005f20 <__assert_func>
 8006fdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fe0:	6006      	str	r6, [r0, #0]
 8006fe2:	60c6      	str	r6, [r0, #12]
 8006fe4:	b13c      	cbz	r4, 8006ff6 <_Bfree+0x3a>
 8006fe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006fe8:	6862      	ldr	r2, [r4, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ff0:	6021      	str	r1, [r4, #0]
 8006ff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	08008ebd 	.word	0x08008ebd
 8006ffc:	08008f40 	.word	0x08008f40

08007000 <__multadd>:
 8007000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007004:	690d      	ldr	r5, [r1, #16]
 8007006:	4607      	mov	r7, r0
 8007008:	460c      	mov	r4, r1
 800700a:	461e      	mov	r6, r3
 800700c:	f101 0c14 	add.w	ip, r1, #20
 8007010:	2000      	movs	r0, #0
 8007012:	f8dc 3000 	ldr.w	r3, [ip]
 8007016:	b299      	uxth	r1, r3
 8007018:	fb02 6101 	mla	r1, r2, r1, r6
 800701c:	0c1e      	lsrs	r6, r3, #16
 800701e:	0c0b      	lsrs	r3, r1, #16
 8007020:	fb02 3306 	mla	r3, r2, r6, r3
 8007024:	b289      	uxth	r1, r1
 8007026:	3001      	adds	r0, #1
 8007028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800702c:	4285      	cmp	r5, r0
 800702e:	f84c 1b04 	str.w	r1, [ip], #4
 8007032:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007036:	dcec      	bgt.n	8007012 <__multadd+0x12>
 8007038:	b30e      	cbz	r6, 800707e <__multadd+0x7e>
 800703a:	68a3      	ldr	r3, [r4, #8]
 800703c:	42ab      	cmp	r3, r5
 800703e:	dc19      	bgt.n	8007074 <__multadd+0x74>
 8007040:	6861      	ldr	r1, [r4, #4]
 8007042:	4638      	mov	r0, r7
 8007044:	3101      	adds	r1, #1
 8007046:	f7ff ff79 	bl	8006f3c <_Balloc>
 800704a:	4680      	mov	r8, r0
 800704c:	b928      	cbnz	r0, 800705a <__multadd+0x5a>
 800704e:	4602      	mov	r2, r0
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <__multadd+0x84>)
 8007052:	480d      	ldr	r0, [pc, #52]	; (8007088 <__multadd+0x88>)
 8007054:	21b5      	movs	r1, #181	; 0xb5
 8007056:	f7fe ff63 	bl	8005f20 <__assert_func>
 800705a:	6922      	ldr	r2, [r4, #16]
 800705c:	3202      	adds	r2, #2
 800705e:	f104 010c 	add.w	r1, r4, #12
 8007062:	0092      	lsls	r2, r2, #2
 8007064:	300c      	adds	r0, #12
 8007066:	f7fe f900 	bl	800526a <memcpy>
 800706a:	4621      	mov	r1, r4
 800706c:	4638      	mov	r0, r7
 800706e:	f7ff ffa5 	bl	8006fbc <_Bfree>
 8007072:	4644      	mov	r4, r8
 8007074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007078:	3501      	adds	r5, #1
 800707a:	615e      	str	r6, [r3, #20]
 800707c:	6125      	str	r5, [r4, #16]
 800707e:	4620      	mov	r0, r4
 8007080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007084:	08008f2f 	.word	0x08008f2f
 8007088:	08008f40 	.word	0x08008f40

0800708c <__hi0bits>:
 800708c:	0c03      	lsrs	r3, r0, #16
 800708e:	041b      	lsls	r3, r3, #16
 8007090:	b9d3      	cbnz	r3, 80070c8 <__hi0bits+0x3c>
 8007092:	0400      	lsls	r0, r0, #16
 8007094:	2310      	movs	r3, #16
 8007096:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800709a:	bf04      	itt	eq
 800709c:	0200      	lsleq	r0, r0, #8
 800709e:	3308      	addeq	r3, #8
 80070a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070a4:	bf04      	itt	eq
 80070a6:	0100      	lsleq	r0, r0, #4
 80070a8:	3304      	addeq	r3, #4
 80070aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070ae:	bf04      	itt	eq
 80070b0:	0080      	lsleq	r0, r0, #2
 80070b2:	3302      	addeq	r3, #2
 80070b4:	2800      	cmp	r0, #0
 80070b6:	db05      	blt.n	80070c4 <__hi0bits+0x38>
 80070b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070bc:	f103 0301 	add.w	r3, r3, #1
 80070c0:	bf08      	it	eq
 80070c2:	2320      	moveq	r3, #32
 80070c4:	4618      	mov	r0, r3
 80070c6:	4770      	bx	lr
 80070c8:	2300      	movs	r3, #0
 80070ca:	e7e4      	b.n	8007096 <__hi0bits+0xa>

080070cc <__lo0bits>:
 80070cc:	6803      	ldr	r3, [r0, #0]
 80070ce:	f013 0207 	ands.w	r2, r3, #7
 80070d2:	4601      	mov	r1, r0
 80070d4:	d00b      	beq.n	80070ee <__lo0bits+0x22>
 80070d6:	07da      	lsls	r2, r3, #31
 80070d8:	d423      	bmi.n	8007122 <__lo0bits+0x56>
 80070da:	0798      	lsls	r0, r3, #30
 80070dc:	bf49      	itett	mi
 80070de:	085b      	lsrmi	r3, r3, #1
 80070e0:	089b      	lsrpl	r3, r3, #2
 80070e2:	2001      	movmi	r0, #1
 80070e4:	600b      	strmi	r3, [r1, #0]
 80070e6:	bf5c      	itt	pl
 80070e8:	600b      	strpl	r3, [r1, #0]
 80070ea:	2002      	movpl	r0, #2
 80070ec:	4770      	bx	lr
 80070ee:	b298      	uxth	r0, r3
 80070f0:	b9a8      	cbnz	r0, 800711e <__lo0bits+0x52>
 80070f2:	0c1b      	lsrs	r3, r3, #16
 80070f4:	2010      	movs	r0, #16
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	b90a      	cbnz	r2, 80070fe <__lo0bits+0x32>
 80070fa:	3008      	adds	r0, #8
 80070fc:	0a1b      	lsrs	r3, r3, #8
 80070fe:	071a      	lsls	r2, r3, #28
 8007100:	bf04      	itt	eq
 8007102:	091b      	lsreq	r3, r3, #4
 8007104:	3004      	addeq	r0, #4
 8007106:	079a      	lsls	r2, r3, #30
 8007108:	bf04      	itt	eq
 800710a:	089b      	lsreq	r3, r3, #2
 800710c:	3002      	addeq	r0, #2
 800710e:	07da      	lsls	r2, r3, #31
 8007110:	d403      	bmi.n	800711a <__lo0bits+0x4e>
 8007112:	085b      	lsrs	r3, r3, #1
 8007114:	f100 0001 	add.w	r0, r0, #1
 8007118:	d005      	beq.n	8007126 <__lo0bits+0x5a>
 800711a:	600b      	str	r3, [r1, #0]
 800711c:	4770      	bx	lr
 800711e:	4610      	mov	r0, r2
 8007120:	e7e9      	b.n	80070f6 <__lo0bits+0x2a>
 8007122:	2000      	movs	r0, #0
 8007124:	4770      	bx	lr
 8007126:	2020      	movs	r0, #32
 8007128:	4770      	bx	lr
	...

0800712c <__i2b>:
 800712c:	b510      	push	{r4, lr}
 800712e:	460c      	mov	r4, r1
 8007130:	2101      	movs	r1, #1
 8007132:	f7ff ff03 	bl	8006f3c <_Balloc>
 8007136:	4602      	mov	r2, r0
 8007138:	b928      	cbnz	r0, 8007146 <__i2b+0x1a>
 800713a:	4b05      	ldr	r3, [pc, #20]	; (8007150 <__i2b+0x24>)
 800713c:	4805      	ldr	r0, [pc, #20]	; (8007154 <__i2b+0x28>)
 800713e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007142:	f7fe feed 	bl	8005f20 <__assert_func>
 8007146:	2301      	movs	r3, #1
 8007148:	6144      	str	r4, [r0, #20]
 800714a:	6103      	str	r3, [r0, #16]
 800714c:	bd10      	pop	{r4, pc}
 800714e:	bf00      	nop
 8007150:	08008f2f 	.word	0x08008f2f
 8007154:	08008f40 	.word	0x08008f40

08007158 <__multiply>:
 8007158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	4691      	mov	r9, r2
 800715e:	690a      	ldr	r2, [r1, #16]
 8007160:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007164:	429a      	cmp	r2, r3
 8007166:	bfb8      	it	lt
 8007168:	460b      	movlt	r3, r1
 800716a:	460c      	mov	r4, r1
 800716c:	bfbc      	itt	lt
 800716e:	464c      	movlt	r4, r9
 8007170:	4699      	movlt	r9, r3
 8007172:	6927      	ldr	r7, [r4, #16]
 8007174:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007178:	68a3      	ldr	r3, [r4, #8]
 800717a:	6861      	ldr	r1, [r4, #4]
 800717c:	eb07 060a 	add.w	r6, r7, sl
 8007180:	42b3      	cmp	r3, r6
 8007182:	b085      	sub	sp, #20
 8007184:	bfb8      	it	lt
 8007186:	3101      	addlt	r1, #1
 8007188:	f7ff fed8 	bl	8006f3c <_Balloc>
 800718c:	b930      	cbnz	r0, 800719c <__multiply+0x44>
 800718e:	4602      	mov	r2, r0
 8007190:	4b44      	ldr	r3, [pc, #272]	; (80072a4 <__multiply+0x14c>)
 8007192:	4845      	ldr	r0, [pc, #276]	; (80072a8 <__multiply+0x150>)
 8007194:	f240 115d 	movw	r1, #349	; 0x15d
 8007198:	f7fe fec2 	bl	8005f20 <__assert_func>
 800719c:	f100 0514 	add.w	r5, r0, #20
 80071a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071a4:	462b      	mov	r3, r5
 80071a6:	2200      	movs	r2, #0
 80071a8:	4543      	cmp	r3, r8
 80071aa:	d321      	bcc.n	80071f0 <__multiply+0x98>
 80071ac:	f104 0314 	add.w	r3, r4, #20
 80071b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071b4:	f109 0314 	add.w	r3, r9, #20
 80071b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071bc:	9202      	str	r2, [sp, #8]
 80071be:	1b3a      	subs	r2, r7, r4
 80071c0:	3a15      	subs	r2, #21
 80071c2:	f022 0203 	bic.w	r2, r2, #3
 80071c6:	3204      	adds	r2, #4
 80071c8:	f104 0115 	add.w	r1, r4, #21
 80071cc:	428f      	cmp	r7, r1
 80071ce:	bf38      	it	cc
 80071d0:	2204      	movcc	r2, #4
 80071d2:	9201      	str	r2, [sp, #4]
 80071d4:	9a02      	ldr	r2, [sp, #8]
 80071d6:	9303      	str	r3, [sp, #12]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d80c      	bhi.n	80071f6 <__multiply+0x9e>
 80071dc:	2e00      	cmp	r6, #0
 80071de:	dd03      	ble.n	80071e8 <__multiply+0x90>
 80071e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d05a      	beq.n	800729e <__multiply+0x146>
 80071e8:	6106      	str	r6, [r0, #16]
 80071ea:	b005      	add	sp, #20
 80071ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f0:	f843 2b04 	str.w	r2, [r3], #4
 80071f4:	e7d8      	b.n	80071a8 <__multiply+0x50>
 80071f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80071fa:	f1ba 0f00 	cmp.w	sl, #0
 80071fe:	d024      	beq.n	800724a <__multiply+0xf2>
 8007200:	f104 0e14 	add.w	lr, r4, #20
 8007204:	46a9      	mov	r9, r5
 8007206:	f04f 0c00 	mov.w	ip, #0
 800720a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800720e:	f8d9 1000 	ldr.w	r1, [r9]
 8007212:	fa1f fb82 	uxth.w	fp, r2
 8007216:	b289      	uxth	r1, r1
 8007218:	fb0a 110b 	mla	r1, sl, fp, r1
 800721c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007220:	f8d9 2000 	ldr.w	r2, [r9]
 8007224:	4461      	add	r1, ip
 8007226:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800722a:	fb0a c20b 	mla	r2, sl, fp, ip
 800722e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007232:	b289      	uxth	r1, r1
 8007234:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007238:	4577      	cmp	r7, lr
 800723a:	f849 1b04 	str.w	r1, [r9], #4
 800723e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007242:	d8e2      	bhi.n	800720a <__multiply+0xb2>
 8007244:	9a01      	ldr	r2, [sp, #4]
 8007246:	f845 c002 	str.w	ip, [r5, r2]
 800724a:	9a03      	ldr	r2, [sp, #12]
 800724c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007250:	3304      	adds	r3, #4
 8007252:	f1b9 0f00 	cmp.w	r9, #0
 8007256:	d020      	beq.n	800729a <__multiply+0x142>
 8007258:	6829      	ldr	r1, [r5, #0]
 800725a:	f104 0c14 	add.w	ip, r4, #20
 800725e:	46ae      	mov	lr, r5
 8007260:	f04f 0a00 	mov.w	sl, #0
 8007264:	f8bc b000 	ldrh.w	fp, [ip]
 8007268:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800726c:	fb09 220b 	mla	r2, r9, fp, r2
 8007270:	4492      	add	sl, r2
 8007272:	b289      	uxth	r1, r1
 8007274:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007278:	f84e 1b04 	str.w	r1, [lr], #4
 800727c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007280:	f8be 1000 	ldrh.w	r1, [lr]
 8007284:	0c12      	lsrs	r2, r2, #16
 8007286:	fb09 1102 	mla	r1, r9, r2, r1
 800728a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800728e:	4567      	cmp	r7, ip
 8007290:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007294:	d8e6      	bhi.n	8007264 <__multiply+0x10c>
 8007296:	9a01      	ldr	r2, [sp, #4]
 8007298:	50a9      	str	r1, [r5, r2]
 800729a:	3504      	adds	r5, #4
 800729c:	e79a      	b.n	80071d4 <__multiply+0x7c>
 800729e:	3e01      	subs	r6, #1
 80072a0:	e79c      	b.n	80071dc <__multiply+0x84>
 80072a2:	bf00      	nop
 80072a4:	08008f2f 	.word	0x08008f2f
 80072a8:	08008f40 	.word	0x08008f40

080072ac <__pow5mult>:
 80072ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b0:	4615      	mov	r5, r2
 80072b2:	f012 0203 	ands.w	r2, r2, #3
 80072b6:	4606      	mov	r6, r0
 80072b8:	460f      	mov	r7, r1
 80072ba:	d007      	beq.n	80072cc <__pow5mult+0x20>
 80072bc:	4c25      	ldr	r4, [pc, #148]	; (8007354 <__pow5mult+0xa8>)
 80072be:	3a01      	subs	r2, #1
 80072c0:	2300      	movs	r3, #0
 80072c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072c6:	f7ff fe9b 	bl	8007000 <__multadd>
 80072ca:	4607      	mov	r7, r0
 80072cc:	10ad      	asrs	r5, r5, #2
 80072ce:	d03d      	beq.n	800734c <__pow5mult+0xa0>
 80072d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072d2:	b97c      	cbnz	r4, 80072f4 <__pow5mult+0x48>
 80072d4:	2010      	movs	r0, #16
 80072d6:	f7ff fe1d 	bl	8006f14 <malloc>
 80072da:	4602      	mov	r2, r0
 80072dc:	6270      	str	r0, [r6, #36]	; 0x24
 80072de:	b928      	cbnz	r0, 80072ec <__pow5mult+0x40>
 80072e0:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <__pow5mult+0xac>)
 80072e2:	481e      	ldr	r0, [pc, #120]	; (800735c <__pow5mult+0xb0>)
 80072e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80072e8:	f7fe fe1a 	bl	8005f20 <__assert_func>
 80072ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072f0:	6004      	str	r4, [r0, #0]
 80072f2:	60c4      	str	r4, [r0, #12]
 80072f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072fc:	b94c      	cbnz	r4, 8007312 <__pow5mult+0x66>
 80072fe:	f240 2171 	movw	r1, #625	; 0x271
 8007302:	4630      	mov	r0, r6
 8007304:	f7ff ff12 	bl	800712c <__i2b>
 8007308:	2300      	movs	r3, #0
 800730a:	f8c8 0008 	str.w	r0, [r8, #8]
 800730e:	4604      	mov	r4, r0
 8007310:	6003      	str	r3, [r0, #0]
 8007312:	f04f 0900 	mov.w	r9, #0
 8007316:	07eb      	lsls	r3, r5, #31
 8007318:	d50a      	bpl.n	8007330 <__pow5mult+0x84>
 800731a:	4639      	mov	r1, r7
 800731c:	4622      	mov	r2, r4
 800731e:	4630      	mov	r0, r6
 8007320:	f7ff ff1a 	bl	8007158 <__multiply>
 8007324:	4639      	mov	r1, r7
 8007326:	4680      	mov	r8, r0
 8007328:	4630      	mov	r0, r6
 800732a:	f7ff fe47 	bl	8006fbc <_Bfree>
 800732e:	4647      	mov	r7, r8
 8007330:	106d      	asrs	r5, r5, #1
 8007332:	d00b      	beq.n	800734c <__pow5mult+0xa0>
 8007334:	6820      	ldr	r0, [r4, #0]
 8007336:	b938      	cbnz	r0, 8007348 <__pow5mult+0x9c>
 8007338:	4622      	mov	r2, r4
 800733a:	4621      	mov	r1, r4
 800733c:	4630      	mov	r0, r6
 800733e:	f7ff ff0b 	bl	8007158 <__multiply>
 8007342:	6020      	str	r0, [r4, #0]
 8007344:	f8c0 9000 	str.w	r9, [r0]
 8007348:	4604      	mov	r4, r0
 800734a:	e7e4      	b.n	8007316 <__pow5mult+0x6a>
 800734c:	4638      	mov	r0, r7
 800734e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007352:	bf00      	nop
 8007354:	08009090 	.word	0x08009090
 8007358:	08008ebd 	.word	0x08008ebd
 800735c:	08008f40 	.word	0x08008f40

08007360 <__lshift>:
 8007360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007364:	460c      	mov	r4, r1
 8007366:	6849      	ldr	r1, [r1, #4]
 8007368:	6923      	ldr	r3, [r4, #16]
 800736a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800736e:	68a3      	ldr	r3, [r4, #8]
 8007370:	4607      	mov	r7, r0
 8007372:	4691      	mov	r9, r2
 8007374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007378:	f108 0601 	add.w	r6, r8, #1
 800737c:	42b3      	cmp	r3, r6
 800737e:	db0b      	blt.n	8007398 <__lshift+0x38>
 8007380:	4638      	mov	r0, r7
 8007382:	f7ff fddb 	bl	8006f3c <_Balloc>
 8007386:	4605      	mov	r5, r0
 8007388:	b948      	cbnz	r0, 800739e <__lshift+0x3e>
 800738a:	4602      	mov	r2, r0
 800738c:	4b2a      	ldr	r3, [pc, #168]	; (8007438 <__lshift+0xd8>)
 800738e:	482b      	ldr	r0, [pc, #172]	; (800743c <__lshift+0xdc>)
 8007390:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007394:	f7fe fdc4 	bl	8005f20 <__assert_func>
 8007398:	3101      	adds	r1, #1
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	e7ee      	b.n	800737c <__lshift+0x1c>
 800739e:	2300      	movs	r3, #0
 80073a0:	f100 0114 	add.w	r1, r0, #20
 80073a4:	f100 0210 	add.w	r2, r0, #16
 80073a8:	4618      	mov	r0, r3
 80073aa:	4553      	cmp	r3, sl
 80073ac:	db37      	blt.n	800741e <__lshift+0xbe>
 80073ae:	6920      	ldr	r0, [r4, #16]
 80073b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073b4:	f104 0314 	add.w	r3, r4, #20
 80073b8:	f019 091f 	ands.w	r9, r9, #31
 80073bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073c4:	d02f      	beq.n	8007426 <__lshift+0xc6>
 80073c6:	f1c9 0e20 	rsb	lr, r9, #32
 80073ca:	468a      	mov	sl, r1
 80073cc:	f04f 0c00 	mov.w	ip, #0
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	fa02 f209 	lsl.w	r2, r2, r9
 80073d6:	ea42 020c 	orr.w	r2, r2, ip
 80073da:	f84a 2b04 	str.w	r2, [sl], #4
 80073de:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e2:	4298      	cmp	r0, r3
 80073e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80073e8:	d8f2      	bhi.n	80073d0 <__lshift+0x70>
 80073ea:	1b03      	subs	r3, r0, r4
 80073ec:	3b15      	subs	r3, #21
 80073ee:	f023 0303 	bic.w	r3, r3, #3
 80073f2:	3304      	adds	r3, #4
 80073f4:	f104 0215 	add.w	r2, r4, #21
 80073f8:	4290      	cmp	r0, r2
 80073fa:	bf38      	it	cc
 80073fc:	2304      	movcc	r3, #4
 80073fe:	f841 c003 	str.w	ip, [r1, r3]
 8007402:	f1bc 0f00 	cmp.w	ip, #0
 8007406:	d001      	beq.n	800740c <__lshift+0xac>
 8007408:	f108 0602 	add.w	r6, r8, #2
 800740c:	3e01      	subs	r6, #1
 800740e:	4638      	mov	r0, r7
 8007410:	612e      	str	r6, [r5, #16]
 8007412:	4621      	mov	r1, r4
 8007414:	f7ff fdd2 	bl	8006fbc <_Bfree>
 8007418:	4628      	mov	r0, r5
 800741a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007422:	3301      	adds	r3, #1
 8007424:	e7c1      	b.n	80073aa <__lshift+0x4a>
 8007426:	3904      	subs	r1, #4
 8007428:	f853 2b04 	ldr.w	r2, [r3], #4
 800742c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007430:	4298      	cmp	r0, r3
 8007432:	d8f9      	bhi.n	8007428 <__lshift+0xc8>
 8007434:	e7ea      	b.n	800740c <__lshift+0xac>
 8007436:	bf00      	nop
 8007438:	08008f2f 	.word	0x08008f2f
 800743c:	08008f40 	.word	0x08008f40

08007440 <__mcmp>:
 8007440:	b530      	push	{r4, r5, lr}
 8007442:	6902      	ldr	r2, [r0, #16]
 8007444:	690c      	ldr	r4, [r1, #16]
 8007446:	1b12      	subs	r2, r2, r4
 8007448:	d10e      	bne.n	8007468 <__mcmp+0x28>
 800744a:	f100 0314 	add.w	r3, r0, #20
 800744e:	3114      	adds	r1, #20
 8007450:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007454:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007458:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800745c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007460:	42a5      	cmp	r5, r4
 8007462:	d003      	beq.n	800746c <__mcmp+0x2c>
 8007464:	d305      	bcc.n	8007472 <__mcmp+0x32>
 8007466:	2201      	movs	r2, #1
 8007468:	4610      	mov	r0, r2
 800746a:	bd30      	pop	{r4, r5, pc}
 800746c:	4283      	cmp	r3, r0
 800746e:	d3f3      	bcc.n	8007458 <__mcmp+0x18>
 8007470:	e7fa      	b.n	8007468 <__mcmp+0x28>
 8007472:	f04f 32ff 	mov.w	r2, #4294967295
 8007476:	e7f7      	b.n	8007468 <__mcmp+0x28>

08007478 <__mdiff>:
 8007478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	460c      	mov	r4, r1
 800747e:	4606      	mov	r6, r0
 8007480:	4611      	mov	r1, r2
 8007482:	4620      	mov	r0, r4
 8007484:	4690      	mov	r8, r2
 8007486:	f7ff ffdb 	bl	8007440 <__mcmp>
 800748a:	1e05      	subs	r5, r0, #0
 800748c:	d110      	bne.n	80074b0 <__mdiff+0x38>
 800748e:	4629      	mov	r1, r5
 8007490:	4630      	mov	r0, r6
 8007492:	f7ff fd53 	bl	8006f3c <_Balloc>
 8007496:	b930      	cbnz	r0, 80074a6 <__mdiff+0x2e>
 8007498:	4b3a      	ldr	r3, [pc, #232]	; (8007584 <__mdiff+0x10c>)
 800749a:	4602      	mov	r2, r0
 800749c:	f240 2132 	movw	r1, #562	; 0x232
 80074a0:	4839      	ldr	r0, [pc, #228]	; (8007588 <__mdiff+0x110>)
 80074a2:	f7fe fd3d 	bl	8005f20 <__assert_func>
 80074a6:	2301      	movs	r3, #1
 80074a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b0:	bfa4      	itt	ge
 80074b2:	4643      	movge	r3, r8
 80074b4:	46a0      	movge	r8, r4
 80074b6:	4630      	mov	r0, r6
 80074b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074bc:	bfa6      	itte	ge
 80074be:	461c      	movge	r4, r3
 80074c0:	2500      	movge	r5, #0
 80074c2:	2501      	movlt	r5, #1
 80074c4:	f7ff fd3a 	bl	8006f3c <_Balloc>
 80074c8:	b920      	cbnz	r0, 80074d4 <__mdiff+0x5c>
 80074ca:	4b2e      	ldr	r3, [pc, #184]	; (8007584 <__mdiff+0x10c>)
 80074cc:	4602      	mov	r2, r0
 80074ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80074d2:	e7e5      	b.n	80074a0 <__mdiff+0x28>
 80074d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074d8:	6926      	ldr	r6, [r4, #16]
 80074da:	60c5      	str	r5, [r0, #12]
 80074dc:	f104 0914 	add.w	r9, r4, #20
 80074e0:	f108 0514 	add.w	r5, r8, #20
 80074e4:	f100 0e14 	add.w	lr, r0, #20
 80074e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80074ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074f0:	f108 0210 	add.w	r2, r8, #16
 80074f4:	46f2      	mov	sl, lr
 80074f6:	2100      	movs	r1, #0
 80074f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80074fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007500:	fa1f f883 	uxth.w	r8, r3
 8007504:	fa11 f18b 	uxtah	r1, r1, fp
 8007508:	0c1b      	lsrs	r3, r3, #16
 800750a:	eba1 0808 	sub.w	r8, r1, r8
 800750e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007512:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007516:	fa1f f888 	uxth.w	r8, r8
 800751a:	1419      	asrs	r1, r3, #16
 800751c:	454e      	cmp	r6, r9
 800751e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007522:	f84a 3b04 	str.w	r3, [sl], #4
 8007526:	d8e7      	bhi.n	80074f8 <__mdiff+0x80>
 8007528:	1b33      	subs	r3, r6, r4
 800752a:	3b15      	subs	r3, #21
 800752c:	f023 0303 	bic.w	r3, r3, #3
 8007530:	3304      	adds	r3, #4
 8007532:	3415      	adds	r4, #21
 8007534:	42a6      	cmp	r6, r4
 8007536:	bf38      	it	cc
 8007538:	2304      	movcc	r3, #4
 800753a:	441d      	add	r5, r3
 800753c:	4473      	add	r3, lr
 800753e:	469e      	mov	lr, r3
 8007540:	462e      	mov	r6, r5
 8007542:	4566      	cmp	r6, ip
 8007544:	d30e      	bcc.n	8007564 <__mdiff+0xec>
 8007546:	f10c 0203 	add.w	r2, ip, #3
 800754a:	1b52      	subs	r2, r2, r5
 800754c:	f022 0203 	bic.w	r2, r2, #3
 8007550:	3d03      	subs	r5, #3
 8007552:	45ac      	cmp	ip, r5
 8007554:	bf38      	it	cc
 8007556:	2200      	movcc	r2, #0
 8007558:	441a      	add	r2, r3
 800755a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800755e:	b17b      	cbz	r3, 8007580 <__mdiff+0x108>
 8007560:	6107      	str	r7, [r0, #16]
 8007562:	e7a3      	b.n	80074ac <__mdiff+0x34>
 8007564:	f856 8b04 	ldr.w	r8, [r6], #4
 8007568:	fa11 f288 	uxtah	r2, r1, r8
 800756c:	1414      	asrs	r4, r2, #16
 800756e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007572:	b292      	uxth	r2, r2
 8007574:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007578:	f84e 2b04 	str.w	r2, [lr], #4
 800757c:	1421      	asrs	r1, r4, #16
 800757e:	e7e0      	b.n	8007542 <__mdiff+0xca>
 8007580:	3f01      	subs	r7, #1
 8007582:	e7ea      	b.n	800755a <__mdiff+0xe2>
 8007584:	08008f2f 	.word	0x08008f2f
 8007588:	08008f40 	.word	0x08008f40

0800758c <__d2b>:
 800758c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007590:	4689      	mov	r9, r1
 8007592:	2101      	movs	r1, #1
 8007594:	ec57 6b10 	vmov	r6, r7, d0
 8007598:	4690      	mov	r8, r2
 800759a:	f7ff fccf 	bl	8006f3c <_Balloc>
 800759e:	4604      	mov	r4, r0
 80075a0:	b930      	cbnz	r0, 80075b0 <__d2b+0x24>
 80075a2:	4602      	mov	r2, r0
 80075a4:	4b25      	ldr	r3, [pc, #148]	; (800763c <__d2b+0xb0>)
 80075a6:	4826      	ldr	r0, [pc, #152]	; (8007640 <__d2b+0xb4>)
 80075a8:	f240 310a 	movw	r1, #778	; 0x30a
 80075ac:	f7fe fcb8 	bl	8005f20 <__assert_func>
 80075b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075b8:	bb35      	cbnz	r5, 8007608 <__d2b+0x7c>
 80075ba:	2e00      	cmp	r6, #0
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	d028      	beq.n	8007612 <__d2b+0x86>
 80075c0:	4668      	mov	r0, sp
 80075c2:	9600      	str	r6, [sp, #0]
 80075c4:	f7ff fd82 	bl	80070cc <__lo0bits>
 80075c8:	9900      	ldr	r1, [sp, #0]
 80075ca:	b300      	cbz	r0, 800760e <__d2b+0x82>
 80075cc:	9a01      	ldr	r2, [sp, #4]
 80075ce:	f1c0 0320 	rsb	r3, r0, #32
 80075d2:	fa02 f303 	lsl.w	r3, r2, r3
 80075d6:	430b      	orrs	r3, r1
 80075d8:	40c2      	lsrs	r2, r0
 80075da:	6163      	str	r3, [r4, #20]
 80075dc:	9201      	str	r2, [sp, #4]
 80075de:	9b01      	ldr	r3, [sp, #4]
 80075e0:	61a3      	str	r3, [r4, #24]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bf14      	ite	ne
 80075e6:	2202      	movne	r2, #2
 80075e8:	2201      	moveq	r2, #1
 80075ea:	6122      	str	r2, [r4, #16]
 80075ec:	b1d5      	cbz	r5, 8007624 <__d2b+0x98>
 80075ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075f2:	4405      	add	r5, r0
 80075f4:	f8c9 5000 	str.w	r5, [r9]
 80075f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075fc:	f8c8 0000 	str.w	r0, [r8]
 8007600:	4620      	mov	r0, r4
 8007602:	b003      	add	sp, #12
 8007604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800760c:	e7d5      	b.n	80075ba <__d2b+0x2e>
 800760e:	6161      	str	r1, [r4, #20]
 8007610:	e7e5      	b.n	80075de <__d2b+0x52>
 8007612:	a801      	add	r0, sp, #4
 8007614:	f7ff fd5a 	bl	80070cc <__lo0bits>
 8007618:	9b01      	ldr	r3, [sp, #4]
 800761a:	6163      	str	r3, [r4, #20]
 800761c:	2201      	movs	r2, #1
 800761e:	6122      	str	r2, [r4, #16]
 8007620:	3020      	adds	r0, #32
 8007622:	e7e3      	b.n	80075ec <__d2b+0x60>
 8007624:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007628:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800762c:	f8c9 0000 	str.w	r0, [r9]
 8007630:	6918      	ldr	r0, [r3, #16]
 8007632:	f7ff fd2b 	bl	800708c <__hi0bits>
 8007636:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800763a:	e7df      	b.n	80075fc <__d2b+0x70>
 800763c:	08008f2f 	.word	0x08008f2f
 8007640:	08008f40 	.word	0x08008f40

08007644 <_calloc_r>:
 8007644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007646:	fba1 2402 	umull	r2, r4, r1, r2
 800764a:	b94c      	cbnz	r4, 8007660 <_calloc_r+0x1c>
 800764c:	4611      	mov	r1, r2
 800764e:	9201      	str	r2, [sp, #4]
 8007650:	f7fd fe42 	bl	80052d8 <_malloc_r>
 8007654:	9a01      	ldr	r2, [sp, #4]
 8007656:	4605      	mov	r5, r0
 8007658:	b930      	cbnz	r0, 8007668 <_calloc_r+0x24>
 800765a:	4628      	mov	r0, r5
 800765c:	b003      	add	sp, #12
 800765e:	bd30      	pop	{r4, r5, pc}
 8007660:	220c      	movs	r2, #12
 8007662:	6002      	str	r2, [r0, #0]
 8007664:	2500      	movs	r5, #0
 8007666:	e7f8      	b.n	800765a <_calloc_r+0x16>
 8007668:	4621      	mov	r1, r4
 800766a:	f7fd fe0c 	bl	8005286 <memset>
 800766e:	e7f4      	b.n	800765a <_calloc_r+0x16>

08007670 <_free_r>:
 8007670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007672:	2900      	cmp	r1, #0
 8007674:	d044      	beq.n	8007700 <_free_r+0x90>
 8007676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800767a:	9001      	str	r0, [sp, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f1a1 0404 	sub.w	r4, r1, #4
 8007682:	bfb8      	it	lt
 8007684:	18e4      	addlt	r4, r4, r3
 8007686:	f7ff fc4d 	bl	8006f24 <__malloc_lock>
 800768a:	4a1e      	ldr	r2, [pc, #120]	; (8007704 <_free_r+0x94>)
 800768c:	9801      	ldr	r0, [sp, #4]
 800768e:	6813      	ldr	r3, [r2, #0]
 8007690:	b933      	cbnz	r3, 80076a0 <_free_r+0x30>
 8007692:	6063      	str	r3, [r4, #4]
 8007694:	6014      	str	r4, [r2, #0]
 8007696:	b003      	add	sp, #12
 8007698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800769c:	f7ff bc48 	b.w	8006f30 <__malloc_unlock>
 80076a0:	42a3      	cmp	r3, r4
 80076a2:	d908      	bls.n	80076b6 <_free_r+0x46>
 80076a4:	6825      	ldr	r5, [r4, #0]
 80076a6:	1961      	adds	r1, r4, r5
 80076a8:	428b      	cmp	r3, r1
 80076aa:	bf01      	itttt	eq
 80076ac:	6819      	ldreq	r1, [r3, #0]
 80076ae:	685b      	ldreq	r3, [r3, #4]
 80076b0:	1949      	addeq	r1, r1, r5
 80076b2:	6021      	streq	r1, [r4, #0]
 80076b4:	e7ed      	b.n	8007692 <_free_r+0x22>
 80076b6:	461a      	mov	r2, r3
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	b10b      	cbz	r3, 80076c0 <_free_r+0x50>
 80076bc:	42a3      	cmp	r3, r4
 80076be:	d9fa      	bls.n	80076b6 <_free_r+0x46>
 80076c0:	6811      	ldr	r1, [r2, #0]
 80076c2:	1855      	adds	r5, r2, r1
 80076c4:	42a5      	cmp	r5, r4
 80076c6:	d10b      	bne.n	80076e0 <_free_r+0x70>
 80076c8:	6824      	ldr	r4, [r4, #0]
 80076ca:	4421      	add	r1, r4
 80076cc:	1854      	adds	r4, r2, r1
 80076ce:	42a3      	cmp	r3, r4
 80076d0:	6011      	str	r1, [r2, #0]
 80076d2:	d1e0      	bne.n	8007696 <_free_r+0x26>
 80076d4:	681c      	ldr	r4, [r3, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	6053      	str	r3, [r2, #4]
 80076da:	4421      	add	r1, r4
 80076dc:	6011      	str	r1, [r2, #0]
 80076de:	e7da      	b.n	8007696 <_free_r+0x26>
 80076e0:	d902      	bls.n	80076e8 <_free_r+0x78>
 80076e2:	230c      	movs	r3, #12
 80076e4:	6003      	str	r3, [r0, #0]
 80076e6:	e7d6      	b.n	8007696 <_free_r+0x26>
 80076e8:	6825      	ldr	r5, [r4, #0]
 80076ea:	1961      	adds	r1, r4, r5
 80076ec:	428b      	cmp	r3, r1
 80076ee:	bf04      	itt	eq
 80076f0:	6819      	ldreq	r1, [r3, #0]
 80076f2:	685b      	ldreq	r3, [r3, #4]
 80076f4:	6063      	str	r3, [r4, #4]
 80076f6:	bf04      	itt	eq
 80076f8:	1949      	addeq	r1, r1, r5
 80076fa:	6021      	streq	r1, [r4, #0]
 80076fc:	6054      	str	r4, [r2, #4]
 80076fe:	e7ca      	b.n	8007696 <_free_r+0x26>
 8007700:	b003      	add	sp, #12
 8007702:	bd30      	pop	{r4, r5, pc}
 8007704:	2000047c 	.word	0x2000047c

08007708 <__ssputs_r>:
 8007708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	688e      	ldr	r6, [r1, #8]
 800770e:	429e      	cmp	r6, r3
 8007710:	4682      	mov	sl, r0
 8007712:	460c      	mov	r4, r1
 8007714:	4690      	mov	r8, r2
 8007716:	461f      	mov	r7, r3
 8007718:	d838      	bhi.n	800778c <__ssputs_r+0x84>
 800771a:	898a      	ldrh	r2, [r1, #12]
 800771c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007720:	d032      	beq.n	8007788 <__ssputs_r+0x80>
 8007722:	6825      	ldr	r5, [r4, #0]
 8007724:	6909      	ldr	r1, [r1, #16]
 8007726:	eba5 0901 	sub.w	r9, r5, r1
 800772a:	6965      	ldr	r5, [r4, #20]
 800772c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007734:	3301      	adds	r3, #1
 8007736:	444b      	add	r3, r9
 8007738:	106d      	asrs	r5, r5, #1
 800773a:	429d      	cmp	r5, r3
 800773c:	bf38      	it	cc
 800773e:	461d      	movcc	r5, r3
 8007740:	0553      	lsls	r3, r2, #21
 8007742:	d531      	bpl.n	80077a8 <__ssputs_r+0xa0>
 8007744:	4629      	mov	r1, r5
 8007746:	f7fd fdc7 	bl	80052d8 <_malloc_r>
 800774a:	4606      	mov	r6, r0
 800774c:	b950      	cbnz	r0, 8007764 <__ssputs_r+0x5c>
 800774e:	230c      	movs	r3, #12
 8007750:	f8ca 3000 	str.w	r3, [sl]
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800775a:	81a3      	strh	r3, [r4, #12]
 800775c:	f04f 30ff 	mov.w	r0, #4294967295
 8007760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007764:	6921      	ldr	r1, [r4, #16]
 8007766:	464a      	mov	r2, r9
 8007768:	f7fd fd7f 	bl	800526a <memcpy>
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007776:	81a3      	strh	r3, [r4, #12]
 8007778:	6126      	str	r6, [r4, #16]
 800777a:	6165      	str	r5, [r4, #20]
 800777c:	444e      	add	r6, r9
 800777e:	eba5 0509 	sub.w	r5, r5, r9
 8007782:	6026      	str	r6, [r4, #0]
 8007784:	60a5      	str	r5, [r4, #8]
 8007786:	463e      	mov	r6, r7
 8007788:	42be      	cmp	r6, r7
 800778a:	d900      	bls.n	800778e <__ssputs_r+0x86>
 800778c:	463e      	mov	r6, r7
 800778e:	6820      	ldr	r0, [r4, #0]
 8007790:	4632      	mov	r2, r6
 8007792:	4641      	mov	r1, r8
 8007794:	f000 fabc 	bl	8007d10 <memmove>
 8007798:	68a3      	ldr	r3, [r4, #8]
 800779a:	1b9b      	subs	r3, r3, r6
 800779c:	60a3      	str	r3, [r4, #8]
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	4433      	add	r3, r6
 80077a2:	6023      	str	r3, [r4, #0]
 80077a4:	2000      	movs	r0, #0
 80077a6:	e7db      	b.n	8007760 <__ssputs_r+0x58>
 80077a8:	462a      	mov	r2, r5
 80077aa:	f000 facb 	bl	8007d44 <_realloc_r>
 80077ae:	4606      	mov	r6, r0
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d1e1      	bne.n	8007778 <__ssputs_r+0x70>
 80077b4:	6921      	ldr	r1, [r4, #16]
 80077b6:	4650      	mov	r0, sl
 80077b8:	f7ff ff5a 	bl	8007670 <_free_r>
 80077bc:	e7c7      	b.n	800774e <__ssputs_r+0x46>
	...

080077c0 <_svfiprintf_r>:
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	4698      	mov	r8, r3
 80077c6:	898b      	ldrh	r3, [r1, #12]
 80077c8:	061b      	lsls	r3, r3, #24
 80077ca:	b09d      	sub	sp, #116	; 0x74
 80077cc:	4607      	mov	r7, r0
 80077ce:	460d      	mov	r5, r1
 80077d0:	4614      	mov	r4, r2
 80077d2:	d50e      	bpl.n	80077f2 <_svfiprintf_r+0x32>
 80077d4:	690b      	ldr	r3, [r1, #16]
 80077d6:	b963      	cbnz	r3, 80077f2 <_svfiprintf_r+0x32>
 80077d8:	2140      	movs	r1, #64	; 0x40
 80077da:	f7fd fd7d 	bl	80052d8 <_malloc_r>
 80077de:	6028      	str	r0, [r5, #0]
 80077e0:	6128      	str	r0, [r5, #16]
 80077e2:	b920      	cbnz	r0, 80077ee <_svfiprintf_r+0x2e>
 80077e4:	230c      	movs	r3, #12
 80077e6:	603b      	str	r3, [r7, #0]
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ec:	e0d1      	b.n	8007992 <_svfiprintf_r+0x1d2>
 80077ee:	2340      	movs	r3, #64	; 0x40
 80077f0:	616b      	str	r3, [r5, #20]
 80077f2:	2300      	movs	r3, #0
 80077f4:	9309      	str	r3, [sp, #36]	; 0x24
 80077f6:	2320      	movs	r3, #32
 80077f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007800:	2330      	movs	r3, #48	; 0x30
 8007802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80079ac <_svfiprintf_r+0x1ec>
 8007806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800780a:	f04f 0901 	mov.w	r9, #1
 800780e:	4623      	mov	r3, r4
 8007810:	469a      	mov	sl, r3
 8007812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007816:	b10a      	cbz	r2, 800781c <_svfiprintf_r+0x5c>
 8007818:	2a25      	cmp	r2, #37	; 0x25
 800781a:	d1f9      	bne.n	8007810 <_svfiprintf_r+0x50>
 800781c:	ebba 0b04 	subs.w	fp, sl, r4
 8007820:	d00b      	beq.n	800783a <_svfiprintf_r+0x7a>
 8007822:	465b      	mov	r3, fp
 8007824:	4622      	mov	r2, r4
 8007826:	4629      	mov	r1, r5
 8007828:	4638      	mov	r0, r7
 800782a:	f7ff ff6d 	bl	8007708 <__ssputs_r>
 800782e:	3001      	adds	r0, #1
 8007830:	f000 80aa 	beq.w	8007988 <_svfiprintf_r+0x1c8>
 8007834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007836:	445a      	add	r2, fp
 8007838:	9209      	str	r2, [sp, #36]	; 0x24
 800783a:	f89a 3000 	ldrb.w	r3, [sl]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 80a2 	beq.w	8007988 <_svfiprintf_r+0x1c8>
 8007844:	2300      	movs	r3, #0
 8007846:	f04f 32ff 	mov.w	r2, #4294967295
 800784a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800784e:	f10a 0a01 	add.w	sl, sl, #1
 8007852:	9304      	str	r3, [sp, #16]
 8007854:	9307      	str	r3, [sp, #28]
 8007856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800785a:	931a      	str	r3, [sp, #104]	; 0x68
 800785c:	4654      	mov	r4, sl
 800785e:	2205      	movs	r2, #5
 8007860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007864:	4851      	ldr	r0, [pc, #324]	; (80079ac <_svfiprintf_r+0x1ec>)
 8007866:	f7f8 fcbb 	bl	80001e0 <memchr>
 800786a:	9a04      	ldr	r2, [sp, #16]
 800786c:	b9d8      	cbnz	r0, 80078a6 <_svfiprintf_r+0xe6>
 800786e:	06d0      	lsls	r0, r2, #27
 8007870:	bf44      	itt	mi
 8007872:	2320      	movmi	r3, #32
 8007874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007878:	0711      	lsls	r1, r2, #28
 800787a:	bf44      	itt	mi
 800787c:	232b      	movmi	r3, #43	; 0x2b
 800787e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007882:	f89a 3000 	ldrb.w	r3, [sl]
 8007886:	2b2a      	cmp	r3, #42	; 0x2a
 8007888:	d015      	beq.n	80078b6 <_svfiprintf_r+0xf6>
 800788a:	9a07      	ldr	r2, [sp, #28]
 800788c:	4654      	mov	r4, sl
 800788e:	2000      	movs	r0, #0
 8007890:	f04f 0c0a 	mov.w	ip, #10
 8007894:	4621      	mov	r1, r4
 8007896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800789a:	3b30      	subs	r3, #48	; 0x30
 800789c:	2b09      	cmp	r3, #9
 800789e:	d94e      	bls.n	800793e <_svfiprintf_r+0x17e>
 80078a0:	b1b0      	cbz	r0, 80078d0 <_svfiprintf_r+0x110>
 80078a2:	9207      	str	r2, [sp, #28]
 80078a4:	e014      	b.n	80078d0 <_svfiprintf_r+0x110>
 80078a6:	eba0 0308 	sub.w	r3, r0, r8
 80078aa:	fa09 f303 	lsl.w	r3, r9, r3
 80078ae:	4313      	orrs	r3, r2
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	46a2      	mov	sl, r4
 80078b4:	e7d2      	b.n	800785c <_svfiprintf_r+0x9c>
 80078b6:	9b03      	ldr	r3, [sp, #12]
 80078b8:	1d19      	adds	r1, r3, #4
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	9103      	str	r1, [sp, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfbb      	ittet	lt
 80078c2:	425b      	neglt	r3, r3
 80078c4:	f042 0202 	orrlt.w	r2, r2, #2
 80078c8:	9307      	strge	r3, [sp, #28]
 80078ca:	9307      	strlt	r3, [sp, #28]
 80078cc:	bfb8      	it	lt
 80078ce:	9204      	strlt	r2, [sp, #16]
 80078d0:	7823      	ldrb	r3, [r4, #0]
 80078d2:	2b2e      	cmp	r3, #46	; 0x2e
 80078d4:	d10c      	bne.n	80078f0 <_svfiprintf_r+0x130>
 80078d6:	7863      	ldrb	r3, [r4, #1]
 80078d8:	2b2a      	cmp	r3, #42	; 0x2a
 80078da:	d135      	bne.n	8007948 <_svfiprintf_r+0x188>
 80078dc:	9b03      	ldr	r3, [sp, #12]
 80078de:	1d1a      	adds	r2, r3, #4
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	9203      	str	r2, [sp, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	bfb8      	it	lt
 80078e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80078ec:	3402      	adds	r4, #2
 80078ee:	9305      	str	r3, [sp, #20]
 80078f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80079bc <_svfiprintf_r+0x1fc>
 80078f4:	7821      	ldrb	r1, [r4, #0]
 80078f6:	2203      	movs	r2, #3
 80078f8:	4650      	mov	r0, sl
 80078fa:	f7f8 fc71 	bl	80001e0 <memchr>
 80078fe:	b140      	cbz	r0, 8007912 <_svfiprintf_r+0x152>
 8007900:	2340      	movs	r3, #64	; 0x40
 8007902:	eba0 000a 	sub.w	r0, r0, sl
 8007906:	fa03 f000 	lsl.w	r0, r3, r0
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	4303      	orrs	r3, r0
 800790e:	3401      	adds	r4, #1
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007916:	4826      	ldr	r0, [pc, #152]	; (80079b0 <_svfiprintf_r+0x1f0>)
 8007918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800791c:	2206      	movs	r2, #6
 800791e:	f7f8 fc5f 	bl	80001e0 <memchr>
 8007922:	2800      	cmp	r0, #0
 8007924:	d038      	beq.n	8007998 <_svfiprintf_r+0x1d8>
 8007926:	4b23      	ldr	r3, [pc, #140]	; (80079b4 <_svfiprintf_r+0x1f4>)
 8007928:	bb1b      	cbnz	r3, 8007972 <_svfiprintf_r+0x1b2>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	3307      	adds	r3, #7
 800792e:	f023 0307 	bic.w	r3, r3, #7
 8007932:	3308      	adds	r3, #8
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007938:	4433      	add	r3, r6
 800793a:	9309      	str	r3, [sp, #36]	; 0x24
 800793c:	e767      	b.n	800780e <_svfiprintf_r+0x4e>
 800793e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007942:	460c      	mov	r4, r1
 8007944:	2001      	movs	r0, #1
 8007946:	e7a5      	b.n	8007894 <_svfiprintf_r+0xd4>
 8007948:	2300      	movs	r3, #0
 800794a:	3401      	adds	r4, #1
 800794c:	9305      	str	r3, [sp, #20]
 800794e:	4619      	mov	r1, r3
 8007950:	f04f 0c0a 	mov.w	ip, #10
 8007954:	4620      	mov	r0, r4
 8007956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800795a:	3a30      	subs	r2, #48	; 0x30
 800795c:	2a09      	cmp	r2, #9
 800795e:	d903      	bls.n	8007968 <_svfiprintf_r+0x1a8>
 8007960:	2b00      	cmp	r3, #0
 8007962:	d0c5      	beq.n	80078f0 <_svfiprintf_r+0x130>
 8007964:	9105      	str	r1, [sp, #20]
 8007966:	e7c3      	b.n	80078f0 <_svfiprintf_r+0x130>
 8007968:	fb0c 2101 	mla	r1, ip, r1, r2
 800796c:	4604      	mov	r4, r0
 800796e:	2301      	movs	r3, #1
 8007970:	e7f0      	b.n	8007954 <_svfiprintf_r+0x194>
 8007972:	ab03      	add	r3, sp, #12
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	462a      	mov	r2, r5
 8007978:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <_svfiprintf_r+0x1f8>)
 800797a:	a904      	add	r1, sp, #16
 800797c:	4638      	mov	r0, r7
 800797e:	f7fd fdbf 	bl	8005500 <_printf_float>
 8007982:	1c42      	adds	r2, r0, #1
 8007984:	4606      	mov	r6, r0
 8007986:	d1d6      	bne.n	8007936 <_svfiprintf_r+0x176>
 8007988:	89ab      	ldrh	r3, [r5, #12]
 800798a:	065b      	lsls	r3, r3, #25
 800798c:	f53f af2c 	bmi.w	80077e8 <_svfiprintf_r+0x28>
 8007990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007992:	b01d      	add	sp, #116	; 0x74
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	ab03      	add	r3, sp, #12
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	462a      	mov	r2, r5
 800799e:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <_svfiprintf_r+0x1f8>)
 80079a0:	a904      	add	r1, sp, #16
 80079a2:	4638      	mov	r0, r7
 80079a4:	f7fe f850 	bl	8005a48 <_printf_i>
 80079a8:	e7eb      	b.n	8007982 <_svfiprintf_r+0x1c2>
 80079aa:	bf00      	nop
 80079ac:	0800909c 	.word	0x0800909c
 80079b0:	080090a6 	.word	0x080090a6
 80079b4:	08005501 	.word	0x08005501
 80079b8:	08007709 	.word	0x08007709
 80079bc:	080090a2 	.word	0x080090a2

080079c0 <__sfputc_r>:
 80079c0:	6893      	ldr	r3, [r2, #8]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	b410      	push	{r4}
 80079c8:	6093      	str	r3, [r2, #8]
 80079ca:	da08      	bge.n	80079de <__sfputc_r+0x1e>
 80079cc:	6994      	ldr	r4, [r2, #24]
 80079ce:	42a3      	cmp	r3, r4
 80079d0:	db01      	blt.n	80079d6 <__sfputc_r+0x16>
 80079d2:	290a      	cmp	r1, #10
 80079d4:	d103      	bne.n	80079de <__sfputc_r+0x1e>
 80079d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079da:	f7fe b9cf 	b.w	8005d7c <__swbuf_r>
 80079de:	6813      	ldr	r3, [r2, #0]
 80079e0:	1c58      	adds	r0, r3, #1
 80079e2:	6010      	str	r0, [r2, #0]
 80079e4:	7019      	strb	r1, [r3, #0]
 80079e6:	4608      	mov	r0, r1
 80079e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <__sfputs_r>:
 80079ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f0:	4606      	mov	r6, r0
 80079f2:	460f      	mov	r7, r1
 80079f4:	4614      	mov	r4, r2
 80079f6:	18d5      	adds	r5, r2, r3
 80079f8:	42ac      	cmp	r4, r5
 80079fa:	d101      	bne.n	8007a00 <__sfputs_r+0x12>
 80079fc:	2000      	movs	r0, #0
 80079fe:	e007      	b.n	8007a10 <__sfputs_r+0x22>
 8007a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a04:	463a      	mov	r2, r7
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ffda 	bl	80079c0 <__sfputc_r>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d1f3      	bne.n	80079f8 <__sfputs_r+0xa>
 8007a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a14 <_vfiprintf_r>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	460d      	mov	r5, r1
 8007a1a:	b09d      	sub	sp, #116	; 0x74
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	4698      	mov	r8, r3
 8007a20:	4606      	mov	r6, r0
 8007a22:	b118      	cbz	r0, 8007a2c <_vfiprintf_r+0x18>
 8007a24:	6983      	ldr	r3, [r0, #24]
 8007a26:	b90b      	cbnz	r3, 8007a2c <_vfiprintf_r+0x18>
 8007a28:	f7fd fb5a 	bl	80050e0 <__sinit>
 8007a2c:	4b89      	ldr	r3, [pc, #548]	; (8007c54 <_vfiprintf_r+0x240>)
 8007a2e:	429d      	cmp	r5, r3
 8007a30:	d11b      	bne.n	8007a6a <_vfiprintf_r+0x56>
 8007a32:	6875      	ldr	r5, [r6, #4]
 8007a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a36:	07d9      	lsls	r1, r3, #31
 8007a38:	d405      	bmi.n	8007a46 <_vfiprintf_r+0x32>
 8007a3a:	89ab      	ldrh	r3, [r5, #12]
 8007a3c:	059a      	lsls	r2, r3, #22
 8007a3e:	d402      	bmi.n	8007a46 <_vfiprintf_r+0x32>
 8007a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a42:	f7fd fc10 	bl	8005266 <__retarget_lock_acquire_recursive>
 8007a46:	89ab      	ldrh	r3, [r5, #12]
 8007a48:	071b      	lsls	r3, r3, #28
 8007a4a:	d501      	bpl.n	8007a50 <_vfiprintf_r+0x3c>
 8007a4c:	692b      	ldr	r3, [r5, #16]
 8007a4e:	b9eb      	cbnz	r3, 8007a8c <_vfiprintf_r+0x78>
 8007a50:	4629      	mov	r1, r5
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7fe f9f6 	bl	8005e44 <__swsetup_r>
 8007a58:	b1c0      	cbz	r0, 8007a8c <_vfiprintf_r+0x78>
 8007a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a5c:	07dc      	lsls	r4, r3, #31
 8007a5e:	d50e      	bpl.n	8007a7e <_vfiprintf_r+0x6a>
 8007a60:	f04f 30ff 	mov.w	r0, #4294967295
 8007a64:	b01d      	add	sp, #116	; 0x74
 8007a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6a:	4b7b      	ldr	r3, [pc, #492]	; (8007c58 <_vfiprintf_r+0x244>)
 8007a6c:	429d      	cmp	r5, r3
 8007a6e:	d101      	bne.n	8007a74 <_vfiprintf_r+0x60>
 8007a70:	68b5      	ldr	r5, [r6, #8]
 8007a72:	e7df      	b.n	8007a34 <_vfiprintf_r+0x20>
 8007a74:	4b79      	ldr	r3, [pc, #484]	; (8007c5c <_vfiprintf_r+0x248>)
 8007a76:	429d      	cmp	r5, r3
 8007a78:	bf08      	it	eq
 8007a7a:	68f5      	ldreq	r5, [r6, #12]
 8007a7c:	e7da      	b.n	8007a34 <_vfiprintf_r+0x20>
 8007a7e:	89ab      	ldrh	r3, [r5, #12]
 8007a80:	0598      	lsls	r0, r3, #22
 8007a82:	d4ed      	bmi.n	8007a60 <_vfiprintf_r+0x4c>
 8007a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a86:	f7fd fbef 	bl	8005268 <__retarget_lock_release_recursive>
 8007a8a:	e7e9      	b.n	8007a60 <_vfiprintf_r+0x4c>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a90:	2320      	movs	r3, #32
 8007a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a9a:	2330      	movs	r3, #48	; 0x30
 8007a9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c60 <_vfiprintf_r+0x24c>
 8007aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aa4:	f04f 0901 	mov.w	r9, #1
 8007aa8:	4623      	mov	r3, r4
 8007aaa:	469a      	mov	sl, r3
 8007aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ab0:	b10a      	cbz	r2, 8007ab6 <_vfiprintf_r+0xa2>
 8007ab2:	2a25      	cmp	r2, #37	; 0x25
 8007ab4:	d1f9      	bne.n	8007aaa <_vfiprintf_r+0x96>
 8007ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8007aba:	d00b      	beq.n	8007ad4 <_vfiprintf_r+0xc0>
 8007abc:	465b      	mov	r3, fp
 8007abe:	4622      	mov	r2, r4
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f7ff ff93 	bl	80079ee <__sfputs_r>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f000 80aa 	beq.w	8007c22 <_vfiprintf_r+0x20e>
 8007ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad0:	445a      	add	r2, fp
 8007ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80a2 	beq.w	8007c22 <_vfiprintf_r+0x20e>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ae8:	f10a 0a01 	add.w	sl, sl, #1
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007af4:	931a      	str	r3, [sp, #104]	; 0x68
 8007af6:	4654      	mov	r4, sl
 8007af8:	2205      	movs	r2, #5
 8007afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007afe:	4858      	ldr	r0, [pc, #352]	; (8007c60 <_vfiprintf_r+0x24c>)
 8007b00:	f7f8 fb6e 	bl	80001e0 <memchr>
 8007b04:	9a04      	ldr	r2, [sp, #16]
 8007b06:	b9d8      	cbnz	r0, 8007b40 <_vfiprintf_r+0x12c>
 8007b08:	06d1      	lsls	r1, r2, #27
 8007b0a:	bf44      	itt	mi
 8007b0c:	2320      	movmi	r3, #32
 8007b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b12:	0713      	lsls	r3, r2, #28
 8007b14:	bf44      	itt	mi
 8007b16:	232b      	movmi	r3, #43	; 0x2b
 8007b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b20:	2b2a      	cmp	r3, #42	; 0x2a
 8007b22:	d015      	beq.n	8007b50 <_vfiprintf_r+0x13c>
 8007b24:	9a07      	ldr	r2, [sp, #28]
 8007b26:	4654      	mov	r4, sl
 8007b28:	2000      	movs	r0, #0
 8007b2a:	f04f 0c0a 	mov.w	ip, #10
 8007b2e:	4621      	mov	r1, r4
 8007b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b34:	3b30      	subs	r3, #48	; 0x30
 8007b36:	2b09      	cmp	r3, #9
 8007b38:	d94e      	bls.n	8007bd8 <_vfiprintf_r+0x1c4>
 8007b3a:	b1b0      	cbz	r0, 8007b6a <_vfiprintf_r+0x156>
 8007b3c:	9207      	str	r2, [sp, #28]
 8007b3e:	e014      	b.n	8007b6a <_vfiprintf_r+0x156>
 8007b40:	eba0 0308 	sub.w	r3, r0, r8
 8007b44:	fa09 f303 	lsl.w	r3, r9, r3
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	9304      	str	r3, [sp, #16]
 8007b4c:	46a2      	mov	sl, r4
 8007b4e:	e7d2      	b.n	8007af6 <_vfiprintf_r+0xe2>
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	1d19      	adds	r1, r3, #4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	9103      	str	r1, [sp, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bfbb      	ittet	lt
 8007b5c:	425b      	neglt	r3, r3
 8007b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b62:	9307      	strge	r3, [sp, #28]
 8007b64:	9307      	strlt	r3, [sp, #28]
 8007b66:	bfb8      	it	lt
 8007b68:	9204      	strlt	r2, [sp, #16]
 8007b6a:	7823      	ldrb	r3, [r4, #0]
 8007b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b6e:	d10c      	bne.n	8007b8a <_vfiprintf_r+0x176>
 8007b70:	7863      	ldrb	r3, [r4, #1]
 8007b72:	2b2a      	cmp	r3, #42	; 0x2a
 8007b74:	d135      	bne.n	8007be2 <_vfiprintf_r+0x1ce>
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	1d1a      	adds	r2, r3, #4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	9203      	str	r2, [sp, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bfb8      	it	lt
 8007b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b86:	3402      	adds	r4, #2
 8007b88:	9305      	str	r3, [sp, #20]
 8007b8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c70 <_vfiprintf_r+0x25c>
 8007b8e:	7821      	ldrb	r1, [r4, #0]
 8007b90:	2203      	movs	r2, #3
 8007b92:	4650      	mov	r0, sl
 8007b94:	f7f8 fb24 	bl	80001e0 <memchr>
 8007b98:	b140      	cbz	r0, 8007bac <_vfiprintf_r+0x198>
 8007b9a:	2340      	movs	r3, #64	; 0x40
 8007b9c:	eba0 000a 	sub.w	r0, r0, sl
 8007ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	4303      	orrs	r3, r0
 8007ba8:	3401      	adds	r4, #1
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb0:	482c      	ldr	r0, [pc, #176]	; (8007c64 <_vfiprintf_r+0x250>)
 8007bb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bb6:	2206      	movs	r2, #6
 8007bb8:	f7f8 fb12 	bl	80001e0 <memchr>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d03f      	beq.n	8007c40 <_vfiprintf_r+0x22c>
 8007bc0:	4b29      	ldr	r3, [pc, #164]	; (8007c68 <_vfiprintf_r+0x254>)
 8007bc2:	bb1b      	cbnz	r3, 8007c0c <_vfiprintf_r+0x1f8>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	3307      	adds	r3, #7
 8007bc8:	f023 0307 	bic.w	r3, r3, #7
 8007bcc:	3308      	adds	r3, #8
 8007bce:	9303      	str	r3, [sp, #12]
 8007bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd2:	443b      	add	r3, r7
 8007bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd6:	e767      	b.n	8007aa8 <_vfiprintf_r+0x94>
 8007bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bdc:	460c      	mov	r4, r1
 8007bde:	2001      	movs	r0, #1
 8007be0:	e7a5      	b.n	8007b2e <_vfiprintf_r+0x11a>
 8007be2:	2300      	movs	r3, #0
 8007be4:	3401      	adds	r4, #1
 8007be6:	9305      	str	r3, [sp, #20]
 8007be8:	4619      	mov	r1, r3
 8007bea:	f04f 0c0a 	mov.w	ip, #10
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bf4:	3a30      	subs	r2, #48	; 0x30
 8007bf6:	2a09      	cmp	r2, #9
 8007bf8:	d903      	bls.n	8007c02 <_vfiprintf_r+0x1ee>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0c5      	beq.n	8007b8a <_vfiprintf_r+0x176>
 8007bfe:	9105      	str	r1, [sp, #20]
 8007c00:	e7c3      	b.n	8007b8a <_vfiprintf_r+0x176>
 8007c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c06:	4604      	mov	r4, r0
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e7f0      	b.n	8007bee <_vfiprintf_r+0x1da>
 8007c0c:	ab03      	add	r3, sp, #12
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	462a      	mov	r2, r5
 8007c12:	4b16      	ldr	r3, [pc, #88]	; (8007c6c <_vfiprintf_r+0x258>)
 8007c14:	a904      	add	r1, sp, #16
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7fd fc72 	bl	8005500 <_printf_float>
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	1c78      	adds	r0, r7, #1
 8007c20:	d1d6      	bne.n	8007bd0 <_vfiprintf_r+0x1bc>
 8007c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c24:	07d9      	lsls	r1, r3, #31
 8007c26:	d405      	bmi.n	8007c34 <_vfiprintf_r+0x220>
 8007c28:	89ab      	ldrh	r3, [r5, #12]
 8007c2a:	059a      	lsls	r2, r3, #22
 8007c2c:	d402      	bmi.n	8007c34 <_vfiprintf_r+0x220>
 8007c2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c30:	f7fd fb1a 	bl	8005268 <__retarget_lock_release_recursive>
 8007c34:	89ab      	ldrh	r3, [r5, #12]
 8007c36:	065b      	lsls	r3, r3, #25
 8007c38:	f53f af12 	bmi.w	8007a60 <_vfiprintf_r+0x4c>
 8007c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c3e:	e711      	b.n	8007a64 <_vfiprintf_r+0x50>
 8007c40:	ab03      	add	r3, sp, #12
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	462a      	mov	r2, r5
 8007c46:	4b09      	ldr	r3, [pc, #36]	; (8007c6c <_vfiprintf_r+0x258>)
 8007c48:	a904      	add	r1, sp, #16
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7fd fefc 	bl	8005a48 <_printf_i>
 8007c50:	e7e4      	b.n	8007c1c <_vfiprintf_r+0x208>
 8007c52:	bf00      	nop
 8007c54:	08008dfc 	.word	0x08008dfc
 8007c58:	08008e1c 	.word	0x08008e1c
 8007c5c:	08008ddc 	.word	0x08008ddc
 8007c60:	0800909c 	.word	0x0800909c
 8007c64:	080090a6 	.word	0x080090a6
 8007c68:	08005501 	.word	0x08005501
 8007c6c:	080079ef 	.word	0x080079ef
 8007c70:	080090a2 	.word	0x080090a2

08007c74 <_read_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d07      	ldr	r5, [pc, #28]	; (8007c94 <_read_r+0x20>)
 8007c78:	4604      	mov	r4, r0
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	602a      	str	r2, [r5, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f7fc ff67 	bl	8004b56 <_read>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_read_r+0x1e>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_read_r+0x1e>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	20000484 	.word	0x20000484

08007c98 <abort>:
 8007c98:	b508      	push	{r3, lr}
 8007c9a:	2006      	movs	r0, #6
 8007c9c:	f000 f8aa 	bl	8007df4 <raise>
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	f001 f827 	bl	8008cf4 <_exit>
	...

08007ca8 <_fstat_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d07      	ldr	r5, [pc, #28]	; (8007cc8 <_fstat_r+0x20>)
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	602b      	str	r3, [r5, #0]
 8007cb6:	f7fd f832 	bl	8004d1e <_fstat>
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	d102      	bne.n	8007cc4 <_fstat_r+0x1c>
 8007cbe:	682b      	ldr	r3, [r5, #0]
 8007cc0:	b103      	cbz	r3, 8007cc4 <_fstat_r+0x1c>
 8007cc2:	6023      	str	r3, [r4, #0]
 8007cc4:	bd38      	pop	{r3, r4, r5, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000484 	.word	0x20000484

08007ccc <_isatty_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4d06      	ldr	r5, [pc, #24]	; (8007ce8 <_isatty_r+0x1c>)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	602b      	str	r3, [r5, #0]
 8007cd8:	f7fd f988 	bl	8004fec <_isatty>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_isatty_r+0x1a>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_isatty_r+0x1a>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	20000484 	.word	0x20000484

08007cec <__ascii_mbtowc>:
 8007cec:	b082      	sub	sp, #8
 8007cee:	b901      	cbnz	r1, 8007cf2 <__ascii_mbtowc+0x6>
 8007cf0:	a901      	add	r1, sp, #4
 8007cf2:	b142      	cbz	r2, 8007d06 <__ascii_mbtowc+0x1a>
 8007cf4:	b14b      	cbz	r3, 8007d0a <__ascii_mbtowc+0x1e>
 8007cf6:	7813      	ldrb	r3, [r2, #0]
 8007cf8:	600b      	str	r3, [r1, #0]
 8007cfa:	7812      	ldrb	r2, [r2, #0]
 8007cfc:	1e10      	subs	r0, r2, #0
 8007cfe:	bf18      	it	ne
 8007d00:	2001      	movne	r0, #1
 8007d02:	b002      	add	sp, #8
 8007d04:	4770      	bx	lr
 8007d06:	4610      	mov	r0, r2
 8007d08:	e7fb      	b.n	8007d02 <__ascii_mbtowc+0x16>
 8007d0a:	f06f 0001 	mvn.w	r0, #1
 8007d0e:	e7f8      	b.n	8007d02 <__ascii_mbtowc+0x16>

08007d10 <memmove>:
 8007d10:	4288      	cmp	r0, r1
 8007d12:	b510      	push	{r4, lr}
 8007d14:	eb01 0402 	add.w	r4, r1, r2
 8007d18:	d902      	bls.n	8007d20 <memmove+0x10>
 8007d1a:	4284      	cmp	r4, r0
 8007d1c:	4623      	mov	r3, r4
 8007d1e:	d807      	bhi.n	8007d30 <memmove+0x20>
 8007d20:	1e43      	subs	r3, r0, #1
 8007d22:	42a1      	cmp	r1, r4
 8007d24:	d008      	beq.n	8007d38 <memmove+0x28>
 8007d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d2e:	e7f8      	b.n	8007d22 <memmove+0x12>
 8007d30:	4402      	add	r2, r0
 8007d32:	4601      	mov	r1, r0
 8007d34:	428a      	cmp	r2, r1
 8007d36:	d100      	bne.n	8007d3a <memmove+0x2a>
 8007d38:	bd10      	pop	{r4, pc}
 8007d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d42:	e7f7      	b.n	8007d34 <memmove+0x24>

08007d44 <_realloc_r>:
 8007d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d48:	4680      	mov	r8, r0
 8007d4a:	4614      	mov	r4, r2
 8007d4c:	460e      	mov	r6, r1
 8007d4e:	b921      	cbnz	r1, 8007d5a <_realloc_r+0x16>
 8007d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d54:	4611      	mov	r1, r2
 8007d56:	f7fd babf 	b.w	80052d8 <_malloc_r>
 8007d5a:	b92a      	cbnz	r2, 8007d68 <_realloc_r+0x24>
 8007d5c:	f7ff fc88 	bl	8007670 <_free_r>
 8007d60:	4625      	mov	r5, r4
 8007d62:	4628      	mov	r0, r5
 8007d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d68:	f000 f86d 	bl	8007e46 <_malloc_usable_size_r>
 8007d6c:	4284      	cmp	r4, r0
 8007d6e:	4607      	mov	r7, r0
 8007d70:	d802      	bhi.n	8007d78 <_realloc_r+0x34>
 8007d72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d76:	d812      	bhi.n	8007d9e <_realloc_r+0x5a>
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	f7fd faac 	bl	80052d8 <_malloc_r>
 8007d80:	4605      	mov	r5, r0
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d0ed      	beq.n	8007d62 <_realloc_r+0x1e>
 8007d86:	42bc      	cmp	r4, r7
 8007d88:	4622      	mov	r2, r4
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	bf28      	it	cs
 8007d8e:	463a      	movcs	r2, r7
 8007d90:	f7fd fa6b 	bl	800526a <memcpy>
 8007d94:	4631      	mov	r1, r6
 8007d96:	4640      	mov	r0, r8
 8007d98:	f7ff fc6a 	bl	8007670 <_free_r>
 8007d9c:	e7e1      	b.n	8007d62 <_realloc_r+0x1e>
 8007d9e:	4635      	mov	r5, r6
 8007da0:	e7df      	b.n	8007d62 <_realloc_r+0x1e>

08007da2 <_raise_r>:
 8007da2:	291f      	cmp	r1, #31
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4604      	mov	r4, r0
 8007da8:	460d      	mov	r5, r1
 8007daa:	d904      	bls.n	8007db6 <_raise_r+0x14>
 8007dac:	2316      	movs	r3, #22
 8007dae:	6003      	str	r3, [r0, #0]
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
 8007db6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007db8:	b112      	cbz	r2, 8007dc0 <_raise_r+0x1e>
 8007dba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dbe:	b94b      	cbnz	r3, 8007dd4 <_raise_r+0x32>
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 f831 	bl	8007e28 <_getpid_r>
 8007dc6:	462a      	mov	r2, r5
 8007dc8:	4601      	mov	r1, r0
 8007dca:	4620      	mov	r0, r4
 8007dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dd0:	f000 b818 	b.w	8007e04 <_kill_r>
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d00a      	beq.n	8007dee <_raise_r+0x4c>
 8007dd8:	1c59      	adds	r1, r3, #1
 8007dda:	d103      	bne.n	8007de4 <_raise_r+0x42>
 8007ddc:	2316      	movs	r3, #22
 8007dde:	6003      	str	r3, [r0, #0]
 8007de0:	2001      	movs	r0, #1
 8007de2:	e7e7      	b.n	8007db4 <_raise_r+0x12>
 8007de4:	2400      	movs	r4, #0
 8007de6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007dea:	4628      	mov	r0, r5
 8007dec:	4798      	blx	r3
 8007dee:	2000      	movs	r0, #0
 8007df0:	e7e0      	b.n	8007db4 <_raise_r+0x12>
	...

08007df4 <raise>:
 8007df4:	4b02      	ldr	r3, [pc, #8]	; (8007e00 <raise+0xc>)
 8007df6:	4601      	mov	r1, r0
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	f7ff bfd2 	b.w	8007da2 <_raise_r>
 8007dfe:	bf00      	nop
 8007e00:	200000e4 	.word	0x200000e4

08007e04 <_kill_r>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	4d07      	ldr	r5, [pc, #28]	; (8007e24 <_kill_r+0x20>)
 8007e08:	2300      	movs	r3, #0
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	4611      	mov	r1, r2
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	f000 ff67 	bl	8008ce4 <_kill>
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	d102      	bne.n	8007e20 <_kill_r+0x1c>
 8007e1a:	682b      	ldr	r3, [r5, #0]
 8007e1c:	b103      	cbz	r3, 8007e20 <_kill_r+0x1c>
 8007e1e:	6023      	str	r3, [r4, #0]
 8007e20:	bd38      	pop	{r3, r4, r5, pc}
 8007e22:	bf00      	nop
 8007e24:	20000484 	.word	0x20000484

08007e28 <_getpid_r>:
 8007e28:	f7fc bf56 	b.w	8004cd8 <_getpid>

08007e2c <__ascii_wctomb>:
 8007e2c:	b149      	cbz	r1, 8007e42 <__ascii_wctomb+0x16>
 8007e2e:	2aff      	cmp	r2, #255	; 0xff
 8007e30:	bf85      	ittet	hi
 8007e32:	238a      	movhi	r3, #138	; 0x8a
 8007e34:	6003      	strhi	r3, [r0, #0]
 8007e36:	700a      	strbls	r2, [r1, #0]
 8007e38:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e3c:	bf98      	it	ls
 8007e3e:	2001      	movls	r0, #1
 8007e40:	4770      	bx	lr
 8007e42:	4608      	mov	r0, r1
 8007e44:	4770      	bx	lr

08007e46 <_malloc_usable_size_r>:
 8007e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e4a:	1f18      	subs	r0, r3, #4
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bfbc      	itt	lt
 8007e50:	580b      	ldrlt	r3, [r1, r0]
 8007e52:	18c0      	addlt	r0, r0, r3
 8007e54:	4770      	bx	lr
	...

08007e58 <pow>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	ed2d 8b02 	vpush	{d8}
 8007e5e:	eeb0 8a40 	vmov.f32	s16, s0
 8007e62:	eef0 8a60 	vmov.f32	s17, s1
 8007e66:	ec55 4b11 	vmov	r4, r5, d1
 8007e6a:	f000 f891 	bl	8007f90 <__ieee754_pow>
 8007e6e:	4622      	mov	r2, r4
 8007e70:	462b      	mov	r3, r5
 8007e72:	4620      	mov	r0, r4
 8007e74:	4629      	mov	r1, r5
 8007e76:	ec57 6b10 	vmov	r6, r7, d0
 8007e7a:	f7f8 fe57 	bl	8000b2c <__aeabi_dcmpun>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d13b      	bne.n	8007efa <pow+0xa2>
 8007e82:	ec51 0b18 	vmov	r0, r1, d8
 8007e86:	2200      	movs	r2, #0
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f7f8 fe1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e8e:	b1b8      	cbz	r0, 8007ec0 <pow+0x68>
 8007e90:	2200      	movs	r2, #0
 8007e92:	2300      	movs	r3, #0
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d146      	bne.n	8007f2e <pow+0xd6>
 8007ea0:	ec45 4b10 	vmov	d0, r4, r5
 8007ea4:	f000 fe8d 	bl	8008bc2 <finite>
 8007ea8:	b338      	cbz	r0, 8007efa <pow+0xa2>
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2300      	movs	r3, #0
 8007eae:	4620      	mov	r0, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7f8 fe13 	bl	8000adc <__aeabi_dcmplt>
 8007eb6:	b300      	cbz	r0, 8007efa <pow+0xa2>
 8007eb8:	f7fd f8b4 	bl	8005024 <__errno>
 8007ebc:	2322      	movs	r3, #34	; 0x22
 8007ebe:	e01b      	b.n	8007ef8 <pow+0xa0>
 8007ec0:	ec47 6b10 	vmov	d0, r6, r7
 8007ec4:	f000 fe7d 	bl	8008bc2 <finite>
 8007ec8:	b9e0      	cbnz	r0, 8007f04 <pow+0xac>
 8007eca:	eeb0 0a48 	vmov.f32	s0, s16
 8007ece:	eef0 0a68 	vmov.f32	s1, s17
 8007ed2:	f000 fe76 	bl	8008bc2 <finite>
 8007ed6:	b1a8      	cbz	r0, 8007f04 <pow+0xac>
 8007ed8:	ec45 4b10 	vmov	d0, r4, r5
 8007edc:	f000 fe71 	bl	8008bc2 <finite>
 8007ee0:	b180      	cbz	r0, 8007f04 <pow+0xac>
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	4639      	mov	r1, r7
 8007eea:	f7f8 fe1f 	bl	8000b2c <__aeabi_dcmpun>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d0e2      	beq.n	8007eb8 <pow+0x60>
 8007ef2:	f7fd f897 	bl	8005024 <__errno>
 8007ef6:	2321      	movs	r3, #33	; 0x21
 8007ef8:	6003      	str	r3, [r0, #0]
 8007efa:	ecbd 8b02 	vpop	{d8}
 8007efe:	ec47 6b10 	vmov	d0, r6, r7
 8007f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f04:	2200      	movs	r2, #0
 8007f06:	2300      	movs	r3, #0
 8007f08:	4630      	mov	r0, r6
 8007f0a:	4639      	mov	r1, r7
 8007f0c:	f7f8 fddc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d0f2      	beq.n	8007efa <pow+0xa2>
 8007f14:	eeb0 0a48 	vmov.f32	s0, s16
 8007f18:	eef0 0a68 	vmov.f32	s1, s17
 8007f1c:	f000 fe51 	bl	8008bc2 <finite>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d0ea      	beq.n	8007efa <pow+0xa2>
 8007f24:	ec45 4b10 	vmov	d0, r4, r5
 8007f28:	f000 fe4b 	bl	8008bc2 <finite>
 8007f2c:	e7c3      	b.n	8007eb6 <pow+0x5e>
 8007f2e:	4f01      	ldr	r7, [pc, #4]	; (8007f34 <pow+0xdc>)
 8007f30:	2600      	movs	r6, #0
 8007f32:	e7e2      	b.n	8007efa <pow+0xa2>
 8007f34:	3ff00000 	.word	0x3ff00000

08007f38 <sqrt>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	ed2d 8b02 	vpush	{d8}
 8007f3e:	ec55 4b10 	vmov	r4, r5, d0
 8007f42:	f000 fd53 	bl	80089ec <__ieee754_sqrt>
 8007f46:	4622      	mov	r2, r4
 8007f48:	462b      	mov	r3, r5
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	eeb0 8a40 	vmov.f32	s16, s0
 8007f52:	eef0 8a60 	vmov.f32	s17, s1
 8007f56:	f7f8 fde9 	bl	8000b2c <__aeabi_dcmpun>
 8007f5a:	b990      	cbnz	r0, 8007f82 <sqrt+0x4a>
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4620      	mov	r0, r4
 8007f62:	4629      	mov	r1, r5
 8007f64:	f7f8 fdba 	bl	8000adc <__aeabi_dcmplt>
 8007f68:	b158      	cbz	r0, 8007f82 <sqrt+0x4a>
 8007f6a:	f7fd f85b 	bl	8005024 <__errno>
 8007f6e:	2321      	movs	r3, #33	; 0x21
 8007f70:	6003      	str	r3, [r0, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	2300      	movs	r3, #0
 8007f76:	4610      	mov	r0, r2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f7f8 fc67 	bl	800084c <__aeabi_ddiv>
 8007f7e:	ec41 0b18 	vmov	d8, r0, r1
 8007f82:	eeb0 0a48 	vmov.f32	s0, s16
 8007f86:	eef0 0a68 	vmov.f32	s1, s17
 8007f8a:	ecbd 8b02 	vpop	{d8}
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}

08007f90 <__ieee754_pow>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	ed2d 8b06 	vpush	{d8-d10}
 8007f98:	b089      	sub	sp, #36	; 0x24
 8007f9a:	ed8d 1b00 	vstr	d1, [sp]
 8007f9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007fa2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007fa6:	ea58 0102 	orrs.w	r1, r8, r2
 8007faa:	ec57 6b10 	vmov	r6, r7, d0
 8007fae:	d115      	bne.n	8007fdc <__ieee754_pow+0x4c>
 8007fb0:	19b3      	adds	r3, r6, r6
 8007fb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007fb6:	4152      	adcs	r2, r2
 8007fb8:	4299      	cmp	r1, r3
 8007fba:	4b89      	ldr	r3, [pc, #548]	; (80081e0 <__ieee754_pow+0x250>)
 8007fbc:	4193      	sbcs	r3, r2
 8007fbe:	f080 84d2 	bcs.w	8008966 <__ieee754_pow+0x9d6>
 8007fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 f95f 	bl	800028c <__adddf3>
 8007fce:	ec41 0b10 	vmov	d0, r0, r1
 8007fd2:	b009      	add	sp, #36	; 0x24
 8007fd4:	ecbd 8b06 	vpop	{d8-d10}
 8007fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fdc:	4b81      	ldr	r3, [pc, #516]	; (80081e4 <__ieee754_pow+0x254>)
 8007fde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007fe2:	429c      	cmp	r4, r3
 8007fe4:	ee10 aa10 	vmov	sl, s0
 8007fe8:	463d      	mov	r5, r7
 8007fea:	dc06      	bgt.n	8007ffa <__ieee754_pow+0x6a>
 8007fec:	d101      	bne.n	8007ff2 <__ieee754_pow+0x62>
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	d1e7      	bne.n	8007fc2 <__ieee754_pow+0x32>
 8007ff2:	4598      	cmp	r8, r3
 8007ff4:	dc01      	bgt.n	8007ffa <__ieee754_pow+0x6a>
 8007ff6:	d10f      	bne.n	8008018 <__ieee754_pow+0x88>
 8007ff8:	b172      	cbz	r2, 8008018 <__ieee754_pow+0x88>
 8007ffa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007ffe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008002:	ea55 050a 	orrs.w	r5, r5, sl
 8008006:	d1dc      	bne.n	8007fc2 <__ieee754_pow+0x32>
 8008008:	e9dd 3200 	ldrd	r3, r2, [sp]
 800800c:	18db      	adds	r3, r3, r3
 800800e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008012:	4152      	adcs	r2, r2
 8008014:	429d      	cmp	r5, r3
 8008016:	e7d0      	b.n	8007fba <__ieee754_pow+0x2a>
 8008018:	2d00      	cmp	r5, #0
 800801a:	da3b      	bge.n	8008094 <__ieee754_pow+0x104>
 800801c:	4b72      	ldr	r3, [pc, #456]	; (80081e8 <__ieee754_pow+0x258>)
 800801e:	4598      	cmp	r8, r3
 8008020:	dc51      	bgt.n	80080c6 <__ieee754_pow+0x136>
 8008022:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008026:	4598      	cmp	r8, r3
 8008028:	f340 84ac 	ble.w	8008984 <__ieee754_pow+0x9f4>
 800802c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008030:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008034:	2b14      	cmp	r3, #20
 8008036:	dd0f      	ble.n	8008058 <__ieee754_pow+0xc8>
 8008038:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800803c:	fa22 f103 	lsr.w	r1, r2, r3
 8008040:	fa01 f303 	lsl.w	r3, r1, r3
 8008044:	4293      	cmp	r3, r2
 8008046:	f040 849d 	bne.w	8008984 <__ieee754_pow+0x9f4>
 800804a:	f001 0101 	and.w	r1, r1, #1
 800804e:	f1c1 0302 	rsb	r3, r1, #2
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	b182      	cbz	r2, 8008078 <__ieee754_pow+0xe8>
 8008056:	e05f      	b.n	8008118 <__ieee754_pow+0x188>
 8008058:	2a00      	cmp	r2, #0
 800805a:	d15b      	bne.n	8008114 <__ieee754_pow+0x184>
 800805c:	f1c3 0314 	rsb	r3, r3, #20
 8008060:	fa48 f103 	asr.w	r1, r8, r3
 8008064:	fa01 f303 	lsl.w	r3, r1, r3
 8008068:	4543      	cmp	r3, r8
 800806a:	f040 8488 	bne.w	800897e <__ieee754_pow+0x9ee>
 800806e:	f001 0101 	and.w	r1, r1, #1
 8008072:	f1c1 0302 	rsb	r3, r1, #2
 8008076:	9304      	str	r3, [sp, #16]
 8008078:	4b5c      	ldr	r3, [pc, #368]	; (80081ec <__ieee754_pow+0x25c>)
 800807a:	4598      	cmp	r8, r3
 800807c:	d132      	bne.n	80080e4 <__ieee754_pow+0x154>
 800807e:	f1b9 0f00 	cmp.w	r9, #0
 8008082:	f280 8478 	bge.w	8008976 <__ieee754_pow+0x9e6>
 8008086:	4959      	ldr	r1, [pc, #356]	; (80081ec <__ieee754_pow+0x25c>)
 8008088:	4632      	mov	r2, r6
 800808a:	463b      	mov	r3, r7
 800808c:	2000      	movs	r0, #0
 800808e:	f7f8 fbdd 	bl	800084c <__aeabi_ddiv>
 8008092:	e79c      	b.n	8007fce <__ieee754_pow+0x3e>
 8008094:	2300      	movs	r3, #0
 8008096:	9304      	str	r3, [sp, #16]
 8008098:	2a00      	cmp	r2, #0
 800809a:	d13d      	bne.n	8008118 <__ieee754_pow+0x188>
 800809c:	4b51      	ldr	r3, [pc, #324]	; (80081e4 <__ieee754_pow+0x254>)
 800809e:	4598      	cmp	r8, r3
 80080a0:	d1ea      	bne.n	8008078 <__ieee754_pow+0xe8>
 80080a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80080a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80080aa:	ea53 030a 	orrs.w	r3, r3, sl
 80080ae:	f000 845a 	beq.w	8008966 <__ieee754_pow+0x9d6>
 80080b2:	4b4f      	ldr	r3, [pc, #316]	; (80081f0 <__ieee754_pow+0x260>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	dd08      	ble.n	80080ca <__ieee754_pow+0x13a>
 80080b8:	f1b9 0f00 	cmp.w	r9, #0
 80080bc:	f2c0 8457 	blt.w	800896e <__ieee754_pow+0x9de>
 80080c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080c4:	e783      	b.n	8007fce <__ieee754_pow+0x3e>
 80080c6:	2302      	movs	r3, #2
 80080c8:	e7e5      	b.n	8008096 <__ieee754_pow+0x106>
 80080ca:	f1b9 0f00 	cmp.w	r9, #0
 80080ce:	f04f 0000 	mov.w	r0, #0
 80080d2:	f04f 0100 	mov.w	r1, #0
 80080d6:	f6bf af7a 	bge.w	8007fce <__ieee754_pow+0x3e>
 80080da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80080de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80080e2:	e774      	b.n	8007fce <__ieee754_pow+0x3e>
 80080e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80080e8:	d106      	bne.n	80080f8 <__ieee754_pow+0x168>
 80080ea:	4632      	mov	r2, r6
 80080ec:	463b      	mov	r3, r7
 80080ee:	4630      	mov	r0, r6
 80080f0:	4639      	mov	r1, r7
 80080f2:	f7f8 fa81 	bl	80005f8 <__aeabi_dmul>
 80080f6:	e76a      	b.n	8007fce <__ieee754_pow+0x3e>
 80080f8:	4b3e      	ldr	r3, [pc, #248]	; (80081f4 <__ieee754_pow+0x264>)
 80080fa:	4599      	cmp	r9, r3
 80080fc:	d10c      	bne.n	8008118 <__ieee754_pow+0x188>
 80080fe:	2d00      	cmp	r5, #0
 8008100:	db0a      	blt.n	8008118 <__ieee754_pow+0x188>
 8008102:	ec47 6b10 	vmov	d0, r6, r7
 8008106:	b009      	add	sp, #36	; 0x24
 8008108:	ecbd 8b06 	vpop	{d8-d10}
 800810c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	f000 bc6c 	b.w	80089ec <__ieee754_sqrt>
 8008114:	2300      	movs	r3, #0
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	ec47 6b10 	vmov	d0, r6, r7
 800811c:	f000 fd48 	bl	8008bb0 <fabs>
 8008120:	ec51 0b10 	vmov	r0, r1, d0
 8008124:	f1ba 0f00 	cmp.w	sl, #0
 8008128:	d129      	bne.n	800817e <__ieee754_pow+0x1ee>
 800812a:	b124      	cbz	r4, 8008136 <__ieee754_pow+0x1a6>
 800812c:	4b2f      	ldr	r3, [pc, #188]	; (80081ec <__ieee754_pow+0x25c>)
 800812e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008132:	429a      	cmp	r2, r3
 8008134:	d123      	bne.n	800817e <__ieee754_pow+0x1ee>
 8008136:	f1b9 0f00 	cmp.w	r9, #0
 800813a:	da05      	bge.n	8008148 <__ieee754_pow+0x1b8>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	2000      	movs	r0, #0
 8008142:	492a      	ldr	r1, [pc, #168]	; (80081ec <__ieee754_pow+0x25c>)
 8008144:	f7f8 fb82 	bl	800084c <__aeabi_ddiv>
 8008148:	2d00      	cmp	r5, #0
 800814a:	f6bf af40 	bge.w	8007fce <__ieee754_pow+0x3e>
 800814e:	9b04      	ldr	r3, [sp, #16]
 8008150:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008154:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008158:	4323      	orrs	r3, r4
 800815a:	d108      	bne.n	800816e <__ieee754_pow+0x1de>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4610      	mov	r0, r2
 8008162:	4619      	mov	r1, r3
 8008164:	f7f8 f890 	bl	8000288 <__aeabi_dsub>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	e78f      	b.n	800808e <__ieee754_pow+0xfe>
 800816e:	9b04      	ldr	r3, [sp, #16]
 8008170:	2b01      	cmp	r3, #1
 8008172:	f47f af2c 	bne.w	8007fce <__ieee754_pow+0x3e>
 8008176:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800817a:	4619      	mov	r1, r3
 800817c:	e727      	b.n	8007fce <__ieee754_pow+0x3e>
 800817e:	0feb      	lsrs	r3, r5, #31
 8008180:	3b01      	subs	r3, #1
 8008182:	9306      	str	r3, [sp, #24]
 8008184:	9a06      	ldr	r2, [sp, #24]
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	4313      	orrs	r3, r2
 800818a:	d102      	bne.n	8008192 <__ieee754_pow+0x202>
 800818c:	4632      	mov	r2, r6
 800818e:	463b      	mov	r3, r7
 8008190:	e7e6      	b.n	8008160 <__ieee754_pow+0x1d0>
 8008192:	4b19      	ldr	r3, [pc, #100]	; (80081f8 <__ieee754_pow+0x268>)
 8008194:	4598      	cmp	r8, r3
 8008196:	f340 80fb 	ble.w	8008390 <__ieee754_pow+0x400>
 800819a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800819e:	4598      	cmp	r8, r3
 80081a0:	4b13      	ldr	r3, [pc, #76]	; (80081f0 <__ieee754_pow+0x260>)
 80081a2:	dd0c      	ble.n	80081be <__ieee754_pow+0x22e>
 80081a4:	429c      	cmp	r4, r3
 80081a6:	dc0f      	bgt.n	80081c8 <__ieee754_pow+0x238>
 80081a8:	f1b9 0f00 	cmp.w	r9, #0
 80081ac:	da0f      	bge.n	80081ce <__ieee754_pow+0x23e>
 80081ae:	2000      	movs	r0, #0
 80081b0:	b009      	add	sp, #36	; 0x24
 80081b2:	ecbd 8b06 	vpop	{d8-d10}
 80081b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	f000 bcf0 	b.w	8008b9e <__math_oflow>
 80081be:	429c      	cmp	r4, r3
 80081c0:	dbf2      	blt.n	80081a8 <__ieee754_pow+0x218>
 80081c2:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <__ieee754_pow+0x25c>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	dd19      	ble.n	80081fc <__ieee754_pow+0x26c>
 80081c8:	f1b9 0f00 	cmp.w	r9, #0
 80081cc:	dcef      	bgt.n	80081ae <__ieee754_pow+0x21e>
 80081ce:	2000      	movs	r0, #0
 80081d0:	b009      	add	sp, #36	; 0x24
 80081d2:	ecbd 8b06 	vpop	{d8-d10}
 80081d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	f000 bcd7 	b.w	8008b8c <__math_uflow>
 80081de:	bf00      	nop
 80081e0:	fff00000 	.word	0xfff00000
 80081e4:	7ff00000 	.word	0x7ff00000
 80081e8:	433fffff 	.word	0x433fffff
 80081ec:	3ff00000 	.word	0x3ff00000
 80081f0:	3fefffff 	.word	0x3fefffff
 80081f4:	3fe00000 	.word	0x3fe00000
 80081f8:	41e00000 	.word	0x41e00000
 80081fc:	4b60      	ldr	r3, [pc, #384]	; (8008380 <__ieee754_pow+0x3f0>)
 80081fe:	2200      	movs	r2, #0
 8008200:	f7f8 f842 	bl	8000288 <__aeabi_dsub>
 8008204:	a354      	add	r3, pc, #336	; (adr r3, 8008358 <__ieee754_pow+0x3c8>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	4604      	mov	r4, r0
 800820c:	460d      	mov	r5, r1
 800820e:	f7f8 f9f3 	bl	80005f8 <__aeabi_dmul>
 8008212:	a353      	add	r3, pc, #332	; (adr r3, 8008360 <__ieee754_pow+0x3d0>)
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	4606      	mov	r6, r0
 800821a:	460f      	mov	r7, r1
 800821c:	4620      	mov	r0, r4
 800821e:	4629      	mov	r1, r5
 8008220:	f7f8 f9ea 	bl	80005f8 <__aeabi_dmul>
 8008224:	4b57      	ldr	r3, [pc, #348]	; (8008384 <__ieee754_pow+0x3f4>)
 8008226:	4682      	mov	sl, r0
 8008228:	468b      	mov	fp, r1
 800822a:	2200      	movs	r2, #0
 800822c:	4620      	mov	r0, r4
 800822e:	4629      	mov	r1, r5
 8008230:	f7f8 f9e2 	bl	80005f8 <__aeabi_dmul>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	a14b      	add	r1, pc, #300	; (adr r1, 8008368 <__ieee754_pow+0x3d8>)
 800823a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800823e:	f7f8 f823 	bl	8000288 <__aeabi_dsub>
 8008242:	4622      	mov	r2, r4
 8008244:	462b      	mov	r3, r5
 8008246:	f7f8 f9d7 	bl	80005f8 <__aeabi_dmul>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	2000      	movs	r0, #0
 8008250:	494d      	ldr	r1, [pc, #308]	; (8008388 <__ieee754_pow+0x3f8>)
 8008252:	f7f8 f819 	bl	8000288 <__aeabi_dsub>
 8008256:	4622      	mov	r2, r4
 8008258:	4680      	mov	r8, r0
 800825a:	4689      	mov	r9, r1
 800825c:	462b      	mov	r3, r5
 800825e:	4620      	mov	r0, r4
 8008260:	4629      	mov	r1, r5
 8008262:	f7f8 f9c9 	bl	80005f8 <__aeabi_dmul>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4640      	mov	r0, r8
 800826c:	4649      	mov	r1, r9
 800826e:	f7f8 f9c3 	bl	80005f8 <__aeabi_dmul>
 8008272:	a33f      	add	r3, pc, #252	; (adr r3, 8008370 <__ieee754_pow+0x3e0>)
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f7f8 f9be 	bl	80005f8 <__aeabi_dmul>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4650      	mov	r0, sl
 8008282:	4659      	mov	r1, fp
 8008284:	f7f8 f800 	bl	8000288 <__aeabi_dsub>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4680      	mov	r8, r0
 800828e:	4689      	mov	r9, r1
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f7f7 fffa 	bl	800028c <__adddf3>
 8008298:	2000      	movs	r0, #0
 800829a:	4632      	mov	r2, r6
 800829c:	463b      	mov	r3, r7
 800829e:	4604      	mov	r4, r0
 80082a0:	460d      	mov	r5, r1
 80082a2:	f7f7 fff1 	bl	8000288 <__aeabi_dsub>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4640      	mov	r0, r8
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7f7 ffeb 	bl	8000288 <__aeabi_dsub>
 80082b2:	9b04      	ldr	r3, [sp, #16]
 80082b4:	9a06      	ldr	r2, [sp, #24]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	4313      	orrs	r3, r2
 80082ba:	4682      	mov	sl, r0
 80082bc:	468b      	mov	fp, r1
 80082be:	f040 81e7 	bne.w	8008690 <__ieee754_pow+0x700>
 80082c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008378 <__ieee754_pow+0x3e8>
 80082c6:	eeb0 8a47 	vmov.f32	s16, s14
 80082ca:	eef0 8a67 	vmov.f32	s17, s15
 80082ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80082d2:	2600      	movs	r6, #0
 80082d4:	4632      	mov	r2, r6
 80082d6:	463b      	mov	r3, r7
 80082d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082dc:	f7f7 ffd4 	bl	8000288 <__aeabi_dsub>
 80082e0:	4622      	mov	r2, r4
 80082e2:	462b      	mov	r3, r5
 80082e4:	f7f8 f988 	bl	80005f8 <__aeabi_dmul>
 80082e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082ec:	4680      	mov	r8, r0
 80082ee:	4689      	mov	r9, r1
 80082f0:	4650      	mov	r0, sl
 80082f2:	4659      	mov	r1, fp
 80082f4:	f7f8 f980 	bl	80005f8 <__aeabi_dmul>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4640      	mov	r0, r8
 80082fe:	4649      	mov	r1, r9
 8008300:	f7f7 ffc4 	bl	800028c <__adddf3>
 8008304:	4632      	mov	r2, r6
 8008306:	463b      	mov	r3, r7
 8008308:	4680      	mov	r8, r0
 800830a:	4689      	mov	r9, r1
 800830c:	4620      	mov	r0, r4
 800830e:	4629      	mov	r1, r5
 8008310:	f7f8 f972 	bl	80005f8 <__aeabi_dmul>
 8008314:	460b      	mov	r3, r1
 8008316:	4604      	mov	r4, r0
 8008318:	460d      	mov	r5, r1
 800831a:	4602      	mov	r2, r0
 800831c:	4649      	mov	r1, r9
 800831e:	4640      	mov	r0, r8
 8008320:	f7f7 ffb4 	bl	800028c <__adddf3>
 8008324:	4b19      	ldr	r3, [pc, #100]	; (800838c <__ieee754_pow+0x3fc>)
 8008326:	4299      	cmp	r1, r3
 8008328:	ec45 4b19 	vmov	d9, r4, r5
 800832c:	4606      	mov	r6, r0
 800832e:	460f      	mov	r7, r1
 8008330:	468b      	mov	fp, r1
 8008332:	f340 82f1 	ble.w	8008918 <__ieee754_pow+0x988>
 8008336:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800833a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800833e:	4303      	orrs	r3, r0
 8008340:	f000 81e4 	beq.w	800870c <__ieee754_pow+0x77c>
 8008344:	ec51 0b18 	vmov	r0, r1, d8
 8008348:	2200      	movs	r2, #0
 800834a:	2300      	movs	r3, #0
 800834c:	f7f8 fbc6 	bl	8000adc <__aeabi_dcmplt>
 8008350:	3800      	subs	r0, #0
 8008352:	bf18      	it	ne
 8008354:	2001      	movne	r0, #1
 8008356:	e72b      	b.n	80081b0 <__ieee754_pow+0x220>
 8008358:	60000000 	.word	0x60000000
 800835c:	3ff71547 	.word	0x3ff71547
 8008360:	f85ddf44 	.word	0xf85ddf44
 8008364:	3e54ae0b 	.word	0x3e54ae0b
 8008368:	55555555 	.word	0x55555555
 800836c:	3fd55555 	.word	0x3fd55555
 8008370:	652b82fe 	.word	0x652b82fe
 8008374:	3ff71547 	.word	0x3ff71547
 8008378:	00000000 	.word	0x00000000
 800837c:	bff00000 	.word	0xbff00000
 8008380:	3ff00000 	.word	0x3ff00000
 8008384:	3fd00000 	.word	0x3fd00000
 8008388:	3fe00000 	.word	0x3fe00000
 800838c:	408fffff 	.word	0x408fffff
 8008390:	4bd5      	ldr	r3, [pc, #852]	; (80086e8 <__ieee754_pow+0x758>)
 8008392:	402b      	ands	r3, r5
 8008394:	2200      	movs	r2, #0
 8008396:	b92b      	cbnz	r3, 80083a4 <__ieee754_pow+0x414>
 8008398:	4bd4      	ldr	r3, [pc, #848]	; (80086ec <__ieee754_pow+0x75c>)
 800839a:	f7f8 f92d 	bl	80005f8 <__aeabi_dmul>
 800839e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80083a2:	460c      	mov	r4, r1
 80083a4:	1523      	asrs	r3, r4, #20
 80083a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80083aa:	4413      	add	r3, r2
 80083ac:	9305      	str	r3, [sp, #20]
 80083ae:	4bd0      	ldr	r3, [pc, #832]	; (80086f0 <__ieee754_pow+0x760>)
 80083b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80083b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80083b8:	429c      	cmp	r4, r3
 80083ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80083be:	dd08      	ble.n	80083d2 <__ieee754_pow+0x442>
 80083c0:	4bcc      	ldr	r3, [pc, #816]	; (80086f4 <__ieee754_pow+0x764>)
 80083c2:	429c      	cmp	r4, r3
 80083c4:	f340 8162 	ble.w	800868c <__ieee754_pow+0x6fc>
 80083c8:	9b05      	ldr	r3, [sp, #20]
 80083ca:	3301      	adds	r3, #1
 80083cc:	9305      	str	r3, [sp, #20]
 80083ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80083d2:	2400      	movs	r4, #0
 80083d4:	00e3      	lsls	r3, r4, #3
 80083d6:	9307      	str	r3, [sp, #28]
 80083d8:	4bc7      	ldr	r3, [pc, #796]	; (80086f8 <__ieee754_pow+0x768>)
 80083da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083de:	ed93 7b00 	vldr	d7, [r3]
 80083e2:	4629      	mov	r1, r5
 80083e4:	ec53 2b17 	vmov	r2, r3, d7
 80083e8:	eeb0 9a47 	vmov.f32	s18, s14
 80083ec:	eef0 9a67 	vmov.f32	s19, s15
 80083f0:	4682      	mov	sl, r0
 80083f2:	f7f7 ff49 	bl	8000288 <__aeabi_dsub>
 80083f6:	4652      	mov	r2, sl
 80083f8:	4606      	mov	r6, r0
 80083fa:	460f      	mov	r7, r1
 80083fc:	462b      	mov	r3, r5
 80083fe:	ec51 0b19 	vmov	r0, r1, d9
 8008402:	f7f7 ff43 	bl	800028c <__adddf3>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	2000      	movs	r0, #0
 800840c:	49bb      	ldr	r1, [pc, #748]	; (80086fc <__ieee754_pow+0x76c>)
 800840e:	f7f8 fa1d 	bl	800084c <__aeabi_ddiv>
 8008412:	ec41 0b1a 	vmov	d10, r0, r1
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4630      	mov	r0, r6
 800841c:	4639      	mov	r1, r7
 800841e:	f7f8 f8eb 	bl	80005f8 <__aeabi_dmul>
 8008422:	2300      	movs	r3, #0
 8008424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008428:	9302      	str	r3, [sp, #8]
 800842a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800842e:	46ab      	mov	fp, r5
 8008430:	106d      	asrs	r5, r5, #1
 8008432:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008436:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800843a:	ec41 0b18 	vmov	d8, r0, r1
 800843e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008442:	2200      	movs	r2, #0
 8008444:	4640      	mov	r0, r8
 8008446:	4649      	mov	r1, r9
 8008448:	4614      	mov	r4, r2
 800844a:	461d      	mov	r5, r3
 800844c:	f7f8 f8d4 	bl	80005f8 <__aeabi_dmul>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4630      	mov	r0, r6
 8008456:	4639      	mov	r1, r7
 8008458:	f7f7 ff16 	bl	8000288 <__aeabi_dsub>
 800845c:	ec53 2b19 	vmov	r2, r3, d9
 8008460:	4606      	mov	r6, r0
 8008462:	460f      	mov	r7, r1
 8008464:	4620      	mov	r0, r4
 8008466:	4629      	mov	r1, r5
 8008468:	f7f7 ff0e 	bl	8000288 <__aeabi_dsub>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4650      	mov	r0, sl
 8008472:	4659      	mov	r1, fp
 8008474:	f7f7 ff08 	bl	8000288 <__aeabi_dsub>
 8008478:	4642      	mov	r2, r8
 800847a:	464b      	mov	r3, r9
 800847c:	f7f8 f8bc 	bl	80005f8 <__aeabi_dmul>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4630      	mov	r0, r6
 8008486:	4639      	mov	r1, r7
 8008488:	f7f7 fefe 	bl	8000288 <__aeabi_dsub>
 800848c:	ec53 2b1a 	vmov	r2, r3, d10
 8008490:	f7f8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8008494:	ec53 2b18 	vmov	r2, r3, d8
 8008498:	ec41 0b19 	vmov	d9, r0, r1
 800849c:	ec51 0b18 	vmov	r0, r1, d8
 80084a0:	f7f8 f8aa 	bl	80005f8 <__aeabi_dmul>
 80084a4:	a37c      	add	r3, pc, #496	; (adr r3, 8008698 <__ieee754_pow+0x708>)
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	4604      	mov	r4, r0
 80084ac:	460d      	mov	r5, r1
 80084ae:	f7f8 f8a3 	bl	80005f8 <__aeabi_dmul>
 80084b2:	a37b      	add	r3, pc, #492	; (adr r3, 80086a0 <__ieee754_pow+0x710>)
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f7f7 fee8 	bl	800028c <__adddf3>
 80084bc:	4622      	mov	r2, r4
 80084be:	462b      	mov	r3, r5
 80084c0:	f7f8 f89a 	bl	80005f8 <__aeabi_dmul>
 80084c4:	a378      	add	r3, pc, #480	; (adr r3, 80086a8 <__ieee754_pow+0x718>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	f7f7 fedf 	bl	800028c <__adddf3>
 80084ce:	4622      	mov	r2, r4
 80084d0:	462b      	mov	r3, r5
 80084d2:	f7f8 f891 	bl	80005f8 <__aeabi_dmul>
 80084d6:	a376      	add	r3, pc, #472	; (adr r3, 80086b0 <__ieee754_pow+0x720>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f7 fed6 	bl	800028c <__adddf3>
 80084e0:	4622      	mov	r2, r4
 80084e2:	462b      	mov	r3, r5
 80084e4:	f7f8 f888 	bl	80005f8 <__aeabi_dmul>
 80084e8:	a373      	add	r3, pc, #460	; (adr r3, 80086b8 <__ieee754_pow+0x728>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	f7f7 fecd 	bl	800028c <__adddf3>
 80084f2:	4622      	mov	r2, r4
 80084f4:	462b      	mov	r3, r5
 80084f6:	f7f8 f87f 	bl	80005f8 <__aeabi_dmul>
 80084fa:	a371      	add	r3, pc, #452	; (adr r3, 80086c0 <__ieee754_pow+0x730>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	f7f7 fec4 	bl	800028c <__adddf3>
 8008504:	4622      	mov	r2, r4
 8008506:	4606      	mov	r6, r0
 8008508:	460f      	mov	r7, r1
 800850a:	462b      	mov	r3, r5
 800850c:	4620      	mov	r0, r4
 800850e:	4629      	mov	r1, r5
 8008510:	f7f8 f872 	bl	80005f8 <__aeabi_dmul>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4630      	mov	r0, r6
 800851a:	4639      	mov	r1, r7
 800851c:	f7f8 f86c 	bl	80005f8 <__aeabi_dmul>
 8008520:	4642      	mov	r2, r8
 8008522:	4604      	mov	r4, r0
 8008524:	460d      	mov	r5, r1
 8008526:	464b      	mov	r3, r9
 8008528:	ec51 0b18 	vmov	r0, r1, d8
 800852c:	f7f7 feae 	bl	800028c <__adddf3>
 8008530:	ec53 2b19 	vmov	r2, r3, d9
 8008534:	f7f8 f860 	bl	80005f8 <__aeabi_dmul>
 8008538:	4622      	mov	r2, r4
 800853a:	462b      	mov	r3, r5
 800853c:	f7f7 fea6 	bl	800028c <__adddf3>
 8008540:	4642      	mov	r2, r8
 8008542:	4682      	mov	sl, r0
 8008544:	468b      	mov	fp, r1
 8008546:	464b      	mov	r3, r9
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f8 f854 	bl	80005f8 <__aeabi_dmul>
 8008550:	4b6b      	ldr	r3, [pc, #428]	; (8008700 <__ieee754_pow+0x770>)
 8008552:	2200      	movs	r2, #0
 8008554:	4606      	mov	r6, r0
 8008556:	460f      	mov	r7, r1
 8008558:	f7f7 fe98 	bl	800028c <__adddf3>
 800855c:	4652      	mov	r2, sl
 800855e:	465b      	mov	r3, fp
 8008560:	f7f7 fe94 	bl	800028c <__adddf3>
 8008564:	2000      	movs	r0, #0
 8008566:	4604      	mov	r4, r0
 8008568:	460d      	mov	r5, r1
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4640      	mov	r0, r8
 8008570:	4649      	mov	r1, r9
 8008572:	f7f8 f841 	bl	80005f8 <__aeabi_dmul>
 8008576:	4b62      	ldr	r3, [pc, #392]	; (8008700 <__ieee754_pow+0x770>)
 8008578:	4680      	mov	r8, r0
 800857a:	4689      	mov	r9, r1
 800857c:	2200      	movs	r2, #0
 800857e:	4620      	mov	r0, r4
 8008580:	4629      	mov	r1, r5
 8008582:	f7f7 fe81 	bl	8000288 <__aeabi_dsub>
 8008586:	4632      	mov	r2, r6
 8008588:	463b      	mov	r3, r7
 800858a:	f7f7 fe7d 	bl	8000288 <__aeabi_dsub>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4650      	mov	r0, sl
 8008594:	4659      	mov	r1, fp
 8008596:	f7f7 fe77 	bl	8000288 <__aeabi_dsub>
 800859a:	ec53 2b18 	vmov	r2, r3, d8
 800859e:	f7f8 f82b 	bl	80005f8 <__aeabi_dmul>
 80085a2:	4622      	mov	r2, r4
 80085a4:	4606      	mov	r6, r0
 80085a6:	460f      	mov	r7, r1
 80085a8:	462b      	mov	r3, r5
 80085aa:	ec51 0b19 	vmov	r0, r1, d9
 80085ae:	f7f8 f823 	bl	80005f8 <__aeabi_dmul>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	4630      	mov	r0, r6
 80085b8:	4639      	mov	r1, r7
 80085ba:	f7f7 fe67 	bl	800028c <__adddf3>
 80085be:	4606      	mov	r6, r0
 80085c0:	460f      	mov	r7, r1
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4640      	mov	r0, r8
 80085c8:	4649      	mov	r1, r9
 80085ca:	f7f7 fe5f 	bl	800028c <__adddf3>
 80085ce:	a33e      	add	r3, pc, #248	; (adr r3, 80086c8 <__ieee754_pow+0x738>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	2000      	movs	r0, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	460d      	mov	r5, r1
 80085da:	f7f8 f80d 	bl	80005f8 <__aeabi_dmul>
 80085de:	4642      	mov	r2, r8
 80085e0:	ec41 0b18 	vmov	d8, r0, r1
 80085e4:	464b      	mov	r3, r9
 80085e6:	4620      	mov	r0, r4
 80085e8:	4629      	mov	r1, r5
 80085ea:	f7f7 fe4d 	bl	8000288 <__aeabi_dsub>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	4630      	mov	r0, r6
 80085f4:	4639      	mov	r1, r7
 80085f6:	f7f7 fe47 	bl	8000288 <__aeabi_dsub>
 80085fa:	a335      	add	r3, pc, #212	; (adr r3, 80086d0 <__ieee754_pow+0x740>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f7f7 fffa 	bl	80005f8 <__aeabi_dmul>
 8008604:	a334      	add	r3, pc, #208	; (adr r3, 80086d8 <__ieee754_pow+0x748>)
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	4606      	mov	r6, r0
 800860c:	460f      	mov	r7, r1
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f7 fff1 	bl	80005f8 <__aeabi_dmul>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4630      	mov	r0, r6
 800861c:	4639      	mov	r1, r7
 800861e:	f7f7 fe35 	bl	800028c <__adddf3>
 8008622:	9a07      	ldr	r2, [sp, #28]
 8008624:	4b37      	ldr	r3, [pc, #220]	; (8008704 <__ieee754_pow+0x774>)
 8008626:	4413      	add	r3, r2
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f7f7 fe2e 	bl	800028c <__adddf3>
 8008630:	4682      	mov	sl, r0
 8008632:	9805      	ldr	r0, [sp, #20]
 8008634:	468b      	mov	fp, r1
 8008636:	f7f7 ff75 	bl	8000524 <__aeabi_i2d>
 800863a:	9a07      	ldr	r2, [sp, #28]
 800863c:	4b32      	ldr	r3, [pc, #200]	; (8008708 <__ieee754_pow+0x778>)
 800863e:	4413      	add	r3, r2
 8008640:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008644:	4606      	mov	r6, r0
 8008646:	460f      	mov	r7, r1
 8008648:	4652      	mov	r2, sl
 800864a:	465b      	mov	r3, fp
 800864c:	ec51 0b18 	vmov	r0, r1, d8
 8008650:	f7f7 fe1c 	bl	800028c <__adddf3>
 8008654:	4642      	mov	r2, r8
 8008656:	464b      	mov	r3, r9
 8008658:	f7f7 fe18 	bl	800028c <__adddf3>
 800865c:	4632      	mov	r2, r6
 800865e:	463b      	mov	r3, r7
 8008660:	f7f7 fe14 	bl	800028c <__adddf3>
 8008664:	2000      	movs	r0, #0
 8008666:	4632      	mov	r2, r6
 8008668:	463b      	mov	r3, r7
 800866a:	4604      	mov	r4, r0
 800866c:	460d      	mov	r5, r1
 800866e:	f7f7 fe0b 	bl	8000288 <__aeabi_dsub>
 8008672:	4642      	mov	r2, r8
 8008674:	464b      	mov	r3, r9
 8008676:	f7f7 fe07 	bl	8000288 <__aeabi_dsub>
 800867a:	ec53 2b18 	vmov	r2, r3, d8
 800867e:	f7f7 fe03 	bl	8000288 <__aeabi_dsub>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4650      	mov	r0, sl
 8008688:	4659      	mov	r1, fp
 800868a:	e610      	b.n	80082ae <__ieee754_pow+0x31e>
 800868c:	2401      	movs	r4, #1
 800868e:	e6a1      	b.n	80083d4 <__ieee754_pow+0x444>
 8008690:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80086e0 <__ieee754_pow+0x750>
 8008694:	e617      	b.n	80082c6 <__ieee754_pow+0x336>
 8008696:	bf00      	nop
 8008698:	4a454eef 	.word	0x4a454eef
 800869c:	3fca7e28 	.word	0x3fca7e28
 80086a0:	93c9db65 	.word	0x93c9db65
 80086a4:	3fcd864a 	.word	0x3fcd864a
 80086a8:	a91d4101 	.word	0xa91d4101
 80086ac:	3fd17460 	.word	0x3fd17460
 80086b0:	518f264d 	.word	0x518f264d
 80086b4:	3fd55555 	.word	0x3fd55555
 80086b8:	db6fabff 	.word	0xdb6fabff
 80086bc:	3fdb6db6 	.word	0x3fdb6db6
 80086c0:	33333303 	.word	0x33333303
 80086c4:	3fe33333 	.word	0x3fe33333
 80086c8:	e0000000 	.word	0xe0000000
 80086cc:	3feec709 	.word	0x3feec709
 80086d0:	dc3a03fd 	.word	0xdc3a03fd
 80086d4:	3feec709 	.word	0x3feec709
 80086d8:	145b01f5 	.word	0x145b01f5
 80086dc:	be3e2fe0 	.word	0xbe3e2fe0
 80086e0:	00000000 	.word	0x00000000
 80086e4:	3ff00000 	.word	0x3ff00000
 80086e8:	7ff00000 	.word	0x7ff00000
 80086ec:	43400000 	.word	0x43400000
 80086f0:	0003988e 	.word	0x0003988e
 80086f4:	000bb679 	.word	0x000bb679
 80086f8:	080091b8 	.word	0x080091b8
 80086fc:	3ff00000 	.word	0x3ff00000
 8008700:	40080000 	.word	0x40080000
 8008704:	080091d8 	.word	0x080091d8
 8008708:	080091c8 	.word	0x080091c8
 800870c:	a3b5      	add	r3, pc, #724	; (adr r3, 80089e4 <__ieee754_pow+0xa54>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f7 fdb9 	bl	800028c <__adddf3>
 800871a:	4622      	mov	r2, r4
 800871c:	ec41 0b1a 	vmov	d10, r0, r1
 8008720:	462b      	mov	r3, r5
 8008722:	4630      	mov	r0, r6
 8008724:	4639      	mov	r1, r7
 8008726:	f7f7 fdaf 	bl	8000288 <__aeabi_dsub>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	ec51 0b1a 	vmov	r0, r1, d10
 8008732:	f7f8 f9f1 	bl	8000b18 <__aeabi_dcmpgt>
 8008736:	2800      	cmp	r0, #0
 8008738:	f47f ae04 	bne.w	8008344 <__ieee754_pow+0x3b4>
 800873c:	4aa4      	ldr	r2, [pc, #656]	; (80089d0 <__ieee754_pow+0xa40>)
 800873e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008742:	4293      	cmp	r3, r2
 8008744:	f340 8108 	ble.w	8008958 <__ieee754_pow+0x9c8>
 8008748:	151b      	asrs	r3, r3, #20
 800874a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800874e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008752:	fa4a f303 	asr.w	r3, sl, r3
 8008756:	445b      	add	r3, fp
 8008758:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800875c:	4e9d      	ldr	r6, [pc, #628]	; (80089d4 <__ieee754_pow+0xa44>)
 800875e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008762:	4116      	asrs	r6, r2
 8008764:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008768:	2000      	movs	r0, #0
 800876a:	ea23 0106 	bic.w	r1, r3, r6
 800876e:	f1c2 0214 	rsb	r2, r2, #20
 8008772:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008776:	fa4a fa02 	asr.w	sl, sl, r2
 800877a:	f1bb 0f00 	cmp.w	fp, #0
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4620      	mov	r0, r4
 8008784:	4629      	mov	r1, r5
 8008786:	bfb8      	it	lt
 8008788:	f1ca 0a00 	rsblt	sl, sl, #0
 800878c:	f7f7 fd7c 	bl	8000288 <__aeabi_dsub>
 8008790:	ec41 0b19 	vmov	d9, r0, r1
 8008794:	4642      	mov	r2, r8
 8008796:	464b      	mov	r3, r9
 8008798:	ec51 0b19 	vmov	r0, r1, d9
 800879c:	f7f7 fd76 	bl	800028c <__adddf3>
 80087a0:	a37b      	add	r3, pc, #492	; (adr r3, 8008990 <__ieee754_pow+0xa00>)
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	2000      	movs	r0, #0
 80087a8:	4604      	mov	r4, r0
 80087aa:	460d      	mov	r5, r1
 80087ac:	f7f7 ff24 	bl	80005f8 <__aeabi_dmul>
 80087b0:	ec53 2b19 	vmov	r2, r3, d9
 80087b4:	4606      	mov	r6, r0
 80087b6:	460f      	mov	r7, r1
 80087b8:	4620      	mov	r0, r4
 80087ba:	4629      	mov	r1, r5
 80087bc:	f7f7 fd64 	bl	8000288 <__aeabi_dsub>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4640      	mov	r0, r8
 80087c6:	4649      	mov	r1, r9
 80087c8:	f7f7 fd5e 	bl	8000288 <__aeabi_dsub>
 80087cc:	a372      	add	r3, pc, #456	; (adr r3, 8008998 <__ieee754_pow+0xa08>)
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	f7f7 ff11 	bl	80005f8 <__aeabi_dmul>
 80087d6:	a372      	add	r3, pc, #456	; (adr r3, 80089a0 <__ieee754_pow+0xa10>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	4680      	mov	r8, r0
 80087de:	4689      	mov	r9, r1
 80087e0:	4620      	mov	r0, r4
 80087e2:	4629      	mov	r1, r5
 80087e4:	f7f7 ff08 	bl	80005f8 <__aeabi_dmul>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4640      	mov	r0, r8
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f7 fd4c 	bl	800028c <__adddf3>
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4630      	mov	r0, r6
 80087fe:	4639      	mov	r1, r7
 8008800:	f7f7 fd44 	bl	800028c <__adddf3>
 8008804:	4632      	mov	r2, r6
 8008806:	463b      	mov	r3, r7
 8008808:	4680      	mov	r8, r0
 800880a:	4689      	mov	r9, r1
 800880c:	f7f7 fd3c 	bl	8000288 <__aeabi_dsub>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4620      	mov	r0, r4
 8008816:	4629      	mov	r1, r5
 8008818:	f7f7 fd36 	bl	8000288 <__aeabi_dsub>
 800881c:	4642      	mov	r2, r8
 800881e:	4606      	mov	r6, r0
 8008820:	460f      	mov	r7, r1
 8008822:	464b      	mov	r3, r9
 8008824:	4640      	mov	r0, r8
 8008826:	4649      	mov	r1, r9
 8008828:	f7f7 fee6 	bl	80005f8 <__aeabi_dmul>
 800882c:	a35e      	add	r3, pc, #376	; (adr r3, 80089a8 <__ieee754_pow+0xa18>)
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	4604      	mov	r4, r0
 8008834:	460d      	mov	r5, r1
 8008836:	f7f7 fedf 	bl	80005f8 <__aeabi_dmul>
 800883a:	a35d      	add	r3, pc, #372	; (adr r3, 80089b0 <__ieee754_pow+0xa20>)
 800883c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008840:	f7f7 fd22 	bl	8000288 <__aeabi_dsub>
 8008844:	4622      	mov	r2, r4
 8008846:	462b      	mov	r3, r5
 8008848:	f7f7 fed6 	bl	80005f8 <__aeabi_dmul>
 800884c:	a35a      	add	r3, pc, #360	; (adr r3, 80089b8 <__ieee754_pow+0xa28>)
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	f7f7 fd1b 	bl	800028c <__adddf3>
 8008856:	4622      	mov	r2, r4
 8008858:	462b      	mov	r3, r5
 800885a:	f7f7 fecd 	bl	80005f8 <__aeabi_dmul>
 800885e:	a358      	add	r3, pc, #352	; (adr r3, 80089c0 <__ieee754_pow+0xa30>)
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	f7f7 fd10 	bl	8000288 <__aeabi_dsub>
 8008868:	4622      	mov	r2, r4
 800886a:	462b      	mov	r3, r5
 800886c:	f7f7 fec4 	bl	80005f8 <__aeabi_dmul>
 8008870:	a355      	add	r3, pc, #340	; (adr r3, 80089c8 <__ieee754_pow+0xa38>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fd09 	bl	800028c <__adddf3>
 800887a:	4622      	mov	r2, r4
 800887c:	462b      	mov	r3, r5
 800887e:	f7f7 febb 	bl	80005f8 <__aeabi_dmul>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4640      	mov	r0, r8
 8008888:	4649      	mov	r1, r9
 800888a:	f7f7 fcfd 	bl	8000288 <__aeabi_dsub>
 800888e:	4604      	mov	r4, r0
 8008890:	460d      	mov	r5, r1
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	4640      	mov	r0, r8
 8008898:	4649      	mov	r1, r9
 800889a:	f7f7 fead 	bl	80005f8 <__aeabi_dmul>
 800889e:	2200      	movs	r2, #0
 80088a0:	ec41 0b19 	vmov	d9, r0, r1
 80088a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088a8:	4620      	mov	r0, r4
 80088aa:	4629      	mov	r1, r5
 80088ac:	f7f7 fcec 	bl	8000288 <__aeabi_dsub>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	ec51 0b19 	vmov	r0, r1, d9
 80088b8:	f7f7 ffc8 	bl	800084c <__aeabi_ddiv>
 80088bc:	4632      	mov	r2, r6
 80088be:	4604      	mov	r4, r0
 80088c0:	460d      	mov	r5, r1
 80088c2:	463b      	mov	r3, r7
 80088c4:	4640      	mov	r0, r8
 80088c6:	4649      	mov	r1, r9
 80088c8:	f7f7 fe96 	bl	80005f8 <__aeabi_dmul>
 80088cc:	4632      	mov	r2, r6
 80088ce:	463b      	mov	r3, r7
 80088d0:	f7f7 fcdc 	bl	800028c <__adddf3>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4620      	mov	r0, r4
 80088da:	4629      	mov	r1, r5
 80088dc:	f7f7 fcd4 	bl	8000288 <__aeabi_dsub>
 80088e0:	4642      	mov	r2, r8
 80088e2:	464b      	mov	r3, r9
 80088e4:	f7f7 fcd0 	bl	8000288 <__aeabi_dsub>
 80088e8:	460b      	mov	r3, r1
 80088ea:	4602      	mov	r2, r0
 80088ec:	493a      	ldr	r1, [pc, #232]	; (80089d8 <__ieee754_pow+0xa48>)
 80088ee:	2000      	movs	r0, #0
 80088f0:	f7f7 fcca 	bl	8000288 <__aeabi_dsub>
 80088f4:	ec41 0b10 	vmov	d0, r0, r1
 80088f8:	ee10 3a90 	vmov	r3, s1
 80088fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008904:	da2b      	bge.n	800895e <__ieee754_pow+0x9ce>
 8008906:	4650      	mov	r0, sl
 8008908:	f000 f966 	bl	8008bd8 <scalbn>
 800890c:	ec51 0b10 	vmov	r0, r1, d0
 8008910:	ec53 2b18 	vmov	r2, r3, d8
 8008914:	f7ff bbed 	b.w	80080f2 <__ieee754_pow+0x162>
 8008918:	4b30      	ldr	r3, [pc, #192]	; (80089dc <__ieee754_pow+0xa4c>)
 800891a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800891e:	429e      	cmp	r6, r3
 8008920:	f77f af0c 	ble.w	800873c <__ieee754_pow+0x7ac>
 8008924:	4b2e      	ldr	r3, [pc, #184]	; (80089e0 <__ieee754_pow+0xa50>)
 8008926:	440b      	add	r3, r1
 8008928:	4303      	orrs	r3, r0
 800892a:	d009      	beq.n	8008940 <__ieee754_pow+0x9b0>
 800892c:	ec51 0b18 	vmov	r0, r1, d8
 8008930:	2200      	movs	r2, #0
 8008932:	2300      	movs	r3, #0
 8008934:	f7f8 f8d2 	bl	8000adc <__aeabi_dcmplt>
 8008938:	3800      	subs	r0, #0
 800893a:	bf18      	it	ne
 800893c:	2001      	movne	r0, #1
 800893e:	e447      	b.n	80081d0 <__ieee754_pow+0x240>
 8008940:	4622      	mov	r2, r4
 8008942:	462b      	mov	r3, r5
 8008944:	f7f7 fca0 	bl	8000288 <__aeabi_dsub>
 8008948:	4642      	mov	r2, r8
 800894a:	464b      	mov	r3, r9
 800894c:	f7f8 f8da 	bl	8000b04 <__aeabi_dcmpge>
 8008950:	2800      	cmp	r0, #0
 8008952:	f43f aef3 	beq.w	800873c <__ieee754_pow+0x7ac>
 8008956:	e7e9      	b.n	800892c <__ieee754_pow+0x99c>
 8008958:	f04f 0a00 	mov.w	sl, #0
 800895c:	e71a      	b.n	8008794 <__ieee754_pow+0x804>
 800895e:	ec51 0b10 	vmov	r0, r1, d0
 8008962:	4619      	mov	r1, r3
 8008964:	e7d4      	b.n	8008910 <__ieee754_pow+0x980>
 8008966:	491c      	ldr	r1, [pc, #112]	; (80089d8 <__ieee754_pow+0xa48>)
 8008968:	2000      	movs	r0, #0
 800896a:	f7ff bb30 	b.w	8007fce <__ieee754_pow+0x3e>
 800896e:	2000      	movs	r0, #0
 8008970:	2100      	movs	r1, #0
 8008972:	f7ff bb2c 	b.w	8007fce <__ieee754_pow+0x3e>
 8008976:	4630      	mov	r0, r6
 8008978:	4639      	mov	r1, r7
 800897a:	f7ff bb28 	b.w	8007fce <__ieee754_pow+0x3e>
 800897e:	9204      	str	r2, [sp, #16]
 8008980:	f7ff bb7a 	b.w	8008078 <__ieee754_pow+0xe8>
 8008984:	2300      	movs	r3, #0
 8008986:	f7ff bb64 	b.w	8008052 <__ieee754_pow+0xc2>
 800898a:	bf00      	nop
 800898c:	f3af 8000 	nop.w
 8008990:	00000000 	.word	0x00000000
 8008994:	3fe62e43 	.word	0x3fe62e43
 8008998:	fefa39ef 	.word	0xfefa39ef
 800899c:	3fe62e42 	.word	0x3fe62e42
 80089a0:	0ca86c39 	.word	0x0ca86c39
 80089a4:	be205c61 	.word	0xbe205c61
 80089a8:	72bea4d0 	.word	0x72bea4d0
 80089ac:	3e663769 	.word	0x3e663769
 80089b0:	c5d26bf1 	.word	0xc5d26bf1
 80089b4:	3ebbbd41 	.word	0x3ebbbd41
 80089b8:	af25de2c 	.word	0xaf25de2c
 80089bc:	3f11566a 	.word	0x3f11566a
 80089c0:	16bebd93 	.word	0x16bebd93
 80089c4:	3f66c16c 	.word	0x3f66c16c
 80089c8:	5555553e 	.word	0x5555553e
 80089cc:	3fc55555 	.word	0x3fc55555
 80089d0:	3fe00000 	.word	0x3fe00000
 80089d4:	000fffff 	.word	0x000fffff
 80089d8:	3ff00000 	.word	0x3ff00000
 80089dc:	4090cbff 	.word	0x4090cbff
 80089e0:	3f6f3400 	.word	0x3f6f3400
 80089e4:	652b82fe 	.word	0x652b82fe
 80089e8:	3c971547 	.word	0x3c971547

080089ec <__ieee754_sqrt>:
 80089ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f0:	ec55 4b10 	vmov	r4, r5, d0
 80089f4:	4e55      	ldr	r6, [pc, #340]	; (8008b4c <__ieee754_sqrt+0x160>)
 80089f6:	43ae      	bics	r6, r5
 80089f8:	ee10 0a10 	vmov	r0, s0
 80089fc:	ee10 3a10 	vmov	r3, s0
 8008a00:	462a      	mov	r2, r5
 8008a02:	4629      	mov	r1, r5
 8008a04:	d110      	bne.n	8008a28 <__ieee754_sqrt+0x3c>
 8008a06:	ee10 2a10 	vmov	r2, s0
 8008a0a:	462b      	mov	r3, r5
 8008a0c:	f7f7 fdf4 	bl	80005f8 <__aeabi_dmul>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4620      	mov	r0, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	f7f7 fc38 	bl	800028c <__adddf3>
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	460d      	mov	r5, r1
 8008a20:	ec45 4b10 	vmov	d0, r4, r5
 8008a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	dc10      	bgt.n	8008a4e <__ieee754_sqrt+0x62>
 8008a2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a30:	4330      	orrs	r0, r6
 8008a32:	d0f5      	beq.n	8008a20 <__ieee754_sqrt+0x34>
 8008a34:	b15d      	cbz	r5, 8008a4e <__ieee754_sqrt+0x62>
 8008a36:	ee10 2a10 	vmov	r2, s0
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	ee10 0a10 	vmov	r0, s0
 8008a40:	f7f7 fc22 	bl	8000288 <__aeabi_dsub>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	f7f7 ff00 	bl	800084c <__aeabi_ddiv>
 8008a4c:	e7e6      	b.n	8008a1c <__ieee754_sqrt+0x30>
 8008a4e:	1512      	asrs	r2, r2, #20
 8008a50:	d074      	beq.n	8008b3c <__ieee754_sqrt+0x150>
 8008a52:	07d4      	lsls	r4, r2, #31
 8008a54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008a58:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008a5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a60:	bf5e      	ittt	pl
 8008a62:	0fda      	lsrpl	r2, r3, #31
 8008a64:	005b      	lslpl	r3, r3, #1
 8008a66:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008a6a:	2400      	movs	r4, #0
 8008a6c:	0fda      	lsrs	r2, r3, #31
 8008a6e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008a72:	107f      	asrs	r7, r7, #1
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	2516      	movs	r5, #22
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008a7e:	1886      	adds	r6, r0, r2
 8008a80:	428e      	cmp	r6, r1
 8008a82:	bfde      	ittt	le
 8008a84:	1b89      	suble	r1, r1, r6
 8008a86:	18b0      	addle	r0, r6, r2
 8008a88:	18a4      	addle	r4, r4, r2
 8008a8a:	0049      	lsls	r1, r1, #1
 8008a8c:	3d01      	subs	r5, #1
 8008a8e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008a92:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008a96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a9a:	d1f0      	bne.n	8008a7e <__ieee754_sqrt+0x92>
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	f04f 0e20 	mov.w	lr, #32
 8008aa2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008aa6:	4281      	cmp	r1, r0
 8008aa8:	eb06 0c05 	add.w	ip, r6, r5
 8008aac:	dc02      	bgt.n	8008ab4 <__ieee754_sqrt+0xc8>
 8008aae:	d113      	bne.n	8008ad8 <__ieee754_sqrt+0xec>
 8008ab0:	459c      	cmp	ip, r3
 8008ab2:	d811      	bhi.n	8008ad8 <__ieee754_sqrt+0xec>
 8008ab4:	f1bc 0f00 	cmp.w	ip, #0
 8008ab8:	eb0c 0506 	add.w	r5, ip, r6
 8008abc:	da43      	bge.n	8008b46 <__ieee754_sqrt+0x15a>
 8008abe:	2d00      	cmp	r5, #0
 8008ac0:	db41      	blt.n	8008b46 <__ieee754_sqrt+0x15a>
 8008ac2:	f100 0801 	add.w	r8, r0, #1
 8008ac6:	1a09      	subs	r1, r1, r0
 8008ac8:	459c      	cmp	ip, r3
 8008aca:	bf88      	it	hi
 8008acc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008ad0:	eba3 030c 	sub.w	r3, r3, ip
 8008ad4:	4432      	add	r2, r6
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008adc:	f1be 0e01 	subs.w	lr, lr, #1
 8008ae0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ae8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008aec:	d1db      	bne.n	8008aa6 <__ieee754_sqrt+0xba>
 8008aee:	430b      	orrs	r3, r1
 8008af0:	d006      	beq.n	8008b00 <__ieee754_sqrt+0x114>
 8008af2:	1c50      	adds	r0, r2, #1
 8008af4:	bf13      	iteet	ne
 8008af6:	3201      	addne	r2, #1
 8008af8:	3401      	addeq	r4, #1
 8008afa:	4672      	moveq	r2, lr
 8008afc:	f022 0201 	bicne.w	r2, r2, #1
 8008b00:	1063      	asrs	r3, r4, #1
 8008b02:	0852      	lsrs	r2, r2, #1
 8008b04:	07e1      	lsls	r1, r4, #31
 8008b06:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008b0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008b0e:	bf48      	it	mi
 8008b10:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008b14:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008b18:	4614      	mov	r4, r2
 8008b1a:	e781      	b.n	8008a20 <__ieee754_sqrt+0x34>
 8008b1c:	0ad9      	lsrs	r1, r3, #11
 8008b1e:	3815      	subs	r0, #21
 8008b20:	055b      	lsls	r3, r3, #21
 8008b22:	2900      	cmp	r1, #0
 8008b24:	d0fa      	beq.n	8008b1c <__ieee754_sqrt+0x130>
 8008b26:	02cd      	lsls	r5, r1, #11
 8008b28:	d50a      	bpl.n	8008b40 <__ieee754_sqrt+0x154>
 8008b2a:	f1c2 0420 	rsb	r4, r2, #32
 8008b2e:	fa23 f404 	lsr.w	r4, r3, r4
 8008b32:	1e55      	subs	r5, r2, #1
 8008b34:	4093      	lsls	r3, r2
 8008b36:	4321      	orrs	r1, r4
 8008b38:	1b42      	subs	r2, r0, r5
 8008b3a:	e78a      	b.n	8008a52 <__ieee754_sqrt+0x66>
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	e7f0      	b.n	8008b22 <__ieee754_sqrt+0x136>
 8008b40:	0049      	lsls	r1, r1, #1
 8008b42:	3201      	adds	r2, #1
 8008b44:	e7ef      	b.n	8008b26 <__ieee754_sqrt+0x13a>
 8008b46:	4680      	mov	r8, r0
 8008b48:	e7bd      	b.n	8008ac6 <__ieee754_sqrt+0xda>
 8008b4a:	bf00      	nop
 8008b4c:	7ff00000 	.word	0x7ff00000

08008b50 <with_errno>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	4604      	mov	r4, r0
 8008b54:	460d      	mov	r5, r1
 8008b56:	4616      	mov	r6, r2
 8008b58:	f7fc fa64 	bl	8005024 <__errno>
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	6006      	str	r6, [r0, #0]
 8008b60:	4620      	mov	r0, r4
 8008b62:	bd70      	pop	{r4, r5, r6, pc}

08008b64 <xflow>:
 8008b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b66:	4614      	mov	r4, r2
 8008b68:	461d      	mov	r5, r3
 8008b6a:	b108      	cbz	r0, 8008b70 <xflow+0xc>
 8008b6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b70:	e9cd 2300 	strd	r2, r3, [sp]
 8008b74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b78:	4620      	mov	r0, r4
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	f7f7 fd3c 	bl	80005f8 <__aeabi_dmul>
 8008b80:	2222      	movs	r2, #34	; 0x22
 8008b82:	b003      	add	sp, #12
 8008b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b88:	f7ff bfe2 	b.w	8008b50 <with_errno>

08008b8c <__math_uflow>:
 8008b8c:	b508      	push	{r3, lr}
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b94:	f7ff ffe6 	bl	8008b64 <xflow>
 8008b98:	ec41 0b10 	vmov	d0, r0, r1
 8008b9c:	bd08      	pop	{r3, pc}

08008b9e <__math_oflow>:
 8008b9e:	b508      	push	{r3, lr}
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008ba6:	f7ff ffdd 	bl	8008b64 <xflow>
 8008baa:	ec41 0b10 	vmov	d0, r0, r1
 8008bae:	bd08      	pop	{r3, pc}

08008bb0 <fabs>:
 8008bb0:	ec51 0b10 	vmov	r0, r1, d0
 8008bb4:	ee10 2a10 	vmov	r2, s0
 8008bb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008bbc:	ec43 2b10 	vmov	d0, r2, r3
 8008bc0:	4770      	bx	lr

08008bc2 <finite>:
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	ed8d 0b00 	vstr	d0, [sp]
 8008bc8:	9801      	ldr	r0, [sp, #4]
 8008bca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008bce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008bd2:	0fc0      	lsrs	r0, r0, #31
 8008bd4:	b002      	add	sp, #8
 8008bd6:	4770      	bx	lr

08008bd8 <scalbn>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	ec55 4b10 	vmov	r4, r5, d0
 8008bde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008be2:	4606      	mov	r6, r0
 8008be4:	462b      	mov	r3, r5
 8008be6:	b99a      	cbnz	r2, 8008c10 <scalbn+0x38>
 8008be8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008bec:	4323      	orrs	r3, r4
 8008bee:	d036      	beq.n	8008c5e <scalbn+0x86>
 8008bf0:	4b39      	ldr	r3, [pc, #228]	; (8008cd8 <scalbn+0x100>)
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	ee10 0a10 	vmov	r0, s0
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f7f7 fcfd 	bl	80005f8 <__aeabi_dmul>
 8008bfe:	4b37      	ldr	r3, [pc, #220]	; (8008cdc <scalbn+0x104>)
 8008c00:	429e      	cmp	r6, r3
 8008c02:	4604      	mov	r4, r0
 8008c04:	460d      	mov	r5, r1
 8008c06:	da10      	bge.n	8008c2a <scalbn+0x52>
 8008c08:	a32b      	add	r3, pc, #172	; (adr r3, 8008cb8 <scalbn+0xe0>)
 8008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0e:	e03a      	b.n	8008c86 <scalbn+0xae>
 8008c10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008c14:	428a      	cmp	r2, r1
 8008c16:	d10c      	bne.n	8008c32 <scalbn+0x5a>
 8008c18:	ee10 2a10 	vmov	r2, s0
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f7 fb34 	bl	800028c <__adddf3>
 8008c24:	4604      	mov	r4, r0
 8008c26:	460d      	mov	r5, r1
 8008c28:	e019      	b.n	8008c5e <scalbn+0x86>
 8008c2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008c2e:	460b      	mov	r3, r1
 8008c30:	3a36      	subs	r2, #54	; 0x36
 8008c32:	4432      	add	r2, r6
 8008c34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008c38:	428a      	cmp	r2, r1
 8008c3a:	dd08      	ble.n	8008c4e <scalbn+0x76>
 8008c3c:	2d00      	cmp	r5, #0
 8008c3e:	a120      	add	r1, pc, #128	; (adr r1, 8008cc0 <scalbn+0xe8>)
 8008c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c44:	da1c      	bge.n	8008c80 <scalbn+0xa8>
 8008c46:	a120      	add	r1, pc, #128	; (adr r1, 8008cc8 <scalbn+0xf0>)
 8008c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c4c:	e018      	b.n	8008c80 <scalbn+0xa8>
 8008c4e:	2a00      	cmp	r2, #0
 8008c50:	dd08      	ble.n	8008c64 <scalbn+0x8c>
 8008c52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008c5e:	ec45 4b10 	vmov	d0, r4, r5
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008c68:	da19      	bge.n	8008c9e <scalbn+0xc6>
 8008c6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008c6e:	429e      	cmp	r6, r3
 8008c70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008c74:	dd0a      	ble.n	8008c8c <scalbn+0xb4>
 8008c76:	a112      	add	r1, pc, #72	; (adr r1, 8008cc0 <scalbn+0xe8>)
 8008c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e2      	bne.n	8008c46 <scalbn+0x6e>
 8008c80:	a30f      	add	r3, pc, #60	; (adr r3, 8008cc0 <scalbn+0xe8>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 fcb7 	bl	80005f8 <__aeabi_dmul>
 8008c8a:	e7cb      	b.n	8008c24 <scalbn+0x4c>
 8008c8c:	a10a      	add	r1, pc, #40	; (adr r1, 8008cb8 <scalbn+0xe0>)
 8008c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0b8      	beq.n	8008c08 <scalbn+0x30>
 8008c96:	a10e      	add	r1, pc, #56	; (adr r1, 8008cd0 <scalbn+0xf8>)
 8008c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c9c:	e7b4      	b.n	8008c08 <scalbn+0x30>
 8008c9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ca2:	3236      	adds	r2, #54	; 0x36
 8008ca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ca8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008cac:	4620      	mov	r0, r4
 8008cae:	4b0c      	ldr	r3, [pc, #48]	; (8008ce0 <scalbn+0x108>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	e7e8      	b.n	8008c86 <scalbn+0xae>
 8008cb4:	f3af 8000 	nop.w
 8008cb8:	c2f8f359 	.word	0xc2f8f359
 8008cbc:	01a56e1f 	.word	0x01a56e1f
 8008cc0:	8800759c 	.word	0x8800759c
 8008cc4:	7e37e43c 	.word	0x7e37e43c
 8008cc8:	8800759c 	.word	0x8800759c
 8008ccc:	fe37e43c 	.word	0xfe37e43c
 8008cd0:	c2f8f359 	.word	0xc2f8f359
 8008cd4:	81a56e1f 	.word	0x81a56e1f
 8008cd8:	43500000 	.word	0x43500000
 8008cdc:	ffff3cb0 	.word	0xffff3cb0
 8008ce0:	3c900000 	.word	0x3c900000

08008ce4 <_kill>:
 8008ce4:	4b02      	ldr	r3, [pc, #8]	; (8008cf0 <_kill+0xc>)
 8008ce6:	2258      	movs	r2, #88	; 0x58
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	f04f 30ff 	mov.w	r0, #4294967295
 8008cee:	4770      	bx	lr
 8008cf0:	20000484 	.word	0x20000484

08008cf4 <_exit>:
 8008cf4:	e7fe      	b.n	8008cf4 <_exit>
	...

08008cf8 <_init>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	bf00      	nop
 8008cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfe:	bc08      	pop	{r3}
 8008d00:	469e      	mov	lr, r3
 8008d02:	4770      	bx	lr

08008d04 <_fini>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	bf00      	nop
 8008d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0a:	bc08      	pop	{r3}
 8008d0c:	469e      	mov	lr, r3
 8008d0e:	4770      	bx	lr
